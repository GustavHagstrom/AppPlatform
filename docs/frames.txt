Authentication:
MSAL auth.
Implement interface IUserEntety / ITenantEntety with a ID property to link data to users/tenant.

Project structure:
Prefix all projects with the common name of the app.
Core library
Server
Shared RCL for server and modules
Add a module for each collection of related feature. Create a interface/abstract class for the module. 
then add them to the server project with a extension method on the webappbuilder class.
BidconLink and BidconDataAccess has their own libraries to let server and bidcon link use the BidconDataAccess with shared code.

Core project contains enteties and core business logic. 
Move as much as possible to the modules keeping them isolated and separate from eachother.
Implement interfaces which then can be injected as a collection when shared data across modules are needed.


Architecture/Tech-stack:
MSAl auth. Host on azure. 1 SQL-server for entire app. Web app service. 
CI/CD with github actions.

Should each module work without other modules? (Stand alone?) 
-Yes and no? There could be ok to have some "Base modules" that are mandatory for the for the app to run. 
- User role settings for example?


Should server project work without any modules? Server project should be a shell where as much logic as possible to be in the modules.

Module Name convention: End the project/namespace with module
Route conventions for pages in the modules: Prefix all pages with the module name (exkl. the "Module" suffix)