@implements IInjectableComponent
@inject IStringLocalizer<BidconSdkCredentials> Localizer
@inject ISdkCredentialsStore CredentialsService
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Policy="@Constants.Authorization.EditBidconConnectionPolicy">
    <Authorized>
        <SettingsSection Title="@Localizer["Bidcon SDK anslutning"]" LoadDataAsync="LoadDataAsync">
            <MudTextField T="string" Value="Credentials.User" ValueChanged="UpdateUserValue" Label="@Localizer["Användare"]" Margin="Margin.Dense" Variant="Variant.Outlined" ShrinkLabel="true" />
            <MudTextField T="string" Value="Credentials.Password" ValueChanged="UpdatePasswordValue" Label="@Localizer["Lösenord"]" Margin="Margin.Dense" Variant="Variant.Outlined" ShrinkLabel="true" />
            <MudTextField T="string" Value="Credentials.ConfigPath" ValueChanged="UpdateConfigPathValue" Label="@Localizer["Sökväg till config-fil"]" Margin="Margin.Dense" Variant="Variant.Outlined" ShrinkLabel="true"/>
        </SettingsSection>
    </Authorized>
</AuthorizeView>



@code{
    SdkCredentials Credentials = new SdkCredentials();

    public RenderFragment Render()
    {
        return RenderEngine.Render(GetType());
    }
    async Task LoadDataAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tenantId = state.User.GetTenantId();
        if (tenantId is null) return;
        var result = await CredentialsService.GetSdkCredentialsAsync(tenantId);
        if (result != null)
        {
            Credentials = result;
        }
    }
    async Task UpsertCredentials()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tenantId = state.User.GetTenantId();
        if (tenantId is null) return;
        await CredentialsService.UpsertCredentialsAsync(tenantId, Credentials);
    }
    Task UpdateUserValue(string value)
    {
        Credentials.User = value;
        return UpsertCredentials();
    }
    Task UpdatePasswordValue(string value)
    {
        Credentials.Password = value;
        return UpsertCredentials();
    }
    Task UpdateConfigPathValue(string value)
    {
        Credentials.ConfigPath = value;
        return UpsertCredentials();
    }
}