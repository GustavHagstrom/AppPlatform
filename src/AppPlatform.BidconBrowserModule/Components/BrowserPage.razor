@page "/bidcon-browser"
@using MudBlazor.Services
@implements IAsyncDisposable

@inject IStringLocalizer<BrowserPage> Localizer
@inject IBrowserViewportService BrowserViewportService
<div class="relative" style="height: 100%">
    <MudOverlay Absolute="true" DarkBackground="true" Visible="IsLoading">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
    </MudOverlay>
    
    <PageSetupWithNavigation>
        <NavigationContent>

            <MudStack Spacing="0" Row="IsSmAndDown">
                <MudButton OnClick="() => ActiveTab = 1" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Search" Class="px-4 justify-start" Style="@TabPanelButtonColorStyle(1)">@Localizer["Sök"]</MudButton>
                <MudButton OnClick="() => ActiveTab = 2" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Folder" Class="px-3 justify-start" Style="@TabPanelButtonColorStyle(2)">@Localizer["Utforska"]</MudButton>
                <MudButton OnClick="() => ActiveTab = 3" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.CheckBox" Class="px-3 justify-start" Style="@TabPanelButtonColorStyle(3)">@($"{Localizer["Valda"]} ({NumberOfSelectedEstimations})")</MudButton>
                @*     <MudBadge Content="NumberOfSelectedEstimations" Color="Color.Primary" Overlap="true">
                    <MudButton OnClick="() => ActiveTab = 3" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.CheckBox" Style="width: 100%; height: 100%" Class="px-3 justify-start">@Localizer["Valda"]</MudButton>
                </MudBadge> *@
                
            </MudStack>

        </NavigationContent>
        <ChildContent>
            <MudToolBar Dense="true" DisableGutters="true" Class="border-b border-solid">

                <MudIconButton Icon="@Icons.Material.Sharp.Refresh" Style="height: 40px; width: 40px;" />
                <MudIconButton Icon="@Icons.Material.Sharp.Download" Style="height: 40px; width: 40px;" />

            </MudToolBar>
            @if (ActiveTab == 1)
            {
                <EstimationList ItemTree="ItemTree" IsRefreshing="IsLoading" Height="calc(100% - 38px)" />
            }
            @if (ActiveTab == 2)
            {
                <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsLoading" Height="calc(100% - 38px)" />
            }
            @if (ActiveTab == 3)
            {
                <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsLoading" Height="calc(100% - 38px)" />
            }
        </ChildContent>
    </PageSetupWithNavigation>
</div>




@code{
    int ActiveTab = 1;
    int NumberOfSelectedEstimations = 3;
    Guid ObserverId = Guid.NewGuid();
    bool IsSmAndDown => CurrentBreakPoint == Breakpoint.Xs || CurrentBreakPoint == Breakpoint.Sm;
    bool IsLoading = false;
    TreeItem? ItemTree = null;

    string TabPanelButtonColorStyle(int tab) => ActiveTab == tab ? "background-color: var(--mud-palette-primary-hover); color: var(--mud-palette-primary);" : "";

    Breakpoint CurrentBreakPoint;
    Breakpoint LastBreakPoint;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(ObserverId, (args) =>
            {
                LastBreakPoint = CurrentBreakPoint;
                CurrentBreakPoint = args.Breakpoint;
                if(LastBreakPoint != CurrentBreakPoint)
                {
                    StateHasChanged();
                }
            });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(ObserverId);
}