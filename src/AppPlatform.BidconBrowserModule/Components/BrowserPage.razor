@page "/bidcon-browser"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor.Services
@implements IAsyncDisposable

@inject IStringLocalizer<BrowserPage> Localizer
@inject IBrowserViewportService BrowserViewportService



<PageSetupWithNavigation >
    <NavigationContent>

        <MudStack Spacing="0" Row="IsSmAndDown" Style="min-width: 150px;">
            <MudButton OnClick="() => ActiveTab = 1" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Search" Class="px-4 justify-start" Style="@TabPanelButtonColorStyle(1)">@Localizer["Sök"]</MudButton>
            <MudButton OnClick="() => ActiveTab = 2" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Folder" Class="px-3 justify-start" Style="@TabPanelButtonColorStyle(2)">@Localizer["Utforska"]</MudButton>
            <MudButton OnClick="() => ActiveTab = 3" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.CheckBox" Class="px-3 justify-start" Style="@TabPanelButtonColorStyle(3)">@($"{Localizer["Valda"]}{NumberOfSelectedEstimations}")</MudButton>
        </MudStack>

    </NavigationContent>
    <ChildContent>
        <div style="height: 100%; position: relative">
            <MudOverlay Visible="IsLoading" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
            </MudOverlay>

            <MudToolBar Dense="true" DisableGutters="true" Class="border-b border-solid">

                <MudIconButton Icon="@Icons.Material.Sharp.Refresh" Style="height: 40px; width: 40px;" OnClick="LoadDataAsync" />
                <MudIconButton Icon="@Icons.Material.Sharp.Download" Style="height: 40px; width: 40px;" />

            </MudToolBar>
            @if (ActiveTab == 1)
            {
                <EstimationList ItemTree="ItemTree" Height="calc(100% - 48px)" />
            }
            @if (ActiveTab == 2)
            {
                <EstimationExplorer ItemTree="ItemTree" Height="calc(100% - 48px)" />
            }
            @if (ActiveTab == 3)
            {
                <EstimationSelectionList ItemTree="ItemTree" Height="calc(100% - 48px)" />
            }
        </div>
        
    </ChildContent>
</PageSetupWithNavigation>



@inject IBidconBrowserAccesService BidconBrowserAccesService
@inject AuthenticationStateProvider AuthenticationStateProvider

@code{
    int ActiveTab = 1;
    string? NumberOfSelectedEstimations => EstimationCount == 0 || EstimationCount is null ? string.Empty : $" ({EstimationCount})";
    int? EstimationCount => ItemTree?.SelectedEstimations().Count();
    Guid ObserverId = Guid.NewGuid();
    bool IsSmAndDown => CurrentBreakPoint == Breakpoint.Xs || CurrentBreakPoint == Breakpoint.Sm;
    bool IsLoading = false;
    TreeItem? ItemTree = null;

    string TabPanelButtonColorStyle(int tab) => ActiveTab == tab ? "background-color: var(--mud-palette-primary-hover); color: var(--mud-palette-primary);" : "";

    Breakpoint CurrentBreakPoint;
    Breakpoint LastBreakPoint;

    protected override Task OnInitializedAsync()
    {
        return LoadDataAsync();
    }
    // protected override Task OnParametersSetAsync()
    // {
    //     return LoadData();
    // }

    async Task LoadDataAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if(state.User.Identity?.IsAuthenticated == true)
        {
            IsLoading = true;
            StateHasChanged();
            ItemTree = await BidconBrowserAccesService.GetTreeItemRootAsync(state.User);
            ItemTree.SelectionChanged = StateHasChanged;
            IsLoading = false;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if (firstRender)
        {
            // await LoadDataAsync();
            await BrowserViewportService.SubscribeAsync(ObserverId, (args) =>
            {
                LastBreakPoint = CurrentBreakPoint;
                CurrentBreakPoint = args.Breakpoint;
                if(LastBreakPoint != CurrentBreakPoint)
                {
                    StateHasChanged();
                }
            });
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(ObserverId);
}