@page "/bidcon-browser/preview"
<div style="height: 100%; position: relative;">
    <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
    <PageSetupWithNavigation>
        <NavigationContent>
            @foreach (var estimation in Estimations)
            {
                <div @onclick="x => SelectedEstimation = estimation">
                    @estimation.ToString()
                </div>
            }
        </NavigationContent>
        <ChildContent>
            <ViewPreviewer Estimation="SelectedEstimation" />
        </ChildContent>
    </PageSetupWithNavigation>
</div>







@inject ILocalStorageService LocalStorageService
@inject IBidconAccess BidconAccess
@inject AuthenticationStateProvider AuthenticationStateProvider
@code{

    List<Estimation> Estimations = new();
    Estimation? SelectedEstimation;
    bool IsLoading = true;


    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }

    async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();
        Estimations.Clear();
        SelectedEstimation = null;
        await foreach (var estimation in GetEstimationsAsync())
        {
            Estimations.Add(estimation);
            if (SelectedEstimation is null) SelectedEstimation = Estimations.FirstOrDefault();
            StateHasChanged();
        }
        SelectedEstimation = Estimations.FirstOrDefault();
        IsLoading = false;
        StateHasChanged();
    }
    async IAsyncEnumerable<Estimation> GetEstimationsAsync()
    {
        var commaSeparatedIds = await LocalStorageService.GetItemAsync(Constants.LocalStorageKeys.SelectedEstimationsIds);
        var ids = commaSeparatedIds?.Split(',');
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tenantId = state.User.GetTenantId();
        if (tenantId is null || ids is null) yield break;
        foreach (var id in ids)
        {
            var estimation = await BidconAccess.GetEstimationAsync(id, tenantId);
            yield return estimation;
        }
    }
}