@using AppPlatform.Shared.Abstractions

@* @if(ApplicationLink is not null)
{
    if (ApplicationLink.AuthPolicy is not null)
    {
        <AuthorizeView Policy="@ApplicationLink.AuthPolicy">
            <Authorized>
                <AppNavLink Match="NavLinkMatch.Prefix" Icon="@ApplicationLink.Icon" Href="@ApplicationLink.LinkRoute" >
                    @ChildContent
                </AppNavLink>
            </Authorized>
        </AuthorizeView>
    }
    else
    {
        <MudNavLink Match="NavLinkMatch.Prefix" Icon="@ApplicationLink.Icon" Href="@ApplicationLink.LinkRoute" >
            @ChildContent
        </MudNavLink>
    }
} *@

@if(Policy is not null)
{
    <AuthorizeView Policy="@Policy">
        <Authorized>
            <AppNavLink Match="@Match" Href="@Href" Style="@Style" Class="@Class">
                @ChildContent
            </AppNavLink>
        </Authorized>
    </AuthorizeView>
}
else
{
    <AppNavLink Match="@Match" Href="@Href" Style="@Style" Class="@Class">
        @ChildContent
    </AppNavLink>
}


@code{
    [Parameter] public string? Policy { get; set; }
    [Parameter] public string? Href { get; set; }
    // [Parameter] public IApplicationLink? ApplicationLink { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;
    [Parameter] public NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;
}