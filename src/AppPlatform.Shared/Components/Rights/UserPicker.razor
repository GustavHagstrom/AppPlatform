@using AppPlatform.Shared.Services.MicrosoftGraph
@inject IStringLocalizer<UserPicker> Localizer


<MudSwitch T="bool" @bind-Value="ShowOnlyPicked" Label="@Localizer["Visa endast valda"]" Color="Color.Primary" />
<MudTextField T="string" Variant="Variant.Outlined" @bind-Value="Filter" Label="@Localizer["Sök"]" Margin="Margin.Dense" Immediate="true" />
<MudSimpleTable Hover="false" Dense="true" Bordered="false">
    <tbody>
        @foreach (var user in UsersIterator)
        {
            <tr>
                <td class="pl-2" >
                    <MudCheckBox T="bool"
                                 Dense="true"
                                 Value="@PickedUserIds.Any(x => x == user.User.Id)"
                                 ValueChanged="x => OnPickChanged(user, x)" />
                </td>
                <td class="pl-2" style="width: 100%;">
                    <UserAvatar Size="Size.Small" User="user"/>
                </td>
            </tr>
        }
    </tbody>
</MudSimpleTable>


@code {
    [Parameter] public List<string> PickedUserIds { get; set; } = new List<string>();
    [Parameter] public List<UserWithPhoto> AllUsers { get; set; } = new List<UserWithPhoto>();
    [Parameter] public EventCallback<PickChangedRecord<UserWithPhoto>> PickChanged { get; set; }

    bool ShowOnlyPicked { get; set; } = false;
    string Filter { get; set; } = string.Empty;
    IEnumerable<string> FilterWords => Filter.Split(' ', StringSplitOptions.RemoveEmptyEntries);

    IEnumerable<UserWithPhoto> UsersIterator => AllUsers
        .Where(x => ShowOnlyPicked == true ? PickedUserIds.Contains(x.User.Id!) : true)
        .Where(user => FilterWords.All(word => user.User.DisplayName is null ? false : user.User.DisplayName.ToLower().Contains(word.ToLower())))
        .OrderBy(x => x.User.DisplayName);

    async Task OnPickChanged(UserWithPhoto user, bool value)
    {
        await PickChanged.InvokeAsync(new PickChangedRecord<UserWithPhoto>(user, value));
        StateHasChanged();
    }
}