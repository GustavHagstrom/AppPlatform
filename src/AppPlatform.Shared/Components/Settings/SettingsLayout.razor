@using MudBlazor.Services
@inherits LayoutComponentBase
@layout MainLayout
@implements IBrowserViewportObserver
@implements IAsyncDisposable
@inject IStringLocalizer<SettingsLayout> Localizer
@inject IApplicationLinkService ApplicationLinkService
@inject IBrowserViewportService BrowserViewportService

<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <div style="height: 100%; max-width: 100%; display: flex">
        <div class="border-solid border-r" style="height: 100%;">
            <MudText Class="pt-3 px-4" Typo="Typo.h6" Style="font-weight: bold;">@Localizer["Inställningar"]</MudText>
                <MudNavMenu Color="Color.Primary" Dense="false">
                    <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Sharp.Settings" Href="@SharedRoutes.Start">
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@Localizer["Allmänt"]</MudText>
                    </MudNavLink>
                    @foreach (var link in ApplicationLinkService.SettingsPageLinks)
                {
                    <MudNavLink Match="NavLinkMatch.Prefix" Icon="@link.Icon" Href="@link.LinkRoute">
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 500;">@link.Text</MudText>
                        </MudNavLink>
                }
            </MudNavMenu>
        </div>
        <div class="flex-grow-1" style="height: 100%">
            @Body
        </div>
    </div>
</MudHidden>
<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <style>
        .nav-item-block a {
            display: block !important;
        }
    </style>
    <div style="height: 100%; width: 100%; display: block" class="nav-item-block">
        <div class="border-solid border-b d-flex" style="height: calc(var(--mud-appbar-height) - var(--mud-appbar-height)/3);">
          @*   <div class="d-flex align-center">
                <MudText Class="px-4" Typo="Typo.h6" Style="font-weight: bold; text-align: center;">@Localizer["Inställningar"]</MudText>
            </div> *@
            
            <MudNavMenu Color="Color.Primary" Dense="false" Class="d-flex">
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Sharp.Settings" Href="@SharedRoutes.Start"/>
                @foreach (var link in ApplicationLinkService.SettingsPageLinks)
                {
                    <MudNavLink Match="NavLinkMatch.Prefix" Icon="@link.Icon" Href="@link.LinkRoute" />
                }
            </MudNavMenu>
        </div>
        <div class="flex-grow-1" style="height: calc(100% - var(--mud-appbar-height) + var(--mud-appbar-height)/3);">
            @Body
        </div>
    </div>
</MudHidden>
@code{
    bool open = true;
    List<Breakpoint> _breakpointHistory = new();
    Breakpoint _start;
    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();
    // ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
    // {
    //     ReportRate = 250,
    //     NotifyOnBreakpointOnly = true
    // };

    void toggleDrawer()
    {
        open = !open;
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);
    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        if (browserViewportEventArgs.IsImmediate)
        {
            _start = browserViewportEventArgs.Breakpoint;
        }
        else
        {
            _breakpointHistory.Add(browserViewportEventArgs.Breakpoint);
        }

        return InvokeAsync(StateHasChanged);
    }
}


