@* @if (DividerOnTop)
{
    <MudDivider Style="flex-grow: 0;"/>
} *@
<div class="pb-6">
    <MudText Typo="Typo.subtitle1" Style="font-weight: bold;">@Title</MudText>
    <div  style="@style">
        <CascadingValue Value="this">
            @ChildContent
        </CascadingValue>
    </div>
</div>
@code {
    [CascadingParameter] public SettingsPageBase? SettingsPageBase { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public bool DividerOnTop { get; set; } = false;
    [Parameter] public Func<Task>? LoadDataAsync { get; set; }
    [Parameter] public string MinWidth { get; set; } = "300px";
    [Parameter] public string MaxWidth { get; set; } = "600px";

    public bool IsLoading { get; set; } = false;
    public Action? IsLoadingChanged { get; set; }

    string style => $"min-width: {MinWidth}; max-width: {MaxWidth}; display: flex; flex-direction: column; gap: 8px;";
    


    protected override void OnInitialized()
    {
        SettingsPageBase?.RegisterSettingsSection(this);
    }
    protected override async Task OnInitializedAsync()
    {
        if(LoadDataAsync is not null)
        {
            SetIsLoading(true);
            await LoadDataAsync.Invoke();
            SetIsLoading(false);
        }
    }
    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        IsLoadingChanged?.Invoke();
    }
}
