@inject IStringLocalizer<FormatEditor> Localizer

<ToolbarSection Title="@Localizer["Format"]">
    <ToolbarRow>
        <ToolbarColumn>
            <ToolbarRow>
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatBold" Style="background-color: var(--mud-palette-action-disabled-background)" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatItalic" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatUnderlined" />
            </ToolbarRow>
            <ToolbarRow>
                <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <ActivatorContent>
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Sharp.BorderBottom" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderBottom"/>
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderTop"/>
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderLeft"/>
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderRight"/>
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderClear" />
                   @*      <MudMenuItem Icon="@Icons.Material.Sharp.BorderAll" /> *@
                        <MudMenuItem Icon="@Icons.Material.Sharp.BorderOuter" />
                    </ChildContent>
                </MudMenu>
                <MudMenu >
                    <ActivatorContent>
                        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Sharp.FormatColorFill" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudColorPicker DisableToolbar="true" DisableColorField="false" DisableModeSwitch="true" DisablePreview="false" DisableAlpha="true" PickerVariant="PickerVariant.Static" />
                    </ChildContent>
                </MudMenu>
                <MudMenu>
                    <ActivatorContent>
                        <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Sharp.FormatColorText" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudColorPicker DisableToolbar="true" DisableColorField="false" DisableModeSwitch="true" DisablePreview="false" DisableAlpha="true" PickerVariant="PickerVariant.Static" />
                    </ChildContent>
                </MudMenu>
            </ToolbarRow>
        </ToolbarColumn>
        <ToolbarColumn>
            <ToolbarRow>
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignTop" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignCenter" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignBottom" />
            </ToolbarRow>
            <ToolbarRow>
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignLeft" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignCenter" />
                <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignRight" />
            </ToolbarRow>
        </ToolbarColumn>
        <ToolbarColumn>
            <style>
                .NoMarginPls > div {
                    margin: 0 !important;
                }
            </style>
            <ToolbarRow>
                <div style="width: 36px; height: 36px;"/>
            </ToolbarRow>
            <ToolbarRow Class="NoMarginPls">
                <MudTextField T="string" Margin="Margin.Dense" Label="@Localizer["Storlek"]" Variant="Variant.Outlined" Adornment="Adornment.None" AdornmentIcon="@Icons.Material.Sharp.FormatSize" ShrinkLabel="true" Style="width: 75px; ; height: 36px;" />
            </ToolbarRow>
        </ToolbarColumn>
    </ToolbarRow>
    
</ToolbarSection>

@code{
    [Parameter] public DataCellFormat? CellFormat { get; set; }
    [Parameter] public EventCallback<DataCellFormat> CellFormatChanged { get; set; }

    enum Border
    {
        None,
        Bottom,
        Top,
        Left,
        Right,
        All,
        Outer
    }

    Task SetFontFamlity(string font)
    {
        if (CellFormat is not null)
        {
            CellFormat.FontFamily = font;
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    Task SetFontSize(int size)
    {
        if (CellFormat is not null)
        {
            CellFormat.FontSize = size;
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    Task SetIsBold(bool isbold)
    {
        if (CellFormat is not null)
        {
            CellFormat.IsBold = isbold;
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    Task SetIsItalic(bool isItalic)
    {
        if (CellFormat is not null)
        {
            CellFormat.IsItalic = isItalic;
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    Task SetIsUnderlined(bool isUnderlined)
    {
        if (CellFormat is not null)
        {
            CellFormat.IsUnderline = isUnderlined;
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    Task SetBorder(Border border)
    {
        if (CellFormat is not null)
        {
            Action action = border switch
            {
                Border.None => () =>
                {
                    CellFormat.HasBorderBottom = false;
                    CellFormat.HasBorderTop = false;
                    CellFormat.HasBorderLeft = false;
                    CellFormat.HasBorderRight = false;
                },
                Border.Bottom => () =>
                {
                    CellFormat.HasBorderBottom = true;
                    CellFormat.HasBorderTop = false;
                    CellFormat.HasBorderLeft = false;
                    CellFormat.HasBorderRight = false;
                }
                ,
                Border.Top => () =>
                {
                    CellFormat.HasBorderBottom = false;
                    CellFormat.HasBorderTop = true;
                    CellFormat.HasBorderLeft = false;
                    CellFormat.HasBorderRight = false;
                },
                Border.Left => () =>
                {
                    CellFormat.HasBorderBottom = false;
                    CellFormat.HasBorderTop = false;
                    CellFormat.HasBorderLeft = true;
                    CellFormat.HasBorderRight = false;
                },
                Border.Right => () =>
                {
                    CellFormat.HasBorderBottom = false;
                    CellFormat.HasBorderTop = false;
                    CellFormat.HasBorderLeft = false;
                    CellFormat.HasBorderRight = true;
                },
                Border.All => () =>
                {
                    CellFormat.HasBorderBottom = true;
                    CellFormat.HasBorderTop = true;
                    CellFormat.HasBorderLeft = true;
                    CellFormat.HasBorderRight = true;
                },
                Border.Outer => () =>
                {
                    CellFormat.HasBorderBottom = true;
                    CellFormat.HasBorderTop = true;
                    CellFormat.HasBorderLeft = true;
                    CellFormat.HasBorderRight = true;

                },
                _ => () =>
                {
                    CellFormat.HasBorderBottom = false;
                    CellFormat.HasBorderTop = false;
                    CellFormat.HasBorderLeft = false;
                    CellFormat.HasBorderRight = false;
                },
            };
            action.Invoke();
            return CellFormatChanged.InvokeAsync(CellFormat);
        }
        return Task.CompletedTask;
    }
    
    
}