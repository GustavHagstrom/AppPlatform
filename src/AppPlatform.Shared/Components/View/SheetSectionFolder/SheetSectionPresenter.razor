@using AppPlatform.Core.Enums.ViewTemplate
@using AppPlatform.Core.Services
@using AppPlatform.Shared.Components.View.SheetSectionStuff
@using AppPlatform.Shared.Components.View.TableStuff
@using AppPlatform.Shared.Services.Views
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web.Virtualization

@inject IViewStyleService ViewStyleService
@inject IStringLocalizer<SheetSectionPresenter> Localizer
@inject ISheetDataService SheetNameService

@if (Section is not null && Estimation is not null && View is not null)
{
    var totalWidth = Section.Columns.Sum(x => x.Width);
    var widthMap = new Dictionary<SheetColumn, string>();
    var columns = Section.Columns.OrderBy(x => x.Order).ToList();

    foreach (var column in columns)
    {
        var widthValue = ((double)column.Width / totalWidth * 100).ToString(CultureInfo.InvariantCulture);
        var widthText = widthValue + "%";
        widthMap.Add(column, widthText);
    }

    CreateStyleMaps();

    <ViewTable>
        <HeaderContent>
            <ViewRow>
                @foreach (var column in columns)
                {
                    var styleContainer = CellStyles[Section.CellFormats.First(x => x.RowType == SheetRowType.Header && x.ColumnType == column.ColumnType).Id];
                    var isVisible = styleContainer.Format.IsVisible;
                    var value = SheetNameService.GetColumnTypeName(column.ColumnType);
                    <ViewCell Width="@widthMap[column]" CellValueStyle="@styleContainer.CssStyle" IsVisible="@isVisible" Type="ViewCell.CellType.HeaderCell" CellValue="@value" />
                }
            </ViewRow>
        </HeaderContent>
        <BodyContent>
            <Virtualize TItem="SheetItemContainer" Items="NetSheetContainer?.AllExpandedInOrder.Skip(1).ToList()">
                <ViewRow>
                    @{
                        int columnCount = 0;
                        @foreach (var column in columns)
                        {
                            var rowType = RowTypeFromInt(context.SheetItem.RowType);
                            var styleContainer = CellStyles[Section.CellFormats.First(x => x.RowType == rowType && x.ColumnType == column.ColumnType).Id];
                            columnCount += 1;
                            var isVisible = styleContainer.Format.IsVisible;
                            var cellValue = SheetNameService.GetColumnDataFromItem(column.ColumnType, context.SheetItem);
                            var isIndented = columnCount == 1;
                            var showExpandButton = columnCount == 1 && context.SheetItem.Children.Count != 0;
                            <ViewCell Width="@widthMap[column]" CellValueStyle="@styleContainer.CssStyle" IsVisible="@isVisible" Type="ViewCell.CellType.TableCell" CellValue="@cellValue" IndentLevel="@context.Level" Toggled="context.IsExpanded" ToggledChanged="x => SetExpand(context, x)" IsIndented="@isIndented" ShowExpandButton="@showExpandButton" />
                        }
                    }
                </ViewRow>
            </Virtualize>
        </BodyContent>
    </ViewTable>


}

@code {
    [Parameter, EditorRequired] public SheetSection? Section { get; set; }
    [Parameter] public bool DoItemsStartAsExpanded { get; set; } = false;
    [Parameter, EditorRequired] public Estimation? Estimation { get; set; }
    [Parameter, EditorRequired] public View? View { get; set; }

    Dictionary<string, SheetCellFormatContainer> CellStyles = new();
    SheetItemContainer? NetSheetContainer;
    bool _firstRender = true;

    protected override void OnAfterRender(bool firstRender)
    {
        _firstRender = firstRender;
    }
    protected override void OnParametersSet()
    {
        if(Estimation?.NetSheet is not null && _firstRender)
        {
            NetSheetContainer = new SheetItemContainer(Estimation.NetSheet, DoItemsStartAsExpanded);
            NetSheetContainer.IsExpanded = true;
            var test = NetSheetContainer.AllExpandedInOrder.ToList();
        }
    }
    void SetExpand(SheetItemContainer container, bool isExpanded)
    {
        container.IsExpanded = isExpanded;
    }
    void CreateStyleMaps()
    {
        CellStyles.Clear();
        if (Section?.CellFormats is null) return;

        foreach (var cellFormat in Section.CellFormats)
        {
            // var key = new SheetCellKey(cellFormat.RowType, cellFormat.ColumnType);
            var key = cellFormat.Id;
            var style = ViewStyleService.CreateFormatStyles(cellFormat);
            CellStyles.Add(key, new(style, cellFormat));
        }
    }
    SheetRowType RowTypeFromInt(int? rowType) => rowType switch
    {
        (int)AppPlatform.Core.Enums.BidconAccess.RowType.Group => SheetRowType.Group,
        (int)AppPlatform.Core.Enums.BidconAccess.RowType.Part => SheetRowType.Part,
        null => SheetRowType.Header,
        _ => SheetRowType.Post
    };
}