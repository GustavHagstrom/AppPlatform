@using AppPlatform.Core.Enums.ViewTemplate
@using AppPlatform.Shared.Services.Views
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IViewStyleService ViewClassService
@inject IStringLocalizer<SheetSectionPresenter> Localizer


@if (Section is not null && Estimation is not null && View is not null)
{
    ColumnTypeToStyleMapper = new();
    RowTypeToStyleMapper = new();
    <style>
        @{
            ColumnTypeToStyleMapper.Clear();
            RowTypeToStyleMapper.Clear();
        }

        @foreach (var column in Section.Columns)
        {
            ColumnTypeToStyleMapper.Add(column.ColumnType, column.ColumnType.ToString());
            
            
            @($"table tbody tr .{ColumnTypeToStyleMapper[column.ColumnType]} {{")
                @ViewClassService.CreateSheetColumnStyles(column, Section.Columns.Sum(x => x.Width))
            @("}")
            
        }
        @foreach (var format in Section.RowFormats)
        {
            RowTypeToStyleMapper.Add(format.RowType, format.RowType.ToString());
            
                @($"table tbody tr .{RowTypeToStyleMapper[format.RowType]} {{")
                    @ViewClassService.CreateFormatStyles(format)
                @("}")
        }
    </style>

    <div class="@tableContainerClass" @onclick="SetSelectedSection">
        <table style="width: 100%;">
            <tbody>
                <tr>
                    @foreach (var column in Section.Columns.OrderBy(x => x.Order))
                    {
                        <th @onclick="() => SetSelectedItem(column.ColumnType)" class="@cellClass(column.ColumnType, null)">
                            <div >
                                @GetColumnName(column.ColumnType)
                            </div>
                        
                        </th>
                    }
                </tr>

               
                <Virtualize TItem="SheetItem" Items="Estimation.NetSheet!.AllInOrder.Skip(1).ToList()">
                    <tr>
                        @{
                        int columnCount = 0;
                        }
                        @foreach (var column in Section.Columns.OrderBy(x => x.Order))
                        {
                            columnCount +=1;
                            var indentStyle = columnCount == 1 ? $"padding-left: {context.Level * 8}px" : string.Empty;

                            <td @onclick="() => SetSheetItemSelection(context, column.ColumnType)" class="@cellClass(column.ColumnType, context)">
                                <div style="@indentStyle">
                                    @GetColumnDataFromItem(column.ColumnType, context)
                                </div>
                            </td>
                        }
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>
    
}

@code {
    [Parameter, EditorRequired] public SheetSection? Section { get; set; }
    [Parameter] public bool EditMode { get; set; } = false;
    [Parameter, EditorRequired] public Estimation? Estimation { get; set; }
    [Parameter, EditorRequired] public View? View { get; set; }
    [CascadingParameter] public ViewPresenter? ViewPresenter { get; set; }

    Dictionary<SheetColumnType, string> ColumnTypeToStyleMapper { get; set; } = new();
    Dictionary<SheetRowType, string> RowTypeToStyleMapper { get; set; } = new();

    string tableContainerClass => IsSelected() ? "selected table-container " : "table-container";

    /// <summary>
    /// for header or row cells
    /// </summary>
    /// <param name="cType"></param>
    /// <param name="item"></param>
    /// <returns></returns>
    string cellClass(SheetColumnType cType, SheetItem? item)
    {
        
        bool isSelected = false;
        if(item is null) //if item is null, it is a header cell
        {
            isSelected = IsSelected(cType);
        }
        else
        {
            isSelected = IsSelected(item, cType);
        }

        var rType = item?.RowType switch
        {
            (int)AppPlatform.Core.Enums.BidconAccess.RowType.Group => SheetRowType.Group,
            (int)AppPlatform.Core.Enums.BidconAccess.RowType.Part => SheetRowType.Part,
            null => SheetRowType.Header,
            _ => SheetRowType.Post
        };
        return $"{(isSelected == true ? "selected " : string.Empty)}{ColumnTypeToStyleMapper[cType]} {RowTypeToStyleMapper[rType]};";
    }
    /// <summary>
    /// for SheetItem cells
    /// </summary>
    /// <param name="item"></param>
    /// <param name="column"></param>
    /// <returns></returns>
    bool IsSelected(SheetItem item, SheetColumnType column)
    {
        if (EditMode == false || ViewPresenter?.SelectedSection != Section) return false;
        if(ViewPresenter?.SelectedItem is SheetCellSelection selection)
        {
            return selection.Item == item && selection.ColumnType == column;
        }
        return false;
    }
    bool IsSelected() => ViewPresenter?.SelectedSection == Section && EditMode;

    /// <summary>
    /// for header cells
    /// </summary>
    /// <param name="column"></param>
    /// <returns></returns>
    bool IsSelected(SheetColumnType column) 
    {
        if (EditMode == false || ViewPresenter?.SelectedSection != Section) return false;
        return ViewPresenter?.SelectedItem is SheetColumnType type && type == column && EditMode;
    }


    void SetSelectedSection()
    {
        ViewPresenter?.SetSelectedSection(Section);
    }
    void SetSheetItemSelection(SheetItem item, SheetColumnType type)
    {
        SetSelectedItem(new SheetCellSelection(item, type));
    }
    void SetSelectedItem(object item)
    {
        ViewPresenter?.SetSelectedSectionItem(item);
    }
    string? GetColumnDataFromItem(SheetColumnType type, SheetItem item)
    {
        return type switch
        {
            SheetColumnType.Description => item.Description,
            SheetColumnType.Quantity => item.Quantity.ToString(),
            SheetColumnType.Unit => item.Unit,
            SheetColumnType.UnitCost => item.UnitCost is null ? string.Empty : ((double)item.UnitCost).ToString("F1", CultureInfo.InvariantCulture),
            SheetColumnType.TotalCost => item.TotalCost is null ? string.Empty : ((double)item.TotalCost).ToString("F1", CultureInfo.InvariantCulture),
            SheetColumnType.UnitAskingPrice => item.UnitAskingPrice is null ? string.Empty : ((double)item.UnitAskingPrice).ToString("F1", CultureInfo.InvariantCulture),
            SheetColumnType.TotalAskingPrice => item.TotalAskingPrice is null ? string.Empty : ((double)item.TotalAskingPrice).ToString("F1", CultureInfo.InvariantCulture),
            _ => throw new NotImplementedException()
        };
    }
    string? GetColumnName(SheetColumnType type)
    {
        return type switch
        {
            SheetColumnType.Description => Localizer["Benämning"],
            SheetColumnType.Quantity => Localizer["Mängd"],
            SheetColumnType.Unit => Localizer["Enhet"],
            SheetColumnType.UnitCost => Localizer["Enhetskostnad"],
            SheetColumnType.TotalCost => Localizer["Total kostnad"],
            SheetColumnType.UnitAskingPrice => Localizer["Enhetspris kund"],
            SheetColumnType.TotalAskingPrice => Localizer["Total kundpris"],
            _ => throw new NotImplementedException()
        };
    }
}