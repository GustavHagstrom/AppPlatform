@using AppPlatform.Core.Enums.ViewTemplate
@using AppPlatform.Core.Services
@using AppPlatform.Shared.Services.Views
@using System.Globalization
@using Microsoft.AspNetCore.Components.Web.Virtualization

@inject IViewStyleService ViewStyleService
@inject IStringLocalizer<SheetSectionPresenter> Localizer
@inject ISheetDataService SheetNameService

@if (Section is not null && Estimation is not null && View is not null)
{
    CreateStyleMaps();
    
    <div class="table-container">
        <table style="width: 100%;">
            <colgroup>
                @{
                    var allColumnsWidthSum = Section.Columns.Sum(x => x.Width);
                }
                @foreach (var column in Section.Columns.OrderBy(x => x.Order))
                {
                    <col style="@($"width: {((double)column.Width / allColumnsWidthSum * 100).ToString(CultureInfo.InvariantCulture)}%")" />
                }
                    
            </colgroup>
            <thead>
                <tr>
                    @foreach (var column in Section.Columns.OrderBy(x => x.Order))
                    {
                        <th>
                            <div class="cell-container">
                                <div class="@CellValueClass" style="@CellStyles[new SheetCellKey(SheetRowType.Header, column.ColumnType)]">
                                    @SheetNameService.GetColumnTypeName(column.ColumnType)
                                </div>
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>               
                <Virtualize TItem="SheetItemContainer" Items="NetSheetContainer?.AllExpandedInOrder.Skip(1).ToList()">
                    <tr>
                        @{
                            int columnCount = 0;
                        }
                        @foreach (var column in Section.Columns.OrderBy(x => x.Order))
                        {
                            columnCount += 1;
                            var indentStyle2 = columnCount == 1 ? $"padding-left: {context.Level * 16 + 24}px;" : string.Empty;
                            var indentStyle3 = columnCount == 1 ? $"left: {context.Level * 16 - 8}px;" : string.Empty;

                            <td>
                                <div class="cell-container">
                                    @if(columnCount == 1 && context.Children.Count != 0)
                                    {
                                        <div class="cell-expand-button" style="@indentStyle3">
                                            <MudToggleIconButton Icon="@Icons.Material.Sharp.KeyboardArrowRight" ToggledIcon="@Icons.Material.Sharp.KeyboardArrowDown" Toggled="context.IsExpanded" ToggledChanged="x => SetExpand(context, x)" Class="pa-1"/> 
                                        </div>
                                    }
                                    <div class="@CellValueClass" style="@($"{indentStyle2} {CellStyles[new SheetCellKey(RowTypeFromInt(context.SheetItem.RowType), column.ColumnType)]}")">
                                        @SheetNameService.GetColumnDataFromItem(column.ColumnType, context.SheetItem)
                                    </div>
                                </div>
                            </td>
                        }
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>
    
}

@code {
    [Parameter, EditorRequired] public SheetSection? Section { get; set; }
    [Parameter] public bool DoItemsStartAsExpanded { get; set; } = false;
    [Parameter, EditorRequired] public Estimation? Estimation { get; set; }
    [Parameter, EditorRequired] public View? View { get; set; }

    Dictionary<SheetCellKey, string> CellStyles = new();
    SheetItemContainer? NetSheetContainer;
    string CellValueClass = "cell-value";
    bool _firstRender = true;

    protected override void OnAfterRender(bool firstRender)
    {
        _firstRender = firstRender;
    }
    protected override void OnParametersSet()
    {
        if(Estimation?.NetSheet is not null && _firstRender)
        {
            NetSheetContainer = new SheetItemContainer(Estimation.NetSheet, DoItemsStartAsExpanded);
            NetSheetContainer.IsExpanded = true;
            var test = NetSheetContainer.AllExpandedInOrder.ToList();
        }
    }
    void SetExpand(SheetItemContainer container, bool isExpanded)
    {
        container.IsExpanded = isExpanded;
    }
    void CreateStyleMaps()
    {
        CellStyles.Clear();
        if (Section?.CellFormats is null) return;

        foreach (var cell in Section.CellFormats)
        {
            var key = new SheetCellKey(cell.RowType, cell.ColumnType);
            var style = ViewStyleService.CreateFormatStyles(cell);
            CellStyles.Add(key, style);
        }
    }
    SheetRowType RowTypeFromInt(int? rowType) => rowType switch
    {
        (int)AppPlatform.Core.Enums.BidconAccess.RowType.Group => SheetRowType.Group,
        (int)AppPlatform.Core.Enums.BidconAccess.RowType.Part => SheetRowType.Part,
        null => SheetRowType.Header,
        _ => SheetRowType.Post
    };
}