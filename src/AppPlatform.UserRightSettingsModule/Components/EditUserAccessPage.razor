@page "/Settings/UserAccess/Edit/{UserId}"

@using AppPlatform.Core.Enteties.Authorization
@using AppPlatform.Shared.Abstractions
@using AppPlatform.Shared.Services
@layout SettingsLayout
@inject IStringLocalizer<EditUserAccessPage> Localizer

<SettingsPageBase>

    <SettingsSection Title="@Localizer["Användare"]">
        <UserAvatar User="User"/>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Rättigheter"]" LoadDataAsync="LoadDataAsync">
        <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>
        @foreach (var claimInfo in AccessClaimInfoContainer.AccessClaimInfos)
        {
            <MudCheckBox T="bool" Value="@Access.Any(x => x.AccessClaimValue == claimInfo.Value)" Label="@claimInfo.Description" 
                         ValueChanged="value => UserAccessCheckBoxClick(claimInfo.Value, value)"/>
        }
    </SettingsSection>
</SettingsPageBase>

@inject IAccessService AccessService
@inject IAccessClaimInfoContainer AccessClaimInfoContainer
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess

@code{
    [Parameter] public string? UserId { get; set; }
    UserWithPhoto? User { get; set; }
    List<UserAccess> Access { get; set; } = new();
    bool IsLoading { get; set; } = false;

    async Task LoadDataAsync()
    {
        SetIsLoading(true);
        Access.Clear();
        if (UserId is not null)
        {
            Access.AddRange(await AccessService.GetUserAccessClaimValuesAsync(UserId));
            User = await MicrosoftGraphUserAccess.GetUserWithPhotoAsync(UserId);
        }
        SetIsLoading(false);
    }
    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    async Task UserAccessCheckBoxClick(string accessClaimValue, bool isChecked)
    {
        if (isChecked)
        {
            await CreateUserAccess(accessClaimValue);
        }
        else
        {
            await DeleteUserAccess(accessClaimValue);
        }
    }
    async Task CreateUserAccess(string accessClaimValue)
    {
        if (User?.User.Id is not null)
        {
            var userAccess = new UserAccess
            {
                    UserId = User.User.Id,
                AccessClaimValue = accessClaimValue
            };
            await AccessService.CreateUserAccessAsync(userAccess);
            Access.Add(userAccess);
        }
    }
    async Task DeleteUserAccess(string accessClaimValue)
    {
        var userAccess = Access.FirstOrDefault(x => x.AccessClaimValue == accessClaimValue);
        if (userAccess is not null)
        {
            await AccessService.DeleteUserAccessAsync(userAccess);
            Access.Remove(userAccess);
        }
    }
}