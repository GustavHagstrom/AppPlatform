@page "/Settings/UserAccess/Edit/"
@using AppPlatform.Core.Enteties.Authorization
@using AppPlatform.Shared.Abstractions
@using AppPlatform.Shared.Services
@layout SettingsLayout
@inject IStringLocalizer<EditUserAccessPage> Localizer
<SettingsPageBase>
    @if (User is not null)
    {
        <div class="d-flex pb-6" style="align-items: center; ">
            <MudAvatar Class="mud-fab">
                @if (User.PhotoBase64 != null)
                {
                    <MudImage Src="@($"data:image/png;base64, {User.PhotoBase64}")" Alt="User photo" />
                }
                else
                {
                    <div class="pa-0">
                        @User.User.DisplayName?.First()
                    </div>
                }
            </MudAvatar>
            <MudText Class="pl-2" Typo="Typo.subtitle2">@User.User.DisplayName</MudText>
            </div>
    }
    <SettingsSection Title="@Localizer["Rättigheter"]" LoadDataAsync="LoadDataAsync">

        @foreach (var claimInfo in AccessClaimInfoContainer.AccessClaimInfos)
        {
            <MudCheckBox T="bool" Value="@Access.Any(x => x.AccessClaimValue == claimInfo.Value)" Label="@claimInfo.Description" 
                         ValueChanged="value => UserAccessCheckBoxClick(claimInfo.Value, value)"/>
        }
    </SettingsSection>

</SettingsPageBase>



@inject IAccessService AccessService
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess
@inject IAccessClaimInfoContainer AccessClaimInfoContainer
@code{
    [SupplyParameterFromQuery] public string? Id { get; set; }
    UserWithPhoto? User { get; set; }
    List<UserAccess> Access { get; set; } = new();


    async Task LoadDataAsync()
    {
        await Task.Delay(1000);
        if (Id != null)
        {
            User = await MicrosoftGraphUserAccess.GetUserWithPhotoAsync(Id);
            Access.AddRange(await AccessService.GetUserAccessClaimValuesAsync(Id));
        }
    }
    async Task UserAccessCheckBoxClick(string accessClaimValue, bool isChecked)
    {
        if (isChecked)
        {
            await CreateUserAccess(accessClaimValue);
        }
        else
        {
            await DeleteUserAccess(accessClaimValue);
        }
    }
    async Task CreateUserAccess(string accessClaimValue)
    {
        if (Id != null)
        {
            var userAccess = new UserAccess
            {
                UserId = Id,
                AccessClaimValue = accessClaimValue
            };
            await AccessService.CreateUserAccessAsync(userAccess);
            Access.Add(userAccess);
        }
    }
    async Task DeleteUserAccess(string accessClaimValue)
    {
        var userAccess = Access.FirstOrDefault(x => x.AccessClaimValue == accessClaimValue);
        if (userAccess is not null)
        {
            await AccessService.DeleteUserAccessAsync(userAccess);
            Access.Remove(userAccess);
        }
    }
}