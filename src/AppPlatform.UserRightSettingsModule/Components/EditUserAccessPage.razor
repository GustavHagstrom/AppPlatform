@page "/Settings/rights/UserEdit/{UserId}"
@layout SettingsLayout
@inject IStringLocalizer<EditUserAccessPage> Localizer

<SettingsPageBase>

    <SettingsSection Title="@Localizer["Användare"]">
        <UserAvatar User="User"/>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Roller"]">
        <RolePicker AllRoles="AllRoles" PickedRoleIds="PickedRoleIds" PickChanged="RolesChanged">
            <ExtraTdContent>
                <div style="display: flex; justify-content: flex-end;">
                    <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" OnClick="() => EditRoleAccess(context)" Size="Size.Small" />
                </div>
            </ExtraTdContent>
        </RolePicker>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Rättigheter"]" LoadDataAsync="LoadUserDataAsync">
        <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>
        <AccessClaimValuePicker AccessClaimValues="Access.Select(x => x.AccessClaimValue)" PickChanged="UserAccessCheckBoxClick" />
    </SettingsSection>
</SettingsPageBase>

@inject IAccessStore AccessStore
@inject IRoleStore RoleStore
@inject IAccessClaimInfoContainer AccessClaimInfoContainer
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@code{
    [Parameter] public string? UserId { get; set; }
    UserWithPhoto? User { get; set; }
    List<UserAccess> Access { get; set; } = new();
    List<Role> AllRoles { get; set; } = new();
    List<string> PickedRoleIds { get; set; } = new();

    bool IsLoading { get; set; } = false;

    async Task LoadUserDataAsync()
    {
        SetIsLoading(true);
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Access.Clear();
        if (UserId is not null)
        {
            Access.AddRange(await AccessStore.GetUserAccessClaimValuesAsync(UserId));
            User = await MicrosoftGraphUserAccess.GetUserWithPhotoAsync(UserId);
            var tenantId = state.User.GetTenantId();
            if (tenantId is not null)
            {
                AllRoles = await RoleStore.GetRolesAsync(tenantId);
                PickedRoleIds = (await RoleStore.GetUserRolesForUserAsync(UserId)).Select(x => x.Id).ToList();
            }
        }
        SetIsLoading(false);
    }
    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    async Task UserAccessCheckBoxClick(PickChangedRecord<IAccessClaimInfo> pickedRecord)
    {
        if (pickedRecord.IsPicked)
        {
            await CreateUserAccess(pickedRecord.Data.Value);
        }
        else
        {
            await DeleteUserAccess(pickedRecord.Data.Value);
        }
    }

    async Task CreateUserAccess(string accessClaimValue)
    {
        if (User?.User.Id is not null)
        {
            var userAccess = new UserAccess
            {
                    UserId = User.User.Id,
                AccessClaimValue = accessClaimValue
            };
            await AccessStore.CreateUserAccessAsync(userAccess);
            Access.Add(userAccess);
        }
    }
    async Task DeleteUserAccess(string accessClaimValue)
    {
        var userAccess = Access.FirstOrDefault(x => x.AccessClaimValue == accessClaimValue);
        if (userAccess is not null)
        {
            await AccessStore.DeleteUserAccessAsync(userAccess);
            Access.Remove(userAccess);
        }
    }
    async Task RolesChanged(PickChangedRecord<Role> pickedRecord)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = state.User.GetUserId();
        if (userId is null)
        {
            return;
        }
        if (state is null) return;
        if (pickedRecord.IsPicked)
        {
            await RoleStore.CreateUserRoleAsync(userId, pickedRecord.Data);
            AllRoles.Add(pickedRecord.Data);
        }
        else
        {
            await RoleStore.DeleteUserRoleAsync(userId, pickedRecord.Data);
            AllRoles.Remove(AllRoles.First(x => x.Id == pickedRecord.Data.Id));
        }
    }
    void EditRoleAccess(Role role)
    {
        NavigationManager.NavigateTo($"{Constants.ModuleRoutes.RoleAccessEdit}/{role.Id}");
    }
}