@page "/Settings/Roles/Edit/{RoleId}"
@using System.Security.Claims
@using AppPlatform.Shared.Components.Rights
@using AppPlatform.UserRightSettingsModule.Components.User
@using Microsoft.AspNetCore.Components.Authorization
@inject IStringLocalizer<EditRoleAccessPage> Localizer
@layout SettingsLayout


<SettingsPageBase IsLoading="IsLoading">
    <SettingsSection>
        <div class="d-flex">
            <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Sharp.Delete" OnClick="Delete" />
        </div>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Roll"]">
        <MudTextField T="string" Variant="Variant.Outlined" Value="Role?.Name" ValueChanged="SetName" Label="@Localizer["Namn"]"/>
        <MudTextField T="string" Variant="Variant.Outlined" Value="Role?.Description" ValueChanged="SetDescription" 
                      Label="@Localizer["Beskrivning"]" Lines="3"/>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Rättigheter"]" LoadDataAsync="LoadRoleDataAsync">
        <AccessClaimValuePicker AccessClaimValues="Access.Select(x => x.AccessClaimValue)" CheckChanged="RoleAccessCheckBoxClick"/>
    </SettingsSection>
    
    <SettingsSection Title="@Localizer["Användare"]">
        <UserPicker AllUsers="AllUsers" PickedUserIds="PickedUserIds" PickChanged="OnUserPickChanged">
            <ExtraTdContent>
                <div style="display: flex; justify-content: flex-end;">
                    <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" OnClick="() => EditUser(context)" Size="Size.Small" />
                </div>
            </ExtraTdContent>
        </UserPicker>
    </SettingsSection>

</SettingsPageBase>


@inject IAccessService AccessService
@inject IRoleService RoleService
@inject IAccessClaimInfoContainer AccessClaimInfoContainer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@code{
    [Parameter] public string? RoleId { get; set; }
    Role? Role { get; set; }
    List<RoleAccess> Access { get; set; } = new();
    bool IsLoading { get; set; } = false;
    ClaimsPrincipal? UserClaims { get; set; }
    List<UserWithPhoto> AllUsers { get; set; } = new();
    List<string> PickedUserIds { get; set; } = new();

    async Task OnUserPickChanged(PickChangedRecord<UserWithPhoto> record)
    {
        var userRole = new UserRole
        {
            RoleId = RoleId!,
            UserId = record.Data.User.Id!
        };
        if (record.IsPicked)
        {
            await RoleService.CreateUserRole(userRole);
            PickedUserIds.Add(record.Data.User.Id!);
        }
        else
        {
            await RoleService.DeleteUserRole(userRole);
            PickedUserIds.Remove(record.Data.User.Id!);
        }
    }
    void EditUser(UserWithPhoto user)
    {
        NavigationManager.NavigateTo($"{Constants.ModuleRoutes.UserAccessEdit}/{user.User.Id}");
    }
    async Task Delete()
    {
        if (Role is not null)
        {
            var parameters = new DialogParameters<YesNoDialog> { 
                { x => x.Info, Localizer["Är du säker på att du vill ta bort rollen?"] },
                { x => x.YesButtonColor, Color.Error }
            };
            var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Bekräfta borttagning"], parameters);
            var result = await dialog.Result;
            if (result?.Data is true)
            {
                await RoleService.DeleteRoleAsync(Role);
                NavigationManager.NavigateTo(Constants.ModuleRoutes.RoleListPage);
            }
        }
    }
    async Task SetName(string value)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (Role is not null && state.User is not null)
        {
            Role.Name = value;
            await RoleService.UpsertRoleAsync(state.User, Role);
        }
    }
    async Task SetDescription(string value)
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (Role is not null && state.User is not null)
        {
            Role.Description = value;
            await RoleService.UpsertRoleAsync(state.User, Role);
        }
    }
    async Task LoadRoleDataAsync()
    {
        SetIsLoading(true);
        if (RoleId is not null)
        {
            var access = await AccessService.GetRoleAccessClaimValuesAsync(RoleId);
            Access = access.ToList();
            Role = await RoleService.GetRoleAsync(RoleId);
            var users = await MicrosoftGraphUserAccess.GetUsersWithPhotoAsync();
            var userRoles = await RoleService.GetUserRolesForRoleAsync(RoleId);
            AllUsers = users.ToList();
            PickedUserIds = users.Where(u => userRoles.Any(ur => ur.UserId == u.User.Id)).Select(x => x.User.Id!).ToList();
        }
        SetIsLoading(false);
    }
    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    async Task RoleAccessCheckBoxClick(CheckChangedRecord<IAccessClaimInfo> checkedRecord)
    {
        if (checkedRecord.IsChecked)
        {
            await CreateRoleAccess(checkedRecord.Data.Value);
        }
        else
        {
            await DeleteRoleAccess(checkedRecord.Data.Value);
        }
    }
    async Task CreateRoleAccess(string accessClaimValue)
    {
        if (Role?.Id is not null)
        {
            var roleAccess = new RoleAccess
                {
                    RoleId = Role.Id,
                    AccessClaimValue = accessClaimValue
                };
            await AccessService.CreateRoleAccessAsync(roleAccess);
            Access.Add(roleAccess);
        }
    }
    async Task DeleteRoleAccess(string accessClaimValue)
    {
        var roleAccess = Access.FirstOrDefault(x => x.AccessClaimValue == accessClaimValue);
        if (roleAccess is not null)
        {
            await AccessService.DeleteRoleAccessAsync(roleAccess);
            Access.Remove(roleAccess);
        }
    }
}