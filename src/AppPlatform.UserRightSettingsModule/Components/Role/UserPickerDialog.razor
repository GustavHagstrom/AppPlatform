@using Microsoft.AspNetCore.Components.Authorization
<MudDialog>
    <DialogActions>
        <MudButton OnClick="CloseDialog">Stäng</MudButton>
    </DialogActions>
    <DialogContent>
        <MudTextField @bind-Value="SearchText" Label="Search" Immediate="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
        <MudSimpleTable Class="mt-2">
            <tbody>
                @foreach (var user in FilteredUsersIterator)
                {
                    <tr>
                        <td class="pa-2">
                            <MudCheckBox Dense="true" T="bool" Value="UserRoles.Any(x => x.UserId == user.User.Id)" ValueChanged="x => UserRoleChangedAsync(user, x)" />
                        </td>
                        <td class="pa-2">
                            <UserAvatar Size="Size.Small" User="@user"/>
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </DialogContent>
</MudDialog>

@inject IRoleService RoleService
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess

@code{
    [CascadingParameter] MudDialogInstance? Dialog { get; set; }
    [Parameter] public string? RoleId { get; set; }
    string SearchText { get; set; } = string.Empty;

    List<UserWithPhoto> Users { get; set; } = new();
    IEnumerable<UserWithPhoto> FilteredUsersIterator => Users
            .Where(u => SearchText.Split(" ").All(st => u.User.DisplayName!.ToLower().Contains(st.ToLower())))
            .OrderBy(u => u.User.DisplayName);
    List<UserRole> UserRoles { get; set; } = new();


    async Task UserRoleChangedAsync(UserWithPhoto user, bool value)
    {
        var userRole = new UserRole
        {
            RoleId = RoleId!,
            UserId = user.User.Id!
        };
        if (value)
        {
            await RoleService.CreateUserRole(userRole);
            UserRoles.Add(userRole);
        }
        else
        {
            await RoleService.DeleteUserRole(userRole);
            UserRoles.Remove(UserRoles.First(x => x.UserId == user.User.Id));
        }
        // StateHasChanged();
    }
    protected override Task OnInitializedAsync()
    {
        return LoadDataAsync();
    }
    async Task LoadDataAsync()
    {
        if (RoleId is null) return;
        UserRoles = await RoleService.GetUserRolesForRoleAsync(RoleId);
        Users = (await MicrosoftGraphUserAccess.GetUsersWithPhotoAsync()).ToList();
        // StateHasChanged();
    }
    void CloseDialog()
    {
        Dialog?.Close(DialogResult.Cancel());
    }
    Task SaveDialog()
    {
        Dialog?.Close();
        return Task.CompletedTask;
    }
}