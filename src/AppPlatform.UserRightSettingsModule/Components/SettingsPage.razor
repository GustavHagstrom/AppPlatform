@page "/Settings/rights"

@layout SettingsLayout
@inject IStringLocalizer<SettingsPage> Localizer

<SettingsPageBase>
 
@*     <SettingsSection>
        <div class="d-flex">
            <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Sharp.Add" OnClick="CreateNewRole" />
        </div>
    </SettingsSection> *@
    
    <SettingsSection Title="@Localizer["Roller"]" LoadDataAsync="LoadRoleDataAsync">
        <div class="d-flex">
            <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Sharp.Add" OnClick="CreateNewRole" />
        </div>
        
        <RoleList Roles="Roles"/>
    </SettingsSection>

    <SettingsSection Title="@Localizer["Användare"]" LoadDataAsync="LoadUserDataAsync">
        <AppPlatform.Shared.Components.Rights.UserPicker AllUsers="Users" EnablePicking="false">
            <ExtraTdContent>
                <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" OnClick="() => EditUserAccess(context)" Size="Size.Small" />
            </ExtraTdContent>
        </AppPlatform.Shared.Components.Rights.UserPicker>
    </SettingsSection>

</SettingsPageBase>

@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess
@inject NavigationManager NavigationManager

@code{
    List<AppPlatform.Core.Enteties.Authorization.Role> Roles { get; set; } = new();
    List<UserWithPhoto> Users { get; set; } = new();

    async Task LoadUserDataAsync()
    {
        var users = await MicrosoftGraphUserAccess.GetUsersWithPhotoAsync();
        Users = users.ToList();
        StateHasChanged();
    }
    async Task LoadRoleDataAsync()
    {
        Roles.Clear();
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Roles.AddRange(await RoleService.GetRolesAsync(state.User));
        StateHasChanged();
    }
    void EditUserAccess(UserWithPhoto user)
    {
        NavigationManager.NavigateTo($"{Constants.ModuleRoutes.UserAccessEdit}/{user.User.Id}");
    }
    async Task CreateNewRole()
    {
        var parameters = new DialogParameters<StringInputDialog> { { x => x.InputLabel, Localizer["Namn"] } };
        var options = new DialogOptions { NoHeader = false };
        var dialog = await DialogService.ShowAsync<StringInputDialog>(Localizer["Ny roll"], parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is string input and not null)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var role = new Role { Name = input };
            await RoleService.UpsertRoleAsync(state.User, role);
            NavigationManager.NavigateTo($"{Constants.ModuleRoutes.RoleAccessEdit}/{role.Id}");
        }
    }
}