@using Microsoft.AspNetCore.Components.Authorization
@inject IStringLocalizer<RolePicker> Localizer
<MudSimpleTable Dense="true" Bordered="false">
    <tbody>
        @foreach (var role in AllRoles)
        {
            <tr>
                <td class="pl-2">
                    <MudCheckBox T="bool"
                                 Dense="true"
                                 Value="@CheckedRoles.Any(x => x.Id == role.Id)"
                             ValueChanged="x => TriggerCheckChanged(role, x)" />
                </td>
                <td>
                    @role.Name
                </td>
                <td>
                    @role.Description
                </td>
                <td>
                    <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" OnClick="() => EditRoleAccess(role)" Size="Size.Small" />
                </td>
            </tr>

        }
    </tbody>
</MudSimpleTable>

@inject IRoleService RoleService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@code {
    [Parameter] public List<Role> CheckedRoles { get; set; } = new List<Role>();
    [Parameter] public EventCallback<CheckChangedRecord<Role>> CheckChanged { get; set; }

    List<Role> AllRoles { get; set; } = new List<Role>();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        AllRoles = await RoleService.GetRolesAsync(state.User);
    }
    async Task TriggerCheckChanged(Role role, bool value)
    {
        await CheckChanged.InvokeAsync(new(role, value));
        StateHasChanged();
    }
    void EditRoleAccess(Role role)
    {
        NavigationManager.NavigateTo($"{Constants.ModuleRoutes.RoleAccessEdit}/{role.Id}");
    }
}