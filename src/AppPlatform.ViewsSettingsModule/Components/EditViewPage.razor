@page "/Settings/ViewSettings/Edit/{ViewId}"
@inject IStringLocalizer<EditViewPage> Localizer

@if(View is not null)
{
    <div class="main-container relative">

        <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>

        <div class="settings-container">

            <div class="settings-headers">
                <div class="@TabHeaderClass(TabType.Common)" @onclick="() => ActiveTab = TabType.Common">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Start"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Layout)" @onclick="() => ActiveTab = TabType.Layout">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Layout"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Tags)" @onclick="() => ActiveTab = TabType.Tags">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Taggar"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Rights)" @onclick="() => ActiveTab = TabType.Rights">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Rättigheter"]</MudText>
                </div>
            </div>

            <div class="settings-values">
                <CascadingValue Value="this">
                    @switch (ActiveTab)
                    {
                        case TabType.Common:
                            <CommonTab View="View"/>
                            break;
                        case TabType.Layout:
                            <LayoutTab View="View" />
                            break;
                        case TabType.Tags:
                            <TagsTab View="View" />
                            break;
                        case TabType.Rights:
                            <RightsTab View="View" />
                            break;
                    }
                </CascadingValue>

                
            </div>
            

        </div>
        <div class="preview-container">
            <ViewPresenter View="View" Estimation="SampleEstimation" DoTableItemsStartAsExpanded="true" />
        </div>
    </div>
}
   

@inject IViewStore _viewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Helper Helper
@inject IBrowserViewportService BrowserViewportService

@code{
    [Parameter] public string? ViewId { get; set; }

    enum TabType
    {
        Common,
        Tags,
        Rights,
        Layout,

    }

    string TabHeaderBaseClass => "App-Nav-Link mud-ripple d-flex align-center px-4 py-2 cursor-pointer flex-shrink-0";
    string TabHeaderClass(TabType tabType) => ActiveTab == tabType ? $"{TabHeaderBaseClass} App-Nav-Link-Active" : TabHeaderBaseClass;
    string TabPanelButtonColorStyle(TabType tab) => ActiveTab == tab ? "background-color: var(--mud-palette-primary-hover); color: var(--mud-palette-primary);" : "";

    bool IsLoading { get; set; } = false;
    View? View { get; set; }
    TabType ActiveTab = TabType.Common;
    Estimation? SampleEstimation;



    protected override Task OnInitializedAsync()
    {
        SampleEstimation = Helper.CreateSamepleEstimation();
        return LoadDataAsync();
    }
 
    async Task LoadDataAsync()
    {
        if (ViewId is not null)
        {
            SetLoading(true);
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var tenantId = state.User.GetTenantId();
            if (tenantId is not null)
            {
                View = await _viewService.GetAsync(tenantId, ViewId);
            }
            SetLoading(false);
        }
    }

    public void SetLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }
    
    
    
}