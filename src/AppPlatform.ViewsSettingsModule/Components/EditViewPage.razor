@page "/Settings/ViewSettings/Edit/{ViewId}"
@using AppPlatform.Core.Enteties.EstimationEnteties
@using AppPlatform.Core.Enums.BidconAccess
@using AppPlatform.Shared.Components.Dialogs
@using AppPlatform.ViewSettingsModule.Services
@using Microsoft.AspNetCore.Components.Authorization
@using AppPlatform.Shared.Components.View
@layout SettingsLayout
@inject IStringLocalizer<EditViewPage> Localizer

<div class="relative" style="height: 100%">
    <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>

    <ViewPresenter EditMode="true" View="View" Estimation="SampleEstimation()" >
        <ExtraToolbarActions>
            <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Sharp.Delete" OnClick="Delete" />
            <MudIconButton Variant="Variant.Outlined" Color="Color.Success" Icon="@Icons.Material.Sharp.Save" />
        </ExtraToolbarActions>
        <SpaceAboveSheet>
            <MudTextField T="string" Variant="Variant.Outlined" Value="View?.Name" ValueChanged="SetName" Label="@Localizer["Namn"]" />
        </SpaceAboveSheet>
    </ViewPresenter>

</div>

@inject IViewService _viewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@code{
    [Parameter] public string? ViewId { get; set; }

    bool IsLoading { get; set; } = false;
    View? View { get; set; }

    protected override Task OnInitializedAsync()
    {
        return LoadDataAsync();
    }

    async Task LoadDataAsync()
    {
        if (ViewId is not null)
        {
            SetLoading(true);
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            View = await _viewService.GetAsync(state.User, ViewId);
            SetLoading(false);
        }
    }
    async Task SetName(string name)
    {
        if (View is not null)
        {
            View.Name = name;
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await _viewService.UpsertAsync(state.User, View);
        }
    }
    void SetLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    async Task Delete()
    {
        if (View is not null)
        {
            var parameters = new DialogParameters<YesNoDialog> {
                { x => x.Info, Localizer["Är du säker på att du vill ta bort vyn?"] },
                { x => x.YesButtonColor, Color.Error }
            };
            var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Bekräfta borttagning"], parameters);
            var result = await dialog.Result;
            if (result?.Data is true)
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                await _viewService.DeleteAsync(state.User, View);
                NavigationManager.NavigateTo(Constants.Routes.ViewListPage);
            }
        }
    }
    Estimation SampleEstimation()
    {
        return new Estimation
            {
                BidconId = "123",
                ConfirmationOfficer = "Test",
                Customer = "Test",
                Description = "Test",
                HandlingOfficer = "Test",
                Name = "Test",
                Place = "Test",
                NetSheet = new SheetItem
                {
                    Description = "Root",
                    Type = (int)RowType.Group,
                    Children = new List<SheetItem>
                    {
                        new SheetItem
                        {
                            Description = "Group",
                            Type = (int)RowType.Group,
                            Children = new List<SheetItem>
                            {
                                new SheetItem
                                {
                                    Description = "Part",
                                    Type = (int)RowType.Part,
                                    Children = new List<SheetItem>
                                    {
                                        new SheetItem
                                        {
                                            Description = "Post",
                                            Type = (int)RowType.LayeredItem,

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            };
    }
}