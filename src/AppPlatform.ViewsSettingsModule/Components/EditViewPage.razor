@page "/Settings/ViewSettings/Edit/{ViewId}"
@using Microsoft.AspNetCore.Components.Authorization
@inject IStringLocalizer<EditViewPage> Localizer
@implements IAsyncDisposable

@if(View is not null)
{
    
    <div class="main-container">
        
        <div class="settings-container">

            <div class="settings-headers">
                <div class="@TabHeaderClass(TabType.Common)" @onclick="() => ActiveTab = TabType.Common">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Start"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Tags)" @onclick="() => ActiveTab = TabType.Tags">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Taggar"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Rights)" @onclick="() => ActiveTab = TabType.Rights">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Rättigheter"]</MudText>
                </div>
            </div>

            <div class="settings-values">
                <SettingsSection Title="@Localizer["Alllmänt"]">
                    <div class="d-flex gap-2">
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Sharp.Save" Style="width: 150px;">@Localizer["Spara"]</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Sharp.Delete" Style="width: 150px;">@Localizer["Ta bort"]</MudButton>
                    </div>

                    <MudTextField T="string" Variant="Variant.Outlined" Value="View?.Name" Label="@Localizer["Namn"]" Margin="Margin.Dense" />
                    <MudTextField T="string" Variant="Variant.Outlined" Value="View?.FontFamily" Label="@Localizer["Teckensnitt"]" Margin="Margin.Dense" />
                </SettingsSection>

                <SettingsSection Title="@Localizer["Sektioner"]">
                    <AddDeleteList T="ISection" Items="View!.SectionsInOrder().ToList()" GetItemNameFunc="x => x.Name" ListVariant="ListVariant.DropDown">
                        <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
                        <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />

                    </AddDeleteList>
                    <MudTextField T="string" Variant="Variant.Outlined" Label="@Localizer["Namn"]" Margin="Margin.Dense" />
                </SettingsSection>
            </div>
            

        </div>
        <div class="preview-container">
            <ViewPresenter EditMode="true" View="View" Estimation="SampleEstimation" DoTableItemsStartAsExpanded="true" />
        </div>
    </div>
}
    


@* <div class="relative" style="height: 100%">

    <PageSetupWithNavigation WhenToHideMobileView="Breakpoint.None" WhenToHideDesktopView="Breakpoint.Always">
        <NavigationContent>

            <div class="@($"d-flex {(IsSmAndDown ? "flex-row" : "flex-row")}")" style="min-width: 150px; max-width: 100%; overflow-x: auto; overflow-y: hidden;">

                <div class="@TabHeaderClass(TabType.Common)" @onclick="() => ActiveTab = TabType.Common">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Allmänt"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Format)" @onclick="() => ActiveTab = TabType.Format">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Format"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Tags)" @onclick="() => ActiveTab = TabType.Tags">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Taggar"]</MudText>
                </div>
                <div class="@TabHeaderClass(TabType.Rights)" @onclick="() => ActiveTab = TabType.Rights">
                    <MudText Inline="true" Class="pl-0" Style="font-weight: 500;">@Localizer["Rättigheter"]</MudText>
                </div>

            </div>

        </NavigationContent>

        <ChildContent>
            <div class="relative" style="height: 100%">

                <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                </MudOverlay>

                

                <CascadingValue Value="this">
                    @switch (ActiveTab)
                    {
                        case TabType.Format:
                            <ViewPresenter EditMode="true" View="View" Estimation="SampleEstimation" DoTableItemsStartAsExpanded="true"/>
                            break;
                        case TabType.Common:
                            <CommonTab Estimation="SampleEstimation" View="View"/>
                            break;
                        case TabType.Tags:
                            <TagsTab Estimation="SampleEstimation" View="View"/>
                            break;
                        case TabType.Rights:
                            <RightsTab Estimation="SampleEstimation" View="View"/>
                            break;
                    }
                </CascadingValue>
                

            </div>
        </ChildContent>

    </PageSetupWithNavigation>

</div> *@

@inject IViewService _viewService
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject IBrowserViewportService BrowserViewportService

@code{
    [Parameter] public string? ViewId { get; set; }

    enum TabType
    {
        Format,
        Common,
        Tags,
        Rights,

    }

    string TabHeaderBaseClass => "App-Nav-Link mud-ripple d-flex align-center px-4 py-2 cursor-pointer flex-shrink-0";
    string TabHeaderClass(TabType tabType) => ActiveTab == tabType ? $"{TabHeaderBaseClass} App-Nav-Link-Active" : TabHeaderBaseClass;

    string TabPanelButtonColorStyle(TabType tab) => ActiveTab == tab ? "background-color: var(--mud-palette-primary-hover); color: var(--mud-palette-primary);" : "";

    bool IsLoading { get; set; } = false;
    View? View { get; set; }
    TabType ActiveTab = TabType.Common;

    Guid ObserverId = Guid.NewGuid();
    Breakpoint CurrentBreakPoint;
    Breakpoint LastBreakPoint;
    bool IsSmAndDown => CurrentBreakPoint == Breakpoint.Xs || CurrentBreakPoint == Breakpoint.Sm;// || CurrentBreakPoint == Breakpoint.Md;


    protected override Task OnInitializedAsync()
    {
        return LoadDataAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(ObserverId, (args) =>
            {
                LastBreakPoint = CurrentBreakPoint;
                CurrentBreakPoint = args.Breakpoint;
                if (LastBreakPoint != CurrentBreakPoint)
                {
                    StateHasChanged();
                }
            });
        }

        await base.OnAfterRenderAsync(firstRender);
    }
    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(ObserverId);

    async Task LoadDataAsync()
    {
        if (ViewId is not null)
        {
            SetLoading(true);
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            View = await _viewService.GetAsync(state.User, ViewId);
            SetLoading(false);
        }
    }

    public void SetLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    public void TriggerStateHasChanged()
    {
        StateHasChanged();
    }
    Estimation SampleEstimation = SampleEstimationFactory.CreateSamepleEstimation();
    
    
}





