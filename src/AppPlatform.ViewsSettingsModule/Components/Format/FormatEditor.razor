@using MudBlazor.Utilities
@using ViewScope = AppPlatform.Core.Enums.ViewTemplate
@inject IStringLocalizer<FormatEditor> Localizer


@if(Format is not null)
{
    <div>
        <Row>
            <Column>
                <Row>
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatBold" Style="@ToggleStyle(Format?.IsBold, true)" OnClick="ToggleIsBold" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatItalic" Style="@ToggleStyle(Format?.IsItalic, true)" OnClick="ToggleIsItalic" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatUnderlined" Style="@ToggleStyle(Format?.IsUnderline, true)" OnClick="ToggleIsUnderlined" />
                </Row>
                <Row>
                    <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                        <ActivatorContent>
                            <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.BorderBottom" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderBottom" Style="@ToggleStyle(Format?.HasBorderBottom, true)" OnClick="() => ToggleBorder(Border.Bottom)" />
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderTop" Style="@ToggleStyle(Format?.HasBorderTop, true)" OnClick="() => ToggleBorder(Border.Top)" />
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderLeft" Style="@ToggleStyle(Format?.HasBorderLeft, true)" OnClick="() => ToggleBorder(Border.Left)" />
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderRight" Style="@ToggleStyle(Format?.HasBorderRight, true)" OnClick="() => ToggleBorder(Border.Right)" />
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderClear" OnClick="() => ToggleBorder(Border.None)" />
                            @*      <MudMenuItem Icon="@Icons.Material.Sharp.BorderAll" /> *@
                            <MudMenuItem Icon="@Icons.Material.Sharp.BorderOuter" Style="@ToggleStyle(HasOuterBorder, true)" OnClick="() => ToggleBorder(Border.Outer)" />
                        </ChildContent>
                    </MudMenu>
                    <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                        <ActivatorContent>
                            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Sharp.FormatColorFill" Class="border border-solid" Style="@($"background: linear-gradient(to bottom, var(--mud-palette-background), {BackgroundColor}); padding: 5px;")" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudColorPicker DisableToolbar="true" DisableColorField="false" DisableModeSwitch="true" DisablePreview="false" DisableAlpha="true" PickerVariant="PickerVariant.Static" Value="BackgroundColor" ValueChanged="SetBackgroundColor" />
                        </ChildContent>
                    </MudMenu>
                    <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                        <ActivatorContent>
                            <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Sharp.FormatColorText" Class="border border-solid" Style="@($"background: linear-gradient(to bottom, var(--mud-palette-background), {TextColor}); padding: 5px;")" />
                        </ActivatorContent>
                        <ChildContent>
                            <MudColorPicker DisableToolbar="true" DisableColorField="false" DisableModeSwitch="true" DisablePreview="false" DisableAlpha="true" PickerVariant="PickerVariant.Static" Value="TextColor" ValueChanged="SetTextColor" />
                        </ChildContent>
                    </MudMenu>
                </Row>
            </Column>
            <Column>
                <Row>
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignTop" Style="@ToggleStyle(Format?.VerticalAlign, ViewScope.Align.Start)" OnClick="@(() => ToggleVerticalAlign(ViewScope.Align.Start))" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignCenter" Style="@ToggleStyle(Format?.VerticalAlign, ViewScope.Align.Center)" OnClick="@(() => ToggleVerticalAlign(ViewScope.Align.Center))" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.VerticalAlignBottom" Style="@ToggleStyle(Format?.VerticalAlign, ViewScope.Align.End)" OnClick="@(() => ToggleVerticalAlign(ViewScope.Align.End))" />
                </Row>
                <Row>
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignLeft" Style="@ToggleStyle(Format?.HorizontalAlign, ViewScope.Align.Start)" OnClick="@(() => ToggleHorizontalAlign(ViewScope.Align.Start))" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignCenter" Style="@ToggleStyle(Format?.HorizontalAlign, ViewScope.Align.Center)" OnClick="@(() => ToggleHorizontalAlign(ViewScope.Align.Center))" />
                    <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.FormatAlignRight" Style="@ToggleStyle(Format?.HorizontalAlign, ViewScope.Align.End)" OnClick="@(() => ToggleHorizontalAlign(ViewScope.Align.End))" />
                </Row>
            </Column>
            <Column>

                <Row>
                    <div style="width: 36px; height: 36px;" />
                </Row>
                <Row>
                    <MudTextField T="int" Margin="Margin.Dense" Label="@Localizer["Storlek"]" Variant="Variant.Outlined" Adornment="Adornment.None" AdornmentIcon="@Icons.Material.Sharp.FormatSize" ShrinkLabel="true" Style="width: 75px; ; height: 36px;" Class="nomarginpls" Value="Format.FontSize" ValueChanged="SetFontSize" />
                </Row>
            </Column>
        </Row>

    </div>
}


@code{
    [Parameter] public IFormat? Format { get; set; }
    [Parameter] public EventCallback<IFormat> FormatChanged { get; set; }
    [CascadingParameter] public EditViewPage? EditViewPage { get; set; }

    MudColor BackgroundColor = new("#FFFFFF");
    MudColor TextColor = new("#424242");
    string? ToggleStyle(object? value1, object? value2) => value1?.Equals(value2) == true ? "background-color: var(--mud-palette-primary-hover); color: var(--mud-palette-primary);" : null;

    bool HasOuterBorder => Format?.HasBorderTop == true && Format?.HasBorderBottom == true && Format?.HasBorderLeft == true && Format?.HasBorderRight == true;
    protected override void OnParametersSet()
    {
        if (Format?.BackgroundColor is not null)
        {
            BackgroundColor = Format.BackgroundColor;
        }
        if (Format?.TextColor is not null)
        {
            TextColor = Format.TextColor;
        }
    }

    void SetBackgroundColor(MudColor color)
    {
        BackgroundColor = color;
        if (Format is not null)
        {
            Format.BackgroundColor = color.Value;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void SetTextColor(MudColor color)
    {
        TextColor = color;
        if (Format is not null)
        {
            Format.TextColor = color.Value;
            EditViewPage?.TriggerStateHasChanged();
        }
    }

    enum Border
    {
        None,
        Bottom,
        Top,
        Left,
        Right,
        All,
        Outer
    }

    void SetFontSize(int size)
    {
        if (Format is not null)
        {
            Format.FontSize = size;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleIsBold()
    {
        if (Format is not null)
        {
            Format.IsBold = !Format.IsBold;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleIsItalic()
    {
        if (Format is not null)
        {
            Format.IsItalic = !Format.IsItalic;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleIsUnderlined()
    {
        if (Format is not null)
        {
            Format.IsUnderline = !Format.IsUnderline;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleHorizontalAlign(ViewScope.Align align)
    {
        if (Format is not null)
        {
            if (Format.HorizontalAlign == align)
            {
                Format.HorizontalAlign = null;
            }
            else
            {
                Format.HorizontalAlign = align;
            }
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleVerticalAlign(ViewScope.Align align)
    {
        if (Format is not null)
        {
            if (Format.VerticalAlign == align)
            {
                Format.VerticalAlign = null;
            }
            else
            {
                Format.VerticalAlign = align;
            }
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    void ToggleBorder(Border border)
    {
        if (Format is not null)
        {
            Action action = border switch
            {
                Border.None => () =>
                {
                    Format.HasBorderBottom = false;
                    Format.HasBorderTop = false;
                    Format.HasBorderLeft = false;
                    Format.HasBorderRight = false;
                },
                Border.Bottom => () =>
                {
                    Format.HasBorderBottom = !Format.HasBorderBottom;
                }
                ,
                Border.Top => () =>
                {
                    Format.HasBorderTop = !Format.HasBorderTop;
                },
                Border.Left => () =>
                {
                    Format.HasBorderLeft = !Format.HasBorderLeft;
                },
                Border.Right => () =>
                {
                    Format.HasBorderRight = !Format.HasBorderRight;
                },
                Border.All => () =>
                {
                    Format.HasBorderTop = !Format.HasBorderBottom;
                    Format.HasBorderLeft = !Format.HasBorderBottom;
                    Format.HasBorderRight = !Format.HasBorderBottom;
                    Format.HasBorderBottom = !Format.HasBorderBottom;
                },
                Border.Outer => () =>
                {
                    Format.HasBorderTop = !Format.HasBorderBottom;
                    Format.HasBorderLeft = !Format.HasBorderBottom;
                    Format.HasBorderRight = !Format.HasBorderBottom;
                    Format.HasBorderBottom = !Format.HasBorderBottom;

                },
                _ => () =>
                {
                    Format.HasBorderTop = !Format.HasBorderBottom;
                    Format.HasBorderLeft = !Format.HasBorderBottom;
                    Format.HasBorderRight = !Format.HasBorderBottom;
                    Format.HasBorderBottom = !Format.HasBorderBottom;
                },
            };
            action.Invoke();
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    
    
}