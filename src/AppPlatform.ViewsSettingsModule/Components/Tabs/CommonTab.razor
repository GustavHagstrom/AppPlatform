
@using Microsoft.AspNetCore.Components.Authorization

@inject IStringLocalizer<CommonTab> Localizer
@inject Helper Helper
@inject IViewService _viewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject NavigationManager NavigationManager



<SettingsSection Title="@Localizer["Alllmänt"]">
    <div class="d-flex gap-2">
        <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Sharp.Save" Style="width: 50%;" OnClick="Save">@Localizer["Spara"]</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Sharp.Delete" Style="width: 50%;" OnClick="Delete">@Localizer["Ta bort"]</MudButton>
    </div>

    <MudTextField T="string" Variant="Variant.Outlined" Value="View?.Name" ValueChanged="SetName" Label="@Localizer["Namn"]" Margin="Margin.Dense" />
    <MudTextField T="string" Variant="Variant.Outlined" Value="View?.FontFamily" ValueChanged="SetFontFamily" Label="@Localizer["Teckensnitt"]" Margin="Margin.Dense" />
</SettingsSection>


@code{
    [Parameter] public View? View { get; set; }
    [CascadingParameter] public EditViewPage? EditViewPage { get; set; }

    ISection? SelectedSection { get; set; }

    void SetName(string name)
    {
        if (View is not null)
        {
            View.Name = name;
            // EditViewPage?.TriggerStateHasChanged();
        }
    }
    void SetFontFamily(string fontFamily)
    {
        if (View is not null)
        {
            View.FontFamily = fontFamily;
            EditViewPage?.TriggerStateHasChanged();
        }
    }
    async Task Save()
    {
        if (View is not null)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await _viewService.UpsertAsync(state.User, View);
        }
    }
    async Task Delete()
    {
        if (View is not null)
        {
            var parameters = new DialogParameters<YesNoDialog> {
                { x => x.Info, Localizer["Är du säker på att du vill ta bort vyn?"] },
                { x => x.YesButtonColor, Color.Error }
            };
            var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Bekräfta borttagning"], parameters);
            var result = await dialog.Result;
            if (result?.Data is true)
            {
                var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                await _viewService.DeleteAsync(state.User, View);
                NavigationManager.NavigateTo(Constants.Routes.ViewListPage);
            }
        }
    }
}