@using AppPlatform.ViewSettingsModule.Components.Section
@using Microsoft.AspNetCore.Components.Authorization

@inject IStringLocalizer<CommonTab> Localizer
@inject Helper Helper
@inject IViewService _viewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject NavigationManager NavigationManager



<SettingsSection Title="@Localizer["Sektioner"]">
    <SelectList T="ISection" Items="View!.SectionsInOrder().ToList()" GetItemNameFunc="x => x?.Name" ListVariant="ListVariant.DropDown" AddAsyncFunc="NewSection" @bind-SelectedItem="SelectedSection" DeleteAsyncFunc="DeleteSection" ShowActions="true">
        <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
        <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Medium" />
    </SelectList>
    
    @if(SelectedSection is not null)
    {
        <MudTextField T="string" Variant="Variant.Outlined" Label="@Localizer["Namn"]" Margin="Margin.Dense" Value="SelectedSection.Name" ValueChanged="x => SelectedSection.Name = x" />
        <MudTextField T="string" Variant="Variant.Outlined" Label="@Localizer["Typ"]" Margin="Margin.Dense" ReadOnly="true" Value="Helper.GetSectionTypeName(SelectedSection)" />

        if (SelectedSection is SheetSection sheetSection)
        {
            <SheetSectionEditor Section="@sheetSection" View="View" />
        }
        else if (SelectedSection is DataSection dataSection)
        {
            <DataSectionEditor Section="@dataSection" View="View" />
        }

        
    }

    
</SettingsSection>

@code{
    [Parameter] public View? View { get; set; }
    [CascadingParameter] public EditViewPage? EditViewPage { get; set; }

    ISection? SelectedSection { get; set; }

    async Task<ISection?> NewSection()
    {
        if(View is null)
        {
            return null;
        }

        var dialog = await DialogService.ShowAsync<NewSectionDialog>(Localizer["Ny sektion"]);
        var result = await dialog.Result;
        if (result?.Data is NewSectionDialogResult newSectionResult)
        {

            switch (newSectionResult.Type)
            {
                case SectionType.DataSection:
                    var dataSection = new DataSection { Name = newSectionResult.Name, Order = View.SectionsInOrder().Count() + 1 };
                    View?.DataSections.Add(dataSection);
                    EditViewPage?.TriggerStateHasChanged();
                    return dataSection;
                case SectionType.SheetSection:
                    var sheetSection = new SheetSection { Name = newSectionResult.Name, Order = View.SectionsInOrder().Count() + 1 };
                    View?.SheetSections.Add(sheetSection);
                    EditViewPage?.TriggerStateHasChanged();
                    return sheetSection;
                default:
                    throw new NotImplementedException();
            }
        }
        return null;
    }
    Task DeleteSection(ISection section)
    {
        if (View is not null)
        {
            if(section is DataSection dataSection)
            {
                View?.DataSections.Remove(dataSection);
            }
            else if (section is SheetSection sheetSection)
            {
                View?.SheetSections.Remove(sheetSection);
            }
            else
            {
                throw new NotImplementedException();
            }
        }
        EditViewPage?.TriggerStateHasChanged();
        return Task.CompletedTask;
    }
}