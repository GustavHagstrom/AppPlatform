@inject IStringLocalizer<ViewRights> Localizer


<SettingsSection Title="@Localizer["Roller"]">
    <RolePicker AllRoles="AllRoles" PickedRoleIds="PickedRoleIds" PickChanged="OnRolePickChanged" />
</SettingsSection>
<SettingsSection Title="@Localizer["Användare"]">
    <UserPicker AllUsers="AllUsers" PickedUserIds="PickedUserIds" PickChanged="OnUserPickChanged" />
</SettingsSection>

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IMicrosoftGraphUserAccess MicrosoftGraphUserAccess
@inject IUserViewStore UserViewService
@inject IRoleViewStore RoleViewService
@code{

    [Parameter] public View? View { get; set; }
    [CascadingParameter] public EditViewPage? EditViewPage { get; set; }
    bool IsLoading { get; set; } = false;

    List<Role> AllRoles { get; set; } = new List<Role>();
    List<string> PickedRoleIds { get; set; } = new List<string>();
    List<UserWithPhoto> AllUsers { get; set; } = new List<UserWithPhoto>();
    List<string> PickedUserIds { get; set; } = new List<string>();

    protected override Task OnInitializedAsync()
    {
        return LoadData();
    }
    async Task LoadData()
    {
        if (View is null || EditViewPage is null)
        {
            return;
        }
        EditViewPage.SetLoading(true);
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tenantId = state.User.GetTenantId();
        if (tenantId is null)
        {
            EditViewPage.SetLoading(false);
            return;
        }
        AllRoles = (await RoleViewService.GetRolesAsync(tenantId)).ToList();
        PickedRoleIds = (await RoleViewService.GetPickedRoleIdsAsync(View)).ToList();
        AllUsers = (await MicrosoftGraphUserAccess.GetUsersWithPhotoAsync()).ToList();
        PickedUserIds = (await UserViewService.GetPickedUserIdsAsync(View)).ToList();
        EditViewPage.SetLoading(false);
    }
    async Task OnRolePickChanged(PickChangedRecord<Role> record)
    {
        if (View is null || EditViewPage is null)
        {
            return;
        }
        EditViewPage.SetLoading(true);
        if(record.IsPicked)
        {
            await RoleViewService.PickAsync(View, new string[] { record.Data.Id });
            PickedRoleIds.Add(record.Data.Id);
        }
        else
        {
            await RoleViewService.UnpickAsync(View, new string[] { record.Data.Id });
            PickedRoleIds.Remove(record.Data.Id);
        }
        EditViewPage.SetLoading(false);
    }
    async Task OnUserPickChanged(PickChangedRecord<UserWithPhoto> record)
    {
        if (View is null || record.Data.User.Id is null || EditViewPage is null)
        {
            return;
        }
        EditViewPage.SetLoading(true);
        if (record.IsPicked)
        {
            await UserViewService.PickAsync(View, new string[] { record.Data.User.Id });
            PickedUserIds.Add(record.Data.User.Id);
        }
        else
        {
            await UserViewService.UnpickAsync(View, new string[] { record.Data.User.Id });
            PickedUserIds.Remove(record.Data.User.Id);
        }
        EditViewPage.SetLoading(false);
        
    }

}