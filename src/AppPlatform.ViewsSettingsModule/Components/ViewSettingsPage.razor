@page "/Settings/ViewSettings"
@layout SettingsLayout
@inject IStringLocalizer<ViewSettingsPage> Localizer

<SettingsPageBase IsLoading="IsLoading" >
    <SettingsSection>
        <div class="d-flex">
            <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Sharp.Add" OnClick="CreateNewViewAsync" />
        </div>
    </SettingsSection>
    <SettingsSection LoadDataAsync="LoadViewsAsync">
        <ViewList Views="Views" />
    </SettingsSection>
    
</SettingsPageBase>

@inject IViewStore ViewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@code{
    bool IsLoading { get; set; } = false;
    List<View> Views { get; set; } = new();

    async Task LoadViewsAsync()
    {
        Views.Clear();
        SetLoading(true);
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var tenantId = state.User.GetTenantId();
        if (tenantId is not null)
        {
            var views = await ViewService.GetViewListAsync(tenantId);
            Views.AddRange(views);
        }
        SetLoading(false);
    }
    void SetLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    async Task CreateNewViewAsync()
    {
        var parameters = new DialogParameters<StringInputDialog> { { x => x.InputLabel, Localizer["Namn"] } };
        var options = new DialogOptions { NoHeader = false };
        var dialog = await DialogService.ShowAsync<StringInputDialog>(Localizer["Ny vy"], parameters, options);
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is string input and not null)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var tenantId = state.User.GetTenantId();
            if (tenantId is not null)
            {
                var view = new View { Name = input };
                await ViewService.UpsertAsync(tenantId, view);
                NavigationManager.NavigateTo($"{Constants.Routes.ViewEditPage}/{view.Id}");
            }
            
        }
    }
}