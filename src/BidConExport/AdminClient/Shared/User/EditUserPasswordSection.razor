@using System.ComponentModel.DataAnnotations
@using DataAccessLibrary.Helpers
@inject IUserStore _userStore


<MudForm @ref="PasswordForm">
    <MudTextField @bind-Value="NewPassword"
                  For="@(() => NewPassword)"
                  Label="Password"
                  Variant="Variant.Text"
                  InputType="@PasswordInput"
                  Adornment="Adornment.End"
                  AdornmentIcon="@PasswordInputIcon"
                  OnAdornmentClick="ToggleShowPassword"
                  AdornmentAriaLabel="Show" />

    <MudTextField @bind-Value="ConfirmPassword"
                  For="@(() => ConfirmPassword)"
                  Label="Confirm password"
                  Variant="Variant.Text"
                  InputType="@ConfirmPasswordInput"
                  Adornment="Adornment.End"
                  AdornmentIcon="@ConfirmPasswordInputIcon"
                  OnAdornmentClick="ToggleShowConfirmPassword"
                  AdornmentAriaLabel="Show" />
    <div class="d-flex pt-4">
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.Save"
                       Color="Color.Success"
                       OnClick="@(async () => await SavePasswordAsync())"
                       Variant="Variant.Filled"
                       Size="Size.Large" />
    </div>
</MudForm>

@code{
    [Parameter] public EventCallback OnPasswordSaved { get; set; }
    [Parameter] public User? CurrentUser { get; set; }
    public MudForm? PasswordForm { get; set; }
    public bool IsShowPass { get; set; } = false;
    public bool IsShowConfirmPass { get; set; } = false;
    [Required(ErrorMessage = "Password is required")]
    [DataType(DataType.Password)]
    [StringLength(100)]
    public string NewPassword { get; set; } = string.Empty;
    [Required]
    [DataType(DataType.Password)]
    [Compare(nameof(NewPassword))]
    public string ConfirmPassword { get; set; } = string.Empty;
    public InputType PasswordInput { get; set; } = InputType.Password;
    public InputType ConfirmPasswordInput { get; set; } = InputType.Password;
    string PasswordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;
    string ConfirmPasswordInputIcon { get; set; } = Icons.Material.Filled.VisibilityOff;

    public async Task SavePasswordAsync()
    {
        await PasswordForm!.Validate();
        if (PasswordForm.IsValid)
        {
            PasswordHasher.AddHashAndSaltToUser(CurrentUser!, NewPassword);
            await _userStore.UpdateAsync(CurrentUser!);
            await OnPasswordSaved.InvokeAsync();
        }


    }
    public void ToggleShowPassword()
    {
        if (IsShowPass)
        {
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
        IsShowPass = !IsShowPass;
    }
    public void ToggleShowConfirmPassword()
    {
        if (IsShowConfirmPass)
        {
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
        IsShowConfirmPass = !IsShowConfirmPass;
    }
}