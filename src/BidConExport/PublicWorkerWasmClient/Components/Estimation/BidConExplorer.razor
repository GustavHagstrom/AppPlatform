@using ApiAccessLibrary.ApiHandlers
@using PublicWorkerWasmClient.Authentication.Services
@inject IBidconApiHandler _bidconApiHandler
@inject ITokenManagerService _tokenManagerService

<div class="pa-4" style="overflow: scroll; position: relative">
    <MudOverlay Visible="@IsRefreshing" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
    </MudOverlay>
    <MudPaper Elevation="0">
        <MudTreeView Items="TreeItems" MultiSelection="true" @bind-SelectedValues="SelectedValues">
            <ItemTemplate>
                <MudTreeViewItem T="DbEstimation" Value="@context" Text="@($"{context.Name} - {context.Description}")" />
                @*<MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems" Value="@context"
                                 Icon="@context.Icon" Text="@context.Title"/>*@
                @*<MudTreeViewItem Value="rtest"/>*@
            </ItemTemplate>
        </MudTreeView>
    </MudPaper>

</div>

@code{
    private bool IsRefreshing { get; set; } = false;


    private HashSet<DbEstimation> SelectedValues { get; set; } = new();
    private HashSet<DbEstimation> TreeItems { get; set; } = new();

    private async Task RefreshItems()
    {
        IsRefreshing = true;
        //TreeItems.Clear();
        var tokenModel = await _tokenManagerService.GetTokenModelFromLocalStorageAsync();
        var items = await _bidconApiHandler.GetEstimationsAsync(tokenModel);
        TreeItems = new(items);
        //foreach (var item in items)
        //{
        //    TreeItems.Add(item);
        //}
        IsRefreshing = false;
    }
    private void CreateTreeItemsRecursivly(HashSet<TreeItemData> hashSet, DbFolder parentFolder)
    {
        foreach (var folder in parentFolder.SubFolders)
        {
            var treeItem = new TreeItemData(folder.Name, Icons.Material.Sharp.Folder);
            CreateTreeItemsRecursivly(treeItem.TreeItems, folder);
            hashSet.Add(treeItem);
        }
        foreach (var estimation in parentFolder.DbEstimations)
        {
            var treeItem = new TreeItemData($"{estimation.Name} - {estimation.Description}", Icons.Material.Sharp.Article);
            hashSet.Add(treeItem);
        }
    }
 
    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Icon { get; set; }

        public int? Number { get; set; }

        public bool IsExpanded { get; set; } = false;

        public HashSet<TreeItemData> TreeItems { get; set; } = new();

        public TreeItemData(string title, string icon, int? number = null)
        {
            Title = title;
            Icon = icon;
            Number = number;
        }
    }
}