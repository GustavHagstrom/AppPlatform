@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject GraphServiceClient GraphClient

<div>@* @onfocusout="@(() => _isOpen = false)">*@
    <AuthorizeView @ref="AuthView">
        <Authorized>
            <button @onclick="ToggleOpen" style="height:40px">
                <MudAvatar Class="mr-1 align-self-center" Style="@($"height:35px; width:35px; background-color: {Theme.Palette.PrimaryLighten}")">
                    <img src="@ImageSrc" style="height:35px; width:35px;" class="align-self-center"/>
                </MudAvatar>

                <MudAvatar Class="mr-1 align-self-center" Style="@($"height:35px; width:35px; background-color: {Theme.Palette.PrimaryLighten}")">
                        <MudText Typo="Typo.h6" Class="align-self-center" Style="font-size: 1rem">@GetInitials(context.User.Identity?.Name)</MudText>
                </MudAvatar>

                <MudPopover Open="_isOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <MudButton OnClick="BeginLogOut" Variant="Variant.Text">Log out</MudButton>
                </MudPopover>

            </button>
        </Authorized>
        <NotAuthorized>
            <MudButton Variant="Variant.Text" Href="authentication/login">Log in</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</div>


@code{
    [CascadingParameter] public required MudTheme Theme { get; set; }
    public AuthorizeView? AuthView { get; set; }
    public bool PhotoExists = false;
    public required string ImageSrc { get; set; } = "";
    public bool _isOpen = false;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
    public string GetInitials(string? name)
    {
        if (name is null) return string.Empty;
        var names = name.Split(" ");
        var initials = string.Empty;
        foreach (var item in names)
        {
            initials += item.First();
        }
        return initials;
    }
    protected override async Task OnInitializedAsync()
    {
        await GetPhotoAsync();
    }
    public void BeginLogOut()
    {
        Navigation.NavigateToLogout("authentication/logout");
    }
    public async Task GetPhotoAsync()
    {
        //This runs before tokens are set and will therefor not get photo on the first try
        //fix please
        PhotoExists = false;
        var photo = await GraphClient.Me.Photo.Request().GetAsync();
        if (photo.Height is not null)
        {
            PhotoExists = true;
            var ms = new MemoryStream();
            var photoStream = await GraphClient.Me.Photo.Content.Request().GetAsync();
            photoStream.CopyTo(ms);
            var photoBytes = ms.ToArray();
            var photoBase64 = Convert.ToBase64String(photoBytes);
            ImageSrc = $"data:image/png;base64,{photoBase64}";
            
        }
        StateHasChanged();
    }
}
