@implements IDisposable



<div style="@($"height: {Height}")">
    <div>
        <div class="d-flex">
            <input placeholder="Sökfilter" class="ma-1 pa-1 flex-grow-1" style="outline: none" @bind="Filter" @bind:event="oninput"/>
        </div>
        <MudDivider Light="true"/>
    </div>
    <div style="@($"overflow-y: scroll; position: relative; height: calc({Height} - 37px)")">
        <MudOverlay Visible="@ImportState!.IsRefreshing" DarkBackground="true" Absolute="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </MudOverlay>   
    
    
        @if (ImportState!.IsRefreshing == false)
        {
            <Virtualize Items="ImportState.Search(Filter)!.Where(x => x.IsSelected).OrderBy(x => x.Name).ToList()">
                <div class="d-flex">
                    <MudCheckBox @bind-Checked="context.IsSelected" />
                    <MudIcon Icon="@Icons.Material.Sharp.Article" Color="@Color.Tertiary" Class="align-self-center ml-3" />
                    <MudText Class="align-self-center ml-2">@context.Name</MudText>
                </div>

            </Virtualize>
        }
    </div>
    
</div>

@code{
    [Parameter, EditorRequired] public IEstimationImportState? ImportState { get; set; }
    [Parameter] public string Height { get; set; } = string.Empty;
    private string Filter { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        ImportState!.OnChange += StateHasChanged;
    }
    public void Dispose()
    {
        ImportState!.OnChange -= StateHasChanged;
    }

}