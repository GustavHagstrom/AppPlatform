@using System.ComponentModel.DataAnnotations;

<MudStack Spacing="2">

    <ImportSettingsStringPropertyItem Label="@Localizer["Namn"]" @bind-Value="Settings.Name" />
    <ImportSettingsStringPropertyItem Label="@Localizer["Kontokod - A-pris faktor"]" @bind-Value="@Settings.CostFactorAccount" />
    <ImportSettingsStringPropertyItem Label="@Localizer["Kontokod - Nettokalkyl"]" @bind-Value="@Settings.NetCostAccount" />
    <ImportSettingsStringPropertyItem Label="@Localizer["Kontokod - Försäljningspris"]" @bind-Value="@Settings.CostBeforeChangesAccount"/>
    <ImportSettingsStringPropertyItem Label="@Localizer["Tagg för dolda rader"]" @bind-Value="@Settings.HiddenTag" />
    <ImportSettingsStringPropertyItem Label="@Localizer["Tagg för dold enhet"]" @bind-Value="@Settings.HiddenUnitTag"/>

    <MudSwitch Class="py-2" @bind-Checked="Settings.UseRevisionAsSelectionTags" Label="@Localizer["Revision som valtagg"]" Color="Color.Primary" />

    <MudField Label="@Localizer["Valtaggar"]" Variant="Variant.Outlined">
        @foreach (var tagg in Settings.SelectionTags)
        {
            <ImportSettingsTaggItem Tagg="@tagg" OnDeleteClick="DeleteSelectionTag" />
        }
        <ImportSettingsAddTaggItem OnAddClick="AddSelectionTag" MaxLength="GetMaxLength(nameof(EstimationImportSettings.SelectionTags))"/>
    </MudField>

    <MudField Label="@Localizer["Snabbtaggar"]" Variant="Variant.Outlined">
        @foreach (var tagg in Settings.QuickTags)
        {
            <ImportSettingsTaggItem Tagg="@tagg" OnDeleteClick="DeleteQuickTag" />
        }
        <ImportSettingsAddTaggItem OnAddClick="AddQuickTag" MaxLength="GetMaxLength(nameof(EstimationImportSettings.QuickTags))" />
    </MudField>

</MudStack>


@code{

    [Inject] public required IStringLocalizer<ImportSettingsEditor> Localizer { get; set; }
    [Parameter, EditorRequired] public required EstimationImportSettings Settings { get; set; }


    public void AddSelectionTag(string tag)
    {
        Settings.SelectionTags.Add(tag);
        StateHasChanged();
    }
    public void DeleteSelectionTag(string tag)
    {
        Settings.SelectionTags.Remove(tag);
        StateHasChanged();
    }
    public void AddQuickTag(string tag)
    {
        Settings.QuickTags.Add(tag);
        StateHasChanged();
    }
    public void DeleteQuickTag(string tag)
    {
        Settings.QuickTags.Remove(tag);
        StateHasChanged();
    }
    public int GetMaxLength(string propertyName)
    {
        var maxLengthAttribute = (MaxLengthAttribute)typeof(EstimationImportSettings)
            .GetProperty(propertyName)!
            .GetCustomAttributes(typeof(MaxLengthAttribute), true)
            .First();
        return maxLengthAttribute.Length;
    }
    
}