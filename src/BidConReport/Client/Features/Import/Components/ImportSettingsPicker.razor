<div class="d-flex align-stretch">
    
    <div class="d-flex align-stretch">
        <MudButton Variant="Variant.Text" Class="pa-0 px-2 d-flex align-stretch" OnClick="() => PopOverIsVisible = !PopOverIsVisible">
            <div style="min-width: 120px" class="@CreateSelectorClass()">
                
                <MudText Typo="Typo.subtitle2" Class="align-self-end">@Localizer["Profil:"]</MudText>
                <MudText Typo="Typo.subtitle2" Class="align-self-end pl-2">@(SelectedSetting?.Name ?? "-")</MudText>
                <MudSpacer/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Sharp.ArrowDropDown" Class="align-self-end" />
            </div>
        </MudButton>
        <MudPopover Class="py-1" Open="PopOverIsVisible" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudStack Spacing="1">
                @foreach (var item in SettingsList)
                {
                    <MudButton Class="d-flex flex-grow-1" Variant="Variant.Text" EndIcon="@CreateDefaultSettingsIcon(item)" OnClick="() => SetSelectedSettings(item)">
                        <MudText Typo="Typo.subtitle2">@item.Name</MudText>
                    </MudButton>
                }
            </MudStack>
        </MudPopover>
    </div>
    <MudIconButton Icon="@CreateDefaultSettingsIcon(SelectedSetting)" Style="height: 40px; width: 40px;" OnClick="SaveSelectedSettingsAsDefault" />
    
</div>
@code {
    [Parameter] public EventCallback<EstimationImportSettingsDto> SelectedSettingChanged { get; set; }
    [Inject] public required IStringLocalizer<ImportSettingsPicker> Localizer { get; set; }
    [Inject] public required IImportSettingsService ImportSettingsService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    

    private EstimationImportSettingsDto? _selectedSetting;

    public EstimationImportSettingsDto? SelectedSetting
    {
        get => _selectedSetting; set
        {
            _selectedSetting = value;
            SelectedSettingChanged.InvokeAsync(value);
        }
    }
    public bool PopOverIsVisible { get; set; } = false;
    public ICollection<EstimationImportSettingsDto> SettingsList { get; set; } = new List<EstimationImportSettingsDto>();
    public EstimationImportSettingsDto? DefaultSetting { get; set; } = null;

    public string CreateDefaultSettingsIcon(EstimationImportSettingsDto? settings)
    {
        if(IsDefaultSettings(settings))
        {
            return Icons.Material.Sharp.Star;
        }
        else
        {
            return Icons.Material.Sharp.StarBorder;
        }
    }
    public string CreateSelectorClass()
    {
        if (SelectedSetting is not null)
        {
            return "d-flex mb-1 pa-0 border-solid border-b align-content-center";
        }
        else
        {
            return "d-flex mb-1 pa-0 border-solid border-b-2 mud-border-error align-content-center";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshEntireComponent();
    }
    /// <summary>
    /// Refreshing all the data from the backend and trigger StateHasChanged()
    /// </summary>
    /// <returns></returns>
    public async Task RefreshEntireComponent()
    {
        await SetSettingsListAsync();
        await SetDefaultSetteingsAsync();
        SelectedSetting = DefaultSetting;
        PopOverIsVisible = false;
        StateHasChanged();
    }
    public async Task SetSettingsListAsync()
    {
        try
        {
            SettingsList = await ImportSettingsService.GetAllAsync();
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Misslyckades att hämta Importeringsprofiler"], Severity.Error);
        }
    }
    public async Task SetDefaultSetteingsAsync()
    {
        try
        {
            DefaultSetting = await ImportSettingsService.GetDefaultAsync();
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Ingen standardprofil hittades"], Severity.Warning);
        }
    }
    /// <summary>
    /// Sets SelectedSettings and trigger StateHasChanged
    /// Will also close popover
    /// </summary>
    /// <param name="settings"></param>
    public void SetSelectedSettings(EstimationImportSettingsDto? settings)
    {
        SelectedSetting = settings;
        PopOverIsVisible = false;
        StateHasChanged();
    }
    public async Task SaveSelectedSettingsAsDefault()
    {
        try
        {
            await ImportSettingsService.SaveAsDefaultAsync(SelectedSetting);
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Misslyckades att spara vald profil som standard"], Severity.Error);
        }
        await RefreshEntireComponent();
    }

    public bool IsDefaultSettings(EstimationImportSettingsDto? settings)
    {
        if (DefaultSetting is null || settings is null) return false;

        return settings.Id == DefaultSetting.Id;
    }

}
