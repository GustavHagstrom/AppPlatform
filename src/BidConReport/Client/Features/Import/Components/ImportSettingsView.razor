<div class="d-flex justify-end" style="@($"background-color: {Theme.Palette.GrayLighter};")">
    @if (SelectedSetting is not null)
    {
        <MudIconButton Icon="@Icons.Material.Sharp.Save" OnClick="SaveAsync" Style="height: 40px; width: 40px;" />
        <MudIconButton Icon="@Icons.Material.Sharp.Delete" OnClick="DeleteAsync" Style="height: 40px; width: 40px;" />
    }
    <MudIconButton Icon="@Icons.Material.Sharp.Add" OnClick="CreateNew" Style="height: 40px; width: 40px;" />
</div>

<MudStack Spacing="2" Class="pt-6">    

    <MudSelect Class="px-6"
                @bind-Value="SelectedSetting"
                T="EstimationImportSettings"
                MultiSelection="false"
                ToStringFunc="ConvertFunc"
                Label="@Localizer["Inställningsprofil"]"
                Variant="Variant.Outlined"
                AnchorOrigin="Origin.BottomCenter"
                Margin="Margin.Dense">
        @foreach (var item in AllSettings)
        {
            <MudSelectItem Value="item"/>
        }
    </MudSelect>

    <MudSwitch Class="px-6" T="bool" Disabled="SelectedSetting is null || SelectedSetting.Id == 0" Checked="IsStandardSettings(SelectedSetting)" CheckedChanged="OnSelectedSettingsStandardValueChanged" Label="@Localizer["Standardprofil"]" Color="Color.Primary" />

    @if(SelectedSetting is not null)
    {
        <MudForm Model="SelectedSetting" @ref="Form" Style="overflow-y: scroll" Class="px-6">
            <ImportSettingsEditor Settings="SelectedSetting"/>
        </MudForm>
    }

</MudStack>





@code {
    [CascadingParameter] public required MudTheme Theme { get; set; }
    [Inject] public required IStringLocalizer<ImportSettingsView> Localizer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required IImportSettingsService ImportSettingsService { get; set; }

    public EstimationImportSettings? SelectedSetting { get; set; } = null;
    public EstimationImportSettings? StandardSetting { get; set; } = null;
    public List<EstimationImportSettings> AllSettings { get; set; } = new();
    public Func<EstimationImportSettings, string> ConvertFunc { get; set; } = s => s.Name;
    public MudForm? Form { get; set; }

    public bool IsStandardSettings(EstimationImportSettings? settings)
    {
        if (StandardSetting is null || settings is null) return false;

        return settings.Id == StandardSetting.Id;
    }
    public async Task OnSelectedSettingsStandardValueChanged(bool isStandard)
    {
        if (SelectedSetting is not null)
        {
            try
            {
                if(isStandard)
                {
                    await ImportSettingsService.SaveAsStandardAsync(SelectedSetting);
                }
                else
                {
                    await ImportSettingsService.SaveAsStandardAsync(null);
                }

            }
            catch (Exception e)
            {
                Snackbar.Add(Localizer[$"Misslyckades spara som standard. Error: {e.Message}"], Severity.Error);
            }
            await SetAllAndStandardSettings();
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await SetAllAndStandardSettings();
        SelectedSetting = StandardSetting;
        if(SelectedSetting is null)
        {
            Snackbar.Add(Localizer["Ingen standardinställning hittades"], Severity.Info);
        }
        StateHasChanged();
    }
    public async Task SetAllAndStandardSettings()
    {
        AllSettings = (await GetAllSettingsAsync()).ToList();
        StandardSetting = await GetStandardSettingsAsync();
    }
    public async Task<EstimationImportSettings?> GetStandardSettingsAsync()
    {
        try
        {
            return await ImportSettingsService.GetStandardAsync();
        }
        catch (Exception)
        {
            return null;
        }
    }
    public async Task<ICollection<EstimationImportSettings>> GetAllSettingsAsync()
    {
        try
        {
            return await ImportSettingsService.GetAllAsync();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error getting all organization settings: {e.Message}", Severity.Error);
            return Array.Empty<EstimationImportSettings>();
        }
    }
    public void CreateNew()
    {
        SelectedSetting = EstimationImportSettings.Empty;
        StateHasChanged();
    }
    private async Task SaveAsync()
    {
        try
        {
            if(SelectedSetting is not null)
            {
                await ImportSettingsService.UpsertAsync(SelectedSetting);
                await SetAllAndStandardSettings();
                SelectedSetting = AllSettings.Where(x => x.Name == SelectedSetting.Name).First();
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error (Settings): {e.Message}", Severity.Info);
        }
    }
    private async Task DeleteAsync()
    {
        try
        {
            if (SelectedSetting is not null)
            {
                await ImportSettingsService.DeleteAsync(SelectedSetting.Id);
                SelectedSetting = null;
                await SetAllAndStandardSettings();
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error (Settings): {e.Message}", Severity.Info);
        }
    }
}
