<MudDivider Light="true" />
<MudPaper Class="pa-6" Elevation="0">
    <MudSelect @bind-Value="SelectedSetting"
               T="EstimationImportSettings"
               MultiSelection="false"
               ToStringFunc="ConvertFunc"
               Label="@Localizer["Inställningsprofil"]"
               Variant="Variant.Outlined"
               AnchorOrigin="Origin.BottomCenter">
        @foreach (var item in AllSettings)
        {
            <MudSelectItem Value="item" />
        }
    </MudSelect>
</MudPaper>
<MudDivider Light="true" />
<MudPaper Elevation="0">
    <ImportSettingsEditor Settings="SelectedSetting" OnSave="GetSettingsAsync" />
</MudPaper>
<MudDivider Light="true" />




@code {
    [Inject] public required IStringLocalizer<ImportSettingsView> Localizer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required IImportSettingsService ImportSettingsService { get; set; }
    [Parameter, EditorRequired] public required EstimationImportSettings SelectedSettings { get; set; }
    public EstimationImportSettings SelectedSetting { get; set; } = EstimationImportSettings.Empty;
    public HashSet<EstimationImportSettings> AllSettings { get; set; } = new();
    public Func<EstimationImportSettings, string> ConvertFunc { get; set; } = s => s.Name;

    protected override async Task OnInitializedAsync()
    {
        await GetSettingsAsync();
    }
    public async Task GetSettingsAsync()
    {
        await GetAllSettingsAsync();
        await GetStandardSettingsAsync();
        StateHasChanged();
    }
    public async Task GetStandardSettingsAsync()
    {
        try
        {
            var standard = await ImportSettingsService.GetStandardAsync();
            if (standard is not null)
            {
                SelectedSettings = AllSettings.Where(s => s.Id == standard.Id).First();
            }
            else if(AllSettings.Count > 0)
            {
                SelectedSettings = AllSettings.First();
            }
        }
        catch (Exception e)
        {

            Snackbar.Add($"Standard settings: {e.Message}", Severity.Info);
        }
    }
    public async Task GetAllSettingsAsync()
    {
        AllSettings.Clear();
        try
        {
            var settings = await ImportSettingsService.GetAllAsync();
            foreach (var s in settings)
            {
                AllSettings.Add(s);
            }
        }
        catch (Exception e)
        {

            Snackbar.Add($"Error getting all organization settings: {e.Message}", Severity.Error);
        }
    }
}
