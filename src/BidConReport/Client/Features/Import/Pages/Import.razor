@page "/import"
@*@attribute [Authorize]*@

@*<MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Docked" Anchor="Anchor.End" Elevation="4">
    <div>
        <ImportSettingsView SelectedSettingChanged="OnSettingsSelectionChanged" />
    </div>
</MudDrawer>*@

<PageLayout ToolbarHeight="40px"> 
    <ToolbarContent>
        <ImportSettingsPicker SelectedSettingChanged="OnSettingsSelectionChanged" />
        
        @*<MudIconButton Icon="@Icons.Material.Sharp.Settings" OnClick="ToggleDrawer" Style="height: 40px; width: 40px;" />*@
        <div class="border-solid border-l mx-2 my-2" style="border-color: var(--mud-palette-lines-default)"/>
        
        <MudIconButton Icon="@Icons.Material.Sharp.Refresh" OnClick="GetEstimationItemTreeAsync" Style="height: 40px; width: 40px;" />
        <MudIconButton Icon="@Icons.Material.Sharp.Start" OnClick="DownloadAsync" Style="height: 40px; width: 40px;" />
       

    </ToolbarContent>


    <ChildContent>
        

        <MudContainer MaxWidth="MaxWidth.Medium" Style="height: 100%" Class="px-0">
            
            <MudPaper Square="true" Elevation="4" Style="height: 100%">
                <MudStack Spacing="0" Row="true" Class="d-flex justify-center">
                    <MudButton OnClick="() => ActiveTab = 1" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Search" Class="px-4" Style="@GetTabButtonStyle(1)">@Localizer["Sök"]</MudButton>
                    <MudButton OnClick="() => ActiveTab = 2" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Folder" Class="px-3" Style="@GetTabButtonStyle(2)">@Localizer["Utforska"]</MudButton>
                    <MudBadge Content="ItemTree?.SelectedEstimations()?.Count()" Color="Color.Primary" Overlap="true">
                        <MudButton OnClick="() => ActiveTab = 3" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.CheckBox" Class="px-3" Style="@GetTabButtonStyle(3)">@Localizer["Valda"]</MudButton>
                    </MudBadge>
                </MudStack>
                <MudDivider Light="true" />
                @if(ActiveTab == 1)
                {
                    <EstimationList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
                }
                @if (ActiveTab == 2)
                {
                    <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
                }
                @if (ActiveTab == 3)
                {
                    <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
                }
            </MudPaper>
        </MudContainer>
    </ChildContent>
    
</PageLayout>



@code{
    public bool IsDownloading { get; set; } = true;
    public int ActiveTab { get; set; } = 1;


    [CascadingParameter] public required MudTheme Theame { get; set; }
    [Inject] public required StyleService StyleService { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required IStringLocalizer<Import> Localizer { get; set; }
    [Inject] public required IBidConImporterService _importer { get; set; }
    [Inject] public required ImportedEstimationsContainer ImportedEstimationsContainer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    //[Inject] public required NavigationManager Navigation { get; set; }

    public EstimationImportSettings? Settings { get; set; }
    public DbTreeItem? ItemTree { get; set; }
    public bool IsRefreshing { get; set; } = true;
    public bool drawerOpen = false;

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    string GetTabButtonStyle(int tab)
    {
        if(tab == ActiveTab)
        {
            return StyleService.ActivePageStyle;
        }
        return string.Empty;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        //await _settingsState.LoadPreferedSettingsAsync();
        await GetEstimationItemTreeAsync();
    }
    public void OnSettingsSelectionChanged(EstimationImportSettings? settings)
    {
        Settings = settings;
    }
    private async Task DownloadAsync()
    {
        if (ItemTree is null || Settings is null)
        {
            return;
        }

        try
        {
            var selectedEstimations = ItemTree.SelectedEstimations().Select(x => x.DbEstimation!).ToList();
            if (selectedEstimations.Count == 0) return;
            var cancelSource = new CancellationTokenSource();
            var progress = new Progress<BidConImportResult<Estimation>>();
            var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Large,
                CloseButton = false,
                NoHeader = true,
                DisableBackdropClick = true,

            };
            var parameters = new DialogParameters();
            parameters.Add(nameof(DownloadDialog.Progress), progress);
            parameters.Add(nameof(DownloadDialog.TotalEstimationCount), selectedEstimations.Count);
            parameters.Add(nameof(DownloadDialog.CancelTokenSource), cancelSource);
            DialogService.Show<DownloadDialog>(string.Empty, parameters, options);
            var result = await _importer.GetEstimationsAsync(selectedEstimations, Settings, cancelSource.Token, progress);

            ImportedEstimationsContainer.ImportedEstimations = result
                .Where(x => x.Value is not null)
                .Select(x => x.Value)
                .ToArray()!;
        }
        catch (Exception e)
        {
            Snackbar.Add(Localizer[$"Misslyckades att importera kalkyler. Error: {e.Message}"], Severity.Error);
        }
    }
    private async Task GetEstimationItemTreeAsync()
    {
        IsRefreshing = true;
        ItemTree = null;
        var dbFolderResult = await _importer.GetFoldersAsync();
        if (dbFolderResult.Value is not null)
        {
            ItemTree = new DbTreeItem(dbFolderResult.Value);
            ItemTree.SelectionChanged = StateHasChanged;
        }
        else
        {
            Snackbar.Add($"Error: {dbFolderResult.ErrorMessage}", Severity.Error);
        }
        IsRefreshing = false;
        StateHasChanged();
    }
}