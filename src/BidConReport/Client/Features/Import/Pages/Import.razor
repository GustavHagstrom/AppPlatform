@page "/import"
@attribute [Authorize]

<PageToolbar>
    <MudIconButton Icon="@Icons.Material.Sharp.Download" OnClick="DownloadAsync" Style="height: 40px; width: 40px;" />
    <MudIconButton Icon="@Icons.Material.Sharp.Refresh" OnClick="GetEstimationItemTreeAsync" Style="height: 40px; width: 40px;" />
    <MudIconButton Icon="@Icons.Material.Sharp.Settings" OnClick="ToggleDrawer" Style="height: 40px; width: 40px;" />
</PageToolbar>

<MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.End" Elevation="4">
    <div>
        <ImportSettingsView SelectedSettingChanged="OnSettingsSelectionChanged" />
    </div>
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.Large" Class="my-2">
    <MudPaper Square="true" Elevation="4">
        <MudTabs Centered="true" KeepPanelsAlive="true">
            
            <MudTabPanel Text="@Localizer["Sök"]" Icon="@Icons.Material.Sharp.Search">
                <MudDivider Light="true" />
                <EstimationList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>

            <MudTabPanel Text="@Localizer["Utforska"]" Icon="@Icons.Material.Sharp.Folder">
                <MudDivider Light="true" />
                <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>      

            <MudTabPanel Text="@Localizer["Valda"]" Icon="@Icons.Material.Sharp.CheckBox" BadgeData="ItemTree?.SelectedEstimations()?.Count()">
                <MudDivider Light="true" />
                <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>
            

        </MudTabs>
    </MudPaper>
</MudContainer>

@code{
    [CascadingParameter] public required MudTheme Theame { get; set; }
    [Inject] public required IStringLocalizer<Import> Localizer { get; set; }
    [Inject] public required IBidConImporterService _importer { get; set; }
    [Inject] public required ImportedEstimationsContainer ImportedEstimationsContainer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required NavigationManager Navigation { get; set; }
    public EstimationImportSettings? Settings { get; set; }
    public DbTreeItem? ItemTree { get; set; }
    public bool IsRefreshing { get; set; } = true;
    public bool drawerOpen = true;

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        //await _settingsState.LoadPreferedSettingsAsync();
        await GetEstimationItemTreeAsync();
    }
    public void OnSettingsSelectionChanged(EstimationImportSettings? settings)
    {
        Settings = settings;
    }
    private async Task DownloadAsync()
    {
        if (ItemTree is null || Settings is null)
        {
            return;
        }

        try
        {
            var selectedEstimations = ItemTree.SelectedEstimations().Select(x => x.Id);
            var result = await _importer.GetEstimationsAsync(selectedEstimations, Settings, new Progress<int>());

            ImportedEstimationsContainer.ImportedEstimations = result
                .Where(x => x.Value is not null)
                .Select(x => x.Value)
                .ToArray()!;
            var errors = result
                .Where(x => x.ErrorMessage is not null)
                .Select(x => x.ErrorMessage)!;

            Snackbar.Add($"{ImportedEstimationsContainer.ImportedEstimations.Count}/{selectedEstimations.Count()} av valda kalkyler hämtades", Severity.Info);
            Snackbar.Add($"Errors: \n{string.Join("\n", errors)}", Severity.Error);
            Navigation.NavigateTo("/publish");
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer["Misslyckades att importera kalkyler"], Severity.Error);
        }
    }
    private async Task GetEstimationItemTreeAsync()
    {
        IsRefreshing = true;
        ItemTree = null;
        var dbFolderResult = await _importer.GetFoldersAsync();
        if (dbFolderResult.Value is not null)
        {
            ItemTree = new DbTreeItem(dbFolderResult.Value);
            ItemTree.SelectionChanged = StateHasChanged;
        }
        else
        {
            Snackbar.Add($"Error: {dbFolderResult.ErrorMessage}", Severity.Error);
        }
        IsRefreshing = false;
        StateHasChanged();
    }
    private void EditSettings()
    {

    }
}