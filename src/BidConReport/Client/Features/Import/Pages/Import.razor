@page "/import"

@attribute [Authorize]
@*<MudDrawerContainer Class="mud-height-full">*@

<MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.End" Elevation="4">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Settings</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
        <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.AccountBox">Profile</MudNavLink>
    </MudNavMenu>
</MudDrawer>


<MudToolBar Style="@($"height: 40px; background-color: {Theame!.Palette.GrayLighter}; width: 100%;")" DisableGutters="true" Class="d-flex justify-center">
    <MudIconButton Icon="@Icons.Material.Sharp.Download" OnClick="DownloadAsync" Style="height: 40px; width: 40px;"/>
    <MudIconButton Icon="@Icons.Material.Sharp.Refresh" OnClick="GetEstimationItemTreeAsync" Style="height: 40px; width: 40px;" />
    <MudIconButton Icon="@Icons.Material.Sharp.Settings" OnClick="ToggleDrawer" Style="height: 40px; width: 40px;" />
</MudToolBar>


<MudContainer MaxWidth="MaxWidth.Large" Class="my-2">
    <MudPaper Square="true" Elevation="4">
        <MudTabs Centered="true" KeepPanelsAlive="true">

            <MudTabPanel Text="Utforska" Icon="@Icons.Material.Sharp.Folder">
                <MudDivider Light="true" />
                <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>

            <MudTabPanel Text="Lista" Icon="@Icons.Material.Sharp.Search">
                <MudDivider Light="true" />
                <EstimationList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>

            <MudBadge Content="5">
                <MudTabPanel Icon="@Icons.Material.Sharp.CheckBox">
                    <MudDivider Light="true" />
                    <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
                </MudTabPanel>
            </MudBadge>
            

        </MudTabs>
    </MudPaper>
</MudContainer>
@*</MudDrawerContainer>*@



@code{
    [CascadingParameter] public MudTheme? Theame { get; set; }
    [Inject] public required IBidConImporter _importer { get; set; }
    [Inject] public required IEstimationImportSettingsState _settingsState { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    public DbTreeItem? ItemTree { get; set; }
    public bool IsRefreshing { get; set; } = true;
    public bool drawerOpen = false;

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        //await _settingsState.LoadPreferedSettingsAsync();
        await GetEstimationItemTreeAsync();
    }
    private async Task DownloadAsync()
    {
        var estimations = new List<Estimation>();
        foreach (var e in ItemTree?.SelectedEstimations()!)
        {
            var result = await _importer.GetEstimationAsync(e.Id, _settingsState.CurrentSettings!);
            if(result.Value is not null)
            {
                estimations.Add(result.Value);
            }
        }
    }
    private async Task GetEstimationItemTreeAsync()
    {
        IsRefreshing = true;
        ItemTree = null;
        var dbFolderResult = await _importer.GetFoldersAsync();
        if (dbFolderResult.Value is not null)
        {
            ItemTree = new DbTreeItem(dbFolderResult.Value);
            ItemTree.SelectionChanged = StateHasChanged;
        }
        else
        {
            Snackbar.Add($"Error: {dbFolderResult.ErrorMessage}", Severity.Error);
        }
        IsRefreshing = false;
        StateHasChanged();
    }
    private void EditSettings()
    {

    }
}