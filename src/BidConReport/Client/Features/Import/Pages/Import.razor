@page "/import"
@attribute [Authorize]

@*<MudOverlay Visible="IsDownloading" DarkBackground="true" Absolute="false" ZIndex="9999">
    <DownloadProgress OnCancel="() => IsDownloading = false" />
</MudOverlay>*@


<PageToolbar>
    <MudIconButton Icon="@Icons.Material.Sharp.Start" OnClick="DownloadAsync" Style="height: 40px; width: 40px;" />
    <MudIconButton Icon="@Icons.Material.Sharp.Refresh" OnClick="GetEstimationItemTreeAsync" Style="height: 40px; width: 40px;" />
    <MudIconButton Icon="@Icons.Material.Sharp.Settings" OnClick="ToggleDrawer" Style="height: 40px; width: 40px;" />
</PageToolbar>

<MudDrawer @bind-Open="@drawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.End" Elevation="4">
    <div>
        <ImportSettingsView SelectedSettingChanged="OnSettingsSelectionChanged" />
    </div>
</MudDrawer>

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-2">
    <MudPaper Square="true" Elevation="4">
        <MudTabs Centered="true" KeepPanelsAlive="true">
            
            <MudTabPanel Text="@Localizer["Sök"]" Icon="@Icons.Material.Sharp.Search">
                <MudDivider Light="true" />
                <EstimationList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>

            <MudTabPanel Text="@Localizer["Utforska"]" Icon="@Icons.Material.Sharp.Folder">
                <MudDivider Light="true" />
                <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>      

            <MudTabPanel Text="@Localizer["Valda"]" Icon="@Icons.Material.Sharp.CheckBox" BadgeData="ItemTree?.SelectedEstimations()?.Count()">
                <MudDivider Light="true" />
                <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100vh - 145px)" />
            </MudTabPanel>
            

        </MudTabs>
    </MudPaper>
</MudContainer>

@code{
    public bool IsDownloading { get; set; } = true;


    [CascadingParameter] public required MudTheme Theame { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required IStringLocalizer<Import> Localizer { get; set; }
    [Inject] public required IBidConImporterService _importer { get; set; }
    [Inject] public required ImportedEstimationsContainer ImportedEstimationsContainer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    //[Inject] public required NavigationManager Navigation { get; set; }

    public EstimationImportSettings? Settings { get; set; }
    public DbTreeItem? ItemTree { get; set; }
    public bool IsRefreshing { get; set; } = true;
    public bool drawerOpen = true;

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        //await _settingsState.LoadPreferedSettingsAsync();
        await GetEstimationItemTreeAsync();
    }
    public void OnSettingsSelectionChanged(EstimationImportSettings? settings)
    {
        Settings = settings;
    }
    private async Task DownloadAsync()
    {
        if (ItemTree is null || Settings is null)
        {
            return;
        }

        try
        {
            var selectedEstimations = ItemTree.SelectedEstimations().Select(x => x.DbEstimation!).ToList();
            if (selectedEstimations.Count == 0) return;
            var cancelSource = new CancellationTokenSource();
            var progress = new Progress<BidConImportResult<Estimation>>();
            var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Large,
                CloseButton = false,
                NoHeader = true,
                DisableBackdropClick = true,

            };
            var parameters = new DialogParameters();
            parameters.Add(nameof(DownloadDialog.Progress), progress);
            parameters.Add(nameof(DownloadDialog.TotalEstimationCount), selectedEstimations.Count);
            parameters.Add(nameof(DownloadDialog.CancelTokenSource), cancelSource);
            DialogService.Show<DownloadDialog>(string.Empty, parameters, options);
            var result = await _importer.GetEstimationsAsync(selectedEstimations, Settings, cancelSource.Token, progress);

            ImportedEstimationsContainer.ImportedEstimations = result
                .Where(x => x.Value is not null)
                .Select(x => x.Value)
                .ToArray()!;
        }
        catch (Exception e)
        {
            Snackbar.Add(Localizer[$"Misslyckades att importera kalkyler. Error: {e.Message}"], Severity.Error);
        }
    }
    private async Task GetEstimationItemTreeAsync()
    {
        IsRefreshing = true;
        ItemTree = null;
        var dbFolderResult = await _importer.GetFoldersAsync();
        if (dbFolderResult.Value is not null)
        {
            ItemTree = new DbTreeItem(dbFolderResult.Value);
            ItemTree.SelectionChanged = StateHasChanged;
        }
        else
        {
            Snackbar.Add($"Error: {dbFolderResult.ErrorMessage}", Severity.Error);
        }
        IsRefreshing = false;
        StateHasChanged();
    }
}