<div class="d-flex align-stretch">
    
    <div class="d-flex align-stretch">
        <MudButton Variant="Variant.Text" Class="pa-0 px-2 d-flex align-stretch" OnClick="() => PopOverIsVisible = !PopOverIsVisible">
            <div style="min-width: 120px" class="@CreateSelectorClass()">
                
                <MudText Typo="Typo.subtitle2" Class="align-self-end">@Localizer["Profil:"]</MudText>
                <MudText Typo="Typo.subtitle2" Class="align-self-end pl-2">@(SelectedTemplate?.Name ?? "-")</MudText>
                <MudSpacer/>
                <MudIcon Size="Size.Small" Icon="@Icons.Material.Sharp.ArrowDropDown" Class="align-self-end" />
            </div>
        </MudButton>
        <MudPopover Class="py-1" Open="PopOverIsVisible" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudStack Spacing="1">
                @foreach (var item in TemplatesList)
                {
                    <MudButton Class="d-flex flex-grow-1" Variant="Variant.Text" EndIcon="@CreateDefaultIcon(item)" OnClick="() => SetSelectedTemplate(item)">
                        <MudText Typo="Typo.subtitle2">@item.Name</MudText>
                    </MudButton>
                }
            </MudStack>
        </MudPopover>
    </div>
    <MudIconButton Icon="@CreateDefaultIcon(SelectedTemplate)" Style="height: 40px; width: 40px;" OnClick="SetSelectedSettingsAsDefault" />
    
</div>
@code {
    [Parameter] public EventCallback<ReportTemplateDto> SelectedTemplateChanged { get; set; }
    [Inject] public required IStringLocalizer<ReportTemplatePicker> Localizer { get; set; }
    [Inject] public required IReportTemplateService TemplateService { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    

    private ReportTemplateDto? _selectedTemplate;

    public ReportTemplateDto? SelectedTemplate
    {
        get => _selectedTemplate; set
        {
            _selectedTemplate = value;
            SelectedTemplateChanged.InvokeAsync(value);
        }
    }
    public bool PopOverIsVisible { get; set; } = false;
    public ICollection<ReportTemplateDto> TemplatesList { get; set; } = new List<ReportTemplateDto>();
    public ReportTemplateDto? DefaultTemplate { get; set; } = null;

    public string CreateDefaultIcon(ReportTemplateDto? template)
    {
        if(IsDefault(template))
        {
            return Icons.Material.Sharp.Star;
        }
        else
        {
            return Icons.Material.Sharp.StarBorder;
        }
    }
    public string CreateSelectorClass()
    {
        if (SelectedTemplate is not null)
        {
            return "d-flex mb-1 pa-0 border-solid border-b align-content-center";
        }
        else
        {
            return "d-flex mb-1 pa-0 border-solid border-b-2 mud-border-error align-content-center";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshEntireComponent();
    }
    /// <summary>
    /// Refreshing all the data from the backend and trigger StateHasChanged()
    /// </summary>
    /// <returns></returns>
    public async Task RefreshEntireComponent()
    {
        await SetListAsync();
        await SetDefaultAsync();
        SelectedTemplate = DefaultTemplate;
        PopOverIsVisible = false;
        StateHasChanged();
    }
    public async Task SetListAsync()
    {
        try
        {
            TemplatesList = await TemplateService.GetAllAsync();
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Misslyckades att hämta rapportmallar"], Severity.Error);
        }
    }
    public async Task SetDefaultAsync()
    {
        try
        {
            DefaultTemplate = await TemplateService.GetDefaultAsync();
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Ingen standardmall hittades"], Severity.Warning);
        }
    }
    /// <summary>
    /// Sets SelectedSettings and trigger StateHasChanged
    /// Will also close popover
    /// </summary>
    /// <param name="template"></param>
    public void SetSelectedTemplate(ReportTemplateDto? template)
    {
        SelectedTemplate = template;
        PopOverIsVisible = false;
        StateHasChanged();
    }
    public async Task SetSelectedSettingsAsDefault()
    {
        try
        {
            await TemplateService.SetAsDefaultAsync(SelectedTemplate);
        }
        catch (Exception)
        {
            Snackbar.Add(Localizer[$"Misslyckades att spara vald mall som standard"], Severity.Error);
        }
        await RefreshEntireComponent();
    }

    public bool IsDefault(ReportTemplateDto? template)
    {
        if (DefaultTemplate is null || template is null) return false;

        return template.Id == DefaultTemplate.Id;
    }

}
