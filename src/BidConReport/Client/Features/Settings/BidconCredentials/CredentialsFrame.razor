@using Client.Features.Settings.BidconSettings.BicdonCredentials;
@using SharedLibrary.DTOs.BidconAccess;


    

<ExpansionFrame Style="position: relative; background-color: var(--mud-palette-background)">
    <TitleContent>
        <div class="d-flex">
            <MudText Typo="Typo.h6" Class="py-2 px-4" Style="color: var(--mud-palette-text-primary)">@Localizer["Databas"]</MudText>
            <MudSpacer />
            <MudTooltip Text="@Localizer["Hämta från Bidcons .config fil"]">
            <MudFileUpload T="IBrowserFile" Accept=".config" OnFilesChanged="(FileChanged)" Class="my-auto">
                <ButtonTemplate>
                    <MudIconButton HtmlTag="label"
                                    Variant="Variant.Text"
                                    Color="Color.Primary"
                                    for="@context"
                                    Icon="@Icons.Material.Sharp.UploadFile"
                                    Style="height: 45px; width: 45px;" />
                </ButtonTemplate>
            </MudFileUpload>
            </MudTooltip>
        </div>
    </TitleContent>

    <ChildContent>


        <MudOverlay DarkBackground="true" Absolute="true" Visible="IsLoading">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
        </MudOverlay>

        <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-4">

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Servernamn"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="Server" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(Server), x)"/>
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Databasnamn"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="Database" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(Database), x)" />
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Användare"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="User" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(User), x)" />
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Krypterat lösenord"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="PasswordHash" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(PasswordHash), x)" />
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2"Style="color: var(--mud-palette-text-primary)">@Localizer["Senast uppdaterad:"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Variant="Variant.Outlined" ReadOnly="true" Value="@LastUpdated?.ToString("yyyy-MM-dd HH:mm")"/>
            </MudItem>

            <MudItem xs="12" sm="12" md="12">
                <MudSwitch T="bool" Checked="ServerAuthentication" Label="@Localizer["Server authentication"]" Color="Color.Primary" CheckedChanged="x => UpdateProperty(nameof(ServerAuthentication), x)" />
            </MudItem>

        </MudGrid>

            

    </ChildContent>

</ExpansionFrame>





@code {
    [Inject] public required IStringLocalizer<CredentialsFrame> Localizer { get; set; }
    [Inject] public required IConfigReaderService ConfigReader { get; set; }
    [Inject] public required IBidconCredentialsService CredentialsService { get; set; }
    bool IsLoading = false;

    string Server = string.Empty;
    string Database = string.Empty;
    string User = string.Empty;
    string PasswordHash = string.Empty;
    bool ServerAuthentication;
    DateTime? LastUpdated;

    async Task UpdateProperty(string propertyName, object value)
    {
        switch (propertyName)
        {
            case nameof(Server):
                Server = (string)value;
                break;
            case nameof(Database):
                Database = (string)value;
                break;
            case nameof(User):
                User = (string)value;
                break;
            case nameof(PasswordHash):
                PasswordHash = (string)value;
                break;
            case nameof(ServerAuthentication):
                ServerAuthentication = (bool)value;
                break;
        }
        await SaveValuesAsync(CreateDtoFromValues());
        LastUpdated = DateTime.Now;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshFromBackendAsync();
    }

    async Task FileChanged(InputFileChangeEventArgs args)
    {
        StartLoading();
        var credentials = await ConfigReader.ReadCredentialsAsync(args.File);
        if(credentials is not null)
        {
            await SaveValuesAsync(credentials);
            await RefreshFromBackendAsync();
        }
        EndLoading();
    }  
    async Task RefreshFromBackendAsync()
    {
        StartLoading();
        var credentials = await CredentialsService.GetAsync();
        if (credentials is not null)
        {
            SetValuesFromDto(credentials);
        }
        EndLoading();
    }

    void SetValuesFromDto(BC_DatabaseCredentialsDto credentials)
    {
        Server = credentials.Server;
        Database = credentials.Database;
        User = credentials.User;
        PasswordHash = credentials.PasswordHash;
        ServerAuthentication = credentials.ServerAuthentication;
        LastUpdated = credentials.LastUpdated;
    }
    async Task SaveValuesAsync(BC_DatabaseCredentialsDto credentials)
    {
        await CredentialsService.UpsertAsync(credentials);
    }
    BC_DatabaseCredentialsDto CreateDtoFromValues()
    {
        return new BC_DatabaseCredentialsDto(Server, Database, User, PasswordHash, ServerAuthentication, LastUpdated);
    }
    void StartLoading()
    {
        IsLoading = true;
        StateHasChanged();
    }
    void EndLoading()
    {
        IsLoading = false;
        StateHasChanged();
    }
}
