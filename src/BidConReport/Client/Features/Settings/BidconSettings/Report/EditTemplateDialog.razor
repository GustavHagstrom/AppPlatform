@using BidConReport.Shared.Features.ReportTemplate.Information;
@using BidConReport.Shared.Features.ReportTemplate.Price;
@using BidConReport.Shared.Features.ReportTemplate.Title;

<MudDialog>
    <DialogContent>
        <MudForm Model="Template" @ref="Form" Class="pt-3">
            <div style="overflow-y: auto; height: calc(100vh - 144.5px - 100px);">
             
                <MudTextField Class="mb-4" @bind-Value="Template.Name" Label="@Localizer["Namn"]" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                
                <ReportTemplateSectionOrderer Template="Template" OnEditRequest="EditSection" />

                @*In animations*@
                <div class="border bodred-solid mt-4 pa-4 @(CurrentSection == Template.TitleSection ? "expand" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <TitleSectionEditor Section="Template.TitleSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(CurrentSection == Template.InformationSection ? "expand" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <InformationSectionEditor Section="Template.InformationSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(CurrentSection == Template.PriceSection ? "expand" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <PriceSectionEditor Section="Template.PriceSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(CurrentSection == Template.TableSection ? "expand" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <FontEditor Font="FontProperties.Default" SampleText="@Localizer["Exempeltext"]" />
                </div>

                @*Out animations*@
                <div class="border bodred-solid mt-4 pa-4 @(LastSection == Template.TitleSection ? "minimize" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <TitleSectionEditor Section="Template.TitleSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(LastSection == Template.PriceSection ? "minimize" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <PriceSectionEditor Section="Template.PriceSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(LastSection == Template.InformationSection ? "minimize" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <InformationSectionEditor Section="Template.InformationSection" />
                </div>

                <div class="border bodred-solid mt-4 pa-4 @(LastSection == Template.TableSection ? "minimize" : "d-none")" style="border-color: var(--mud-palette-lines-inputs); overflow-y: auto;">
                    <FontEditor Font="FontProperties.Default" SampleText="@Localizer["Exempeltext"]" />
                </div>

            </div>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <div Class="pr-4 pb-2">
            <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Inherit">@Localizer["Stäng"]</MudButton>
            <MudButton OnClick="SaveAndClose" Variant="Variant.Filled" Color="Color.Success">@Localizer["Spara och stäng"]</MudButton>
        </div>
    </DialogActions>
</MudDialog>


@code{
    [Inject] public required IStringLocalizer<EditTemplateDialog> Localizer { get; set; }
    [CascadingParameter] public required MudDialogInstance MudDialog { get; set; }
    [Parameter, EditorRequired] public required ReportTemplate Template { get; set; }

    private bool OutAnimation { get; set; } = false;
    private IReportTemplateSection? CurrentSection { get; set; }
    private IReportTemplateSection? LastSection { get; set; }

    public MudForm? Form { get; set; }


    string CreateEditCss(IReportTemplateSection? section)
    {
        if (section == CurrentSection)
        {
            return "expand";
        }
        if (section == LastSection)
        {
            return "minimize";
        }
        return "d-none";
    }

    void SaveAndClose()
    {
        Form!.Validate();
        if(Form!.IsValid)
        {
            MudDialog.Close();
        }
    }
    void Cancel() => MudDialog.Cancel();

    void EditSection(IReportTemplateSection section)
    {
        if(section == CurrentSection)
        {
            return;
        }
        LastSection = CurrentSection;
        CurrentSection = section;

        //if(CurrentSection is null)
        //{
        //    OutAnimation = false;
        //    CurrentSection = section;
        //    StateHasChanged();
        //}
        //else if(CurrentSection != section)
        //{
        //    OutAnimation = true;
        //    StateHasChanged();
        //    InvokeAsync(() =>
        //    {
        //        Task.Delay(200).ContinueWith(_ =>
        //        {
        //            OutAnimation = false;
        //            CurrentSection = section;
        //            StateHasChanged();
        //        });
        //    });
        //}
    }


}