<div>
    <div class="d-flex gap-1 align-content-end" style="height: 45px;">
        <MudTextField @bind-Value="Font.FontFamily" Placeholder="@Localizer["Teckensnitt"]" Variant="Variant.Outlined" Margin="Margin.Dense" Style="margin: 0;" For="() => Font.FontFamily" />
        <MudTextField @bind-Value="Font.FontSize" Placeholder="@Localizer["Storlek"]" Variant="Variant.Outlined" Margin="Margin.Dense" Style="width: 55px; margin: 0;" For="() => Font.FontSize" />

        <MudToggleIconButton @bind-Toggled="Font.Bold" Class="pa-2 border border-solid" Variant="Variant.Filled"
                             Style="@FormatButtonStyle(Font.Bold)"
                             Icon="@Icons.Material.Sharp.FormatBold"
                             ToggledIcon="@Icons.Material.Sharp.FormatBold" ToggledColor="Color.Primary" />

        <MudToggleIconButton @bind-Toggled="Font.Italic" Class="pa-2 border border-solid" Variant="Variant.Filled"
                             Style="@FormatButtonStyle(Font.Italic)"
                             Icon="@Icons.Material.Sharp.FormatItalic"
                             ToggledIcon="@Icons.Material.Sharp.FormatItalic" ToggledColor="Color.Primary" />

        <MudToggleIconButton @bind-Toggled="Font.Underline" Class="pa-2 border border-solid" Variant="Variant.Filled"
                             Style="@FormatButtonStyle(Font.Underline)"
                             Icon="@Icons.Material.Sharp.FormatUnderlined"
                             ToggledIcon="@Icons.Material.Sharp.FormatUnderlined" ToggledColor="Color.Primary" />
    </div>
    <div>
        <div class="mt-1 py-2 px-4 border border-solid" style="@BuildFontStyle()">@SampleText</div>
    </div>
</div>


@code {
    [Parameter, EditorRequired] public required FontPropertiesDTO Font { get; set; }
    [Parameter, EditorRequired] public string SampleText { get; set; } = string.Empty;
    [Inject] public required IStringLocalizer<FontEditor> Localizer { get; set; }

    string BuildFontStyle()
    {
        var builder = new System.Text.StringBuilder($"max-width: 100%; overflow-x: hidden; border-color: var(--mud-palette-lines-inputs); font-family: {Font.FontFamily}; font-size: {Font.FontSize}px; ");
        if (Font.Bold)
        {
            builder.Append("font-weight: bold; ");
        }
        if (Font.Italic)
        {
            builder.Append("font-style: italic; ");
        }
        if (Font.Underline)
        {
            builder.Append("text-decoration-line: underline; ");
        }
        return builder.ToString();
    }
    void OnFontFamilyChanged(string value)
    {
        Font.FontFamily = value;
    }
    string FormatButtonStyle(bool isToggled)
    {
        if(isToggled)
        {
            return "box-shadow: initial; border-color: var(--mud-palette-lines-inputs); height: 40px; width: 40px; margin-top: 3px; margin-bottom: 2px;";
        }
        return "box-shadow: initial; border-color: var(--mud-palette-lines-inputs); height: 40px; width: 40px; margin-top: 3px; margin-bottom: 2px; background-color: var(--mud-palette-background)";
    }
}
