<div class="border border-solid">
    <div class="border-b border-solid d-flex py-2 px-4">
        <MudText Typo="Typo.h6" Class="pr-4 d-flex flex-grow-1" Style="color: var(--mud-palette-text-primary)">@Localizer["Informationsposter"]</MudText>
        <MudIconButton Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="AddNewItem" />
    </div>
    <table class="table-row-border">
        @foreach (var item in ItemsInOrder)
        {
            <tr>

                <td style="width: 100%">
                    <ExpansionFrame Class="px-2 py-1" Border="false" IconCollapsed="@Icons.Material.Sharp.Edit" IconExpanded="@Icons.Material.Sharp.Edit" IconHeight="30px" IconWidth="30px">
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Class="d-flex align-center flex-grow-1" Typo="Typo.subtitle2">@item.Title</MudText>
                                <div class="d-flex">
                                    <MudIconButton Class="my-auto" Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ItemsInOrder.First() == item" OnClick="() => MoveUp(item)" />
                                    <MudIconButton Class="my-auto" Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ItemsInOrder.Last() == item" OnClick="() => MoveDown(item)" />
                                    <MudIconButton Class="my-auto" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" Style="height:30px; width: 30px;" OnClick="(async () => await Delete(item))" />
                                </div>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="pa-2 d-flex flex-column gap-2">
                                <MudTextField @bind-Value="@item.Title" Variant="Variant.Outlined" Margin="Margin.Dense" Label="@Localizer["Rubrik"]" For="(() => item.Title)">@item.Title</MudTextField>
                                <MudTextField Class="" @bind-Value="@item.ValueCode" Variant="Variant.Outlined" Margin="Margin.Dense" Label="@Localizer["Data"]"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Sharp.AddLink" AdornmentColor="Color.Primary"
                                              OnAdornmentClick="(async () => await AddPlaceholder(item))" For="(() => item.ValueCode)"/>
                            </div>
                        </ChildContent>
                    </ExpansionFrame>
                    
                </td>
            </tr>
        }
    </table>
</div>
@code {
    [Parameter, EditorRequired] public required List<InformationItem> InformationItems { get; set; }
    [Inject] public required IStringLocalizer<InformationItemList> Localizer { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    private IEnumerable<InformationItem> ItemsInOrder => InformationItems.OrderBy(x => x.Order);


    async Task AddLinkToItem(InformationItem item)
    {
        item.ValueCode += await GetPlaceholderFromDialog();
    }
    async Task<string> GetPlaceholderFromDialog()
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraSmall,
                CloseButton = true,
                NoHeader = false,
            };
        var dialog = await DialogService.ShowAsync<EstimationPlaceholderSelectorDialog>(Localizer["Välj"], options);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            return result.Data.ToString()!;
        }
        return string.Empty;

    }
    void AddNewItem()
    {
        InformationItems.Add(new InformationItem
        {
            Title = Localizer["Ny rubrik"],
            Order = InformationItems.Count,
        });
    }
    async Task Delete(InformationItem item)
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraSmall,
            CloseButton = true,
            NoHeader = false,
        };
        var parameters = new DialogParameters();
        parameters.Add(nameof(YesNoDialog.Info), Localizer["Vill du ta bort "] + $"{item.Title}?");
        var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Ta bort"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            InformationItems.Remove(item);
        }
    }
    async Task AddPlaceholder(InformationItem item)
    {
        item.ValueCode += await GetPlaceholderFromDialog();
    }
    void MoveUp(InformationItem item)
    {
        var orderedList = ItemsInOrder.ToList();
        SwapOrder(item, orderedList[orderedList.IndexOf(item) - 1]);
    }
    void MoveDown(InformationItem item)
    {
        var orderedList = ItemsInOrder.ToList();
        SwapOrder(item, orderedList[orderedList.IndexOf(item) + 1]);
    }
    void SwapOrder(InformationItem item1, InformationItem item2)
    {
        var temp = item1.Order;
        item1.Order = item2.Order;
        item2.Order = temp;
    }
}
