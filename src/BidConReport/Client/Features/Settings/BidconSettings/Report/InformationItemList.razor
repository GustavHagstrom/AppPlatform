<div class="border border-solid" style="border-color: var(--mud-palette-lines-inputs);">
    <div class="border-b border-solid d-flex py-2 px-4" style="border-color: var(--mud-palette-lines-inputs);">
        <MudText Typo="Typo.h6" Class="pr-4" Style="color: var(--mud-palette-text-primary)">@Localizer["Informationsposter"]</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="AddNewItem" />
    </div>
    <table class="striped" style="width: 100%; min-height: 46px;">
        @foreach (var item in ItemsInOrder)
        {
            <tr class="d-flex">

                <td class="py-2 px-4" style="width: 100%">

                    <div class="d-flex">
                        <MudText Class="d-flex align-center flex-grow-1" Typo="Typo.subtitle2">@item.Title</MudText>
                        <div class="d-flex">
                            <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ItemsInOrder.First() == item" OnClick="() => MoveUp(item)" />
                            <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ItemsInOrder.Last() == item" OnClick="() => MoveDown(item)" />
                            <MudIconButton Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" Style="height:30px; width: 30px;" OnClick="(async () => await Delete(item))" />
                            <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="(() => Edit(item))" />
                        </div>
                    </div>


                    <MudCollapse Expanded="item == CurrentUsedItem">
                        <div class="pa-2">
                            <MudTextField @bind-Value="@item.Title" Variant="Variant.Text" Margin="Margin.Dense" Label="@Localizer["Rubrik"]" />
                            <MudTextField Class="" @bind-Value="@item.ValueCode" Variant="Variant.Text" Margin="Margin.Dense" Label="@Localizer["Data"]"
                                            Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Sharp.AddLink" AdornmentColor="Color.Primary"
                                            OnAdornmentClick="(async () => await AddPlaceholder(item))"/>
                        </div>
                    </MudCollapse>
                    
                </td>
            </tr>
        }
    </table>
</div>
@code {
    [Parameter, EditorRequired] public required List<InformationItem> InformationItems { get; set; }
    [Inject] public required IStringLocalizer<InformationItemList> Localizer { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required IReportTemplateService ReportTemplateService { get; set; }
    private IEnumerable<InformationItem> ItemsInOrder => InformationItems.OrderBy(x => x.Order);

    InformationItem? CurrentUsedItem;

    async Task AddLinkToItem(InformationItem item)
    {
        item.ValueCode += await GetPlaceholderFromDialog();
    }
    async Task<string> GetPlaceholderFromDialog()
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraSmall,
                CloseButton = true,
                NoHeader = false,
            };
        var dialog = await DialogService.ShowAsync<EstimationPlaceholderSelectorDialog>(Localizer["Välj"], options);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            return result.Data.ToString()!;
        }
        return string.Empty;

    }
    void AddNewItem()
    {
        InformationItems.Add(new InformationItem
            {
                Title = Localizer["Ny rubrik"],
                Order = InformationItems.Count,
    });
        StateHasChanged();
    }
    async Task Delete(InformationItem item)
    {
        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.ExtraSmall,
            CloseButton = true,
            NoHeader = false,
        };
        var parameters = new DialogParameters();
        parameters.Add(nameof(YesNoDialog.Info), Localizer["Vill du ta bort "] + $"{item.Title}?");
        var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Ta bort"], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            InformationItems.Remove(item);
        }
    }
    void Edit(InformationItem item)
    {
        if(item == CurrentUsedItem)
        {
            CurrentUsedItem = null;
        }
        else
        {
            CurrentUsedItem = item;
        }        
    }
    async Task AddPlaceholder(InformationItem item)
    {
        item.ValueCode += await GetPlaceholderFromDialog();
    }
    void MoveUp(InformationItem item)
    {
        var orderedList = ItemsInOrder.ToList();
        SwapOrder(item, orderedList[orderedList.IndexOf(item) - 1]);
    }
    void MoveDown(InformationItem item)
    {
        var orderedList = ItemsInOrder.ToList();
        SwapOrder(item, orderedList[orderedList.IndexOf(item) + 1]);
    }
    void SwapOrder(InformationItem item1, InformationItem item2)
    {
        var temp = item1.Order;
        item1.Order = item2.Order;
        item2.Order = temp;
        //CurrentUsedItem = null;
    }
}
