@using BidConReport.Shared.Features.ReportTemplate.Information;
@using SharedPlatformLibrary.Features.Placeholder;

@*<MudList Class="border border-solid" Style="border-color: var(--mud-palette-lines-inputs);" Clickable="true" DisableGutters="true" Dense="true" DisablePadding="true">
    <MudListSubheader Class="border-b pa-2 d-flex" Style="border-color: var(--mud-palette-lines-default)">
        <MudText Typo="Typo.h6" Class="pr-4" Style="color: var(--mud-palette-text-primary)">@Localizer["Informationsposter"]</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="AddNewItem"/>
    </MudListSubheader>
    @foreach (var item in InformationItems)
    {
        <MudListItem Text="@item.Title" Class="px-2">
            <NestedList>
                <MudStack Spacing="2" Class="pa-2 border-y border-solid" Style="border-color: var(--mud-palette-lines-inputs);">
                    <MudTextField @bind-Value="item.Title" Label="@Localizer["Rubrik"]" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <div class="d-flex align-center">
                        <MudTextField Class="flex-grow-1" @bind-Value="item.ValueCode" Label="@Localizer["Värde"]" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        <MudIconButton Icon="@Icons.Material.Sharp.AddLink" Color="Color.Primary" Class="ml-3" Style="height: 40px; width: 40px;" Variant="Variant.Outlined" OnClick="() => AddLinkToItem(item)" />
                    </div>
                </MudStack>
            </NestedList>
        </MudListItem>
    }
</MudList>*@

<div class="border border-solid" style="border-color: var(--mud-palette-lines-inputs);">
    <div class="border-b border-solid d-flex py-2 px-4" style="border-color: var(--mud-palette-lines-inputs);">
        <MudText Typo="Typo.h6" Class="pr-4" Style="color: var(--mud-palette-text-primary)">@Localizer["Informationsposter"]</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="AddNewItem" />
    </div>
    <table class="striped" style="width: 100%;">
        @foreach (var item in InformationItems)
        {
            <tr class="d-flex px-4">
                <td class="d-flex flex-grow-1 align-center">
                    <MudText Typo="Typo.subtitle2">@item.Title</MudText>
                </td>
                <td>
                    <div class="d-flex">
                        <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Style="height:30px; width: 30px;" />
                        <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Style="height:30px; width: 30px;" />
                        <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" Style="height:30px; width: 30px;" />
                    </div>
                </td>
            </tr>
        }
    </table>
</div>
@code {
    [Parameter, EditorRequired] public required ICollection<InformationItem> InformationItems { get; set; }
    [Inject] public required IStringLocalizer<InformationItemList> Localizer { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }

    async Task AddLinkToItem(InformationItem item)
    {
        item.ValueCode += await GetValueCodeFromDialog();
    }
    async Task<string> GetValueCodeFromDialog()
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraSmall,
                CloseButton = true,
                NoHeader = false,
            };
        var dialog = await DialogService.ShowAsync<EstimationPlaceholderSelectorDialog>(Localizer["Välj"], options);
        var result = await dialog.Result;
        if(!result.Canceled)
        {
            return result.Data.ToString()!;
        }
        return string.Empty;

    }
    void AddNewItem()
    {
        InformationItems.Add(new InformationItem());
        StateHasChanged();
    }
}
