@using BidConReport.Shared.Features.ReportTemplate.Information;
@using BidConReport.Shared.Features.ReportTemplate.Price;
@using BidConReport.Shared.Features.ReportTemplate.Table;
@using BidConReport.Shared.Features.ReportTemplate.Title;

<table style="width: 100%; border-color: var(--mud-palette-lines-inputs);" class="border boder-solid py-2 px-4">
    @foreach (var section in Template.SectionsInOrder)
    {
        <tr class="d-flex">
            <td class="d-flex flex-grow-1 align-center">
                <MudText Typo="Typo.subtitle2">@GetSectionName(section)</MudText>
            </td>
            <td>
                <div class="d-flex">
                    <MudSwitch @bind-Checked="section.IsEnabled" Color="Color.Primary"/>
                    <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="IsFirst(section)" OnClick="() => MoveUp(section)"/>
                    <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="IsLast(section)" OnClick="() => MoveDown(section)" />
                    <MudIconButton Icon="@Icons.Material.Sharp.Edit" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="async () => await OnEditRequest.InvokeAsync(section)"/>
                </div>
            </td>
        </tr>
    }
</table>

@code {
    [Parameter] public EventCallback<IReportTemplateSection> OnEditRequest { get; set; }
    [Parameter, EditorRequired] public required ReportTemplate Template { get; set; }
    [Inject] public required IStringLocalizer<ReportTemplateSectionOrderer> Localizer { get; set; }

    private string GetSectionName(IReportTemplateSection section)
    {
        if (section is TitleSection) return Localizer["Titel"];
        if (section is InformationSection) return Localizer["Allmän info"];
        if (section is PriceSection) return Localizer["Prissummering"];
        if (section is TableSection) return Localizer["Tabell"];

        throw new Exception("Pattern matching failed");
    }
    private bool IsFirst(IReportTemplateSection section)
    {
        return Template.SectionsInOrder.First() == section;
    }
    private bool IsLast(IReportTemplateSection section)
    {
        return Template.SectionsInOrder.Last() == section;
    }
    private void MoveUp(IReportTemplateSection section)
    {
        var index = GetIndex(section);
        //var array = Template.SectionsInOrder.ToArray();
        var otherSection = Template.SectionsInOrder.ElementAt(index - 1);
        var tempValue = otherSection.LayoutOrder;
        otherSection.LayoutOrder = section.LayoutOrder;
        section.LayoutOrder = tempValue;
        StateHasChanged();
    }
    private void MoveDown(IReportTemplateSection section)
    {
        var index = GetIndex(section);
        //var array = Template.SectionsInOrder.ToArray();
        var otherSection = Template.SectionsInOrder.ElementAt(index + 1);
        var tempValue = otherSection.LayoutOrder;
        otherSection.LayoutOrder = section.LayoutOrder;
        section.LayoutOrder = tempValue;
        StateHasChanged();
    }
    private int GetIndex(IReportTemplateSection section)
    {
        var index = Template.SectionsInOrder
            .Select((x, i) => new { Index = i, Section = x })
            .Where(item => item.Section == section)
            .Single()
            .Index;
        return index;
    }
}
