<ExpansionFrame TitleText="@Localizer["Sektioner"]">
    <table class="table-row-border">
        
        @foreach (var section in Template.SectionsInOrder)
        {
            <tr>
                <td class="px-2">
                    <ExpansionFrame Style="width: 100%" IconCollapsed="@Icons.Material.Sharp.Edit" IconExpanded="@Icons.Material.Sharp.Edit" IconHeight="30px" IconWidth="30px" Border="false" Expanded="false">
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Class="flex-grow-1 d-flex align-center" Typo="Typo.subtitle1">@GetSectionName(section)</MudText>
                                <MudSwitch @bind-Checked="section.IsEnabled" Color="Color.Primary" Style="margin: 0; margin-inline: 0;" />
                                <MudIconButton Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Class="my-auto" Style="height:30px; width: 30px;" Disabled="IsFirst(section)" OnClick="() => MoveUp(section)" />
                                <MudIconButton Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Class="my-auto" Style="height:30px; width: 30px;" Disabled="IsLast(section)" OnClick="() => MoveDown(section)" />

                            </div>
                        </TitleContent>
                        <ChildContent>
                            @if (section is TitleSection)
                            {
                                <TitleSectionEditor Section="Template.TitleSection" />
                            }
                            @if (section is InformationSection)
                            {
                                <InformationSectionEditor Section="Template.InformationSection" />
                            }
                            @if (section is PriceSection)
                            {
                                <PriceSectionEditor Section="Template.PriceSection" />
                            }
                            @if (section is TableSection)
                            {
                                <TableSectionEditor Section="Template.TableSection" />
                            }
                        </ChildContent>
                    </ExpansionFrame>
                </td>
            </tr>         
        }
    </table>
</ExpansionFrame>


@code {
    [Parameter] public EventCallback<IReportTemplateSection> OnEditRequest { get; set; }
    [Parameter, EditorRequired] public required ReportTemplate Template { get; set; }
    [Inject] public required IStringLocalizer<ReportTemplateSectionOrderer> Localizer { get; set; }

    private string GetSectionName(IReportTemplateSection section)
    {
        if (section is TitleSection) return Localizer["Titel"];
        if (section is InformationSection) return Localizer["Allmän info"];
        if (section is PriceSection) return Localizer["Prissummering"];
        if (section is TableSection) return Localizer["Tabell"];

        throw new Exception("Pattern matching failed");
    }
    private bool IsFirst(IReportTemplateSection section)
    {
        return Template.SectionsInOrder.First() == section;
    }
    private bool IsLast(IReportTemplateSection section)
    {
        return Template.SectionsInOrder.Last() == section;
    }
    private void MoveUp(IReportTemplateSection section)
    {
        var index = GetIndex(section);
        var otherSection = Template.SectionsInOrder.ElementAt(index - 1);
        var tempValue = otherSection.LayoutOrder;
        otherSection.LayoutOrder = section.LayoutOrder;
        section.LayoutOrder = tempValue;
        StateHasChanged();
    }
    private void MoveDown(IReportTemplateSection section)
    {
        var index = GetIndex(section);
        var otherSection = Template.SectionsInOrder.ElementAt(index + 1);
        var tempValue = otherSection.LayoutOrder;
        otherSection.LayoutOrder = section.LayoutOrder;
        section.LayoutOrder = tempValue;
        StateHasChanged();
    }
    private int GetIndex(IReportTemplateSection section)
    {
        var index = Template.SectionsInOrder
            .Select((x, i) => new { Index = i, Section = x })
            .Where(item => item.Section == section)
            .Single()
            .Index;
        return index;
    }
}
