@using System.Text.Json;

<MudPaper Style="height: 100%" Class="relative">

    <MudOverlay Visible="TemplateList is null" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </MudOverlay>

    <MudList Style="height: 100%; min-width: 100px;" Clickable="true" DisableGutters="true" Dense="true" DisablePadding="true" @bind-SelectedValue="SelectedTemplate">
        <MudListSubheader Class="border-b pa-2 d-flex" Style="border-color: var(--mud-palette-lines-default)">
            <MudText Typo="Typo.h6" Class="pr-4" Style="color: var(--mud-palette-text-primary)">@Localizer["Rapportmallar"]</MudText>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Sharp.Add" Color="Color.Primary" Style="height:30px; width: 30px;" OnClick="CreateNew" />
        </MudListSubheader>
        <table style="height: calc(100% - 49px);" class="striped overflow-y-auto">

        
        </table>
    </MudList>


</MudPaper>

@code {
    [Inject] public required IReportTemplateService TemplateService { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Inject] public required IStringLocalizer<ReportTemplatesList> Localizer { get; set; }


    public ICollection<ReportTemplate>? TemplateList { get; set; }
    public object? SelectedTemplate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }
    public async Task RefreshList()
    {
        TemplateList = null;
        StateHasChanged();
        TemplateList = await TemplateService.GetAllAsync();
        StateHasChanged();
    }
    public async Task CreateNew()
    {
        await OpenEditDialog(new ReportTemplate(), Localizer["Ny"]);
    }
    public async Task EditSelectedTemplate()
    {
        if (SelectedTemplate is not null)
        {
            var clone = JsonSerializer.Deserialize<ReportTemplate>(JsonSerializer.Serialize(SelectedTemplate as ReportTemplate));
            await OpenEditDialog(clone!, Localizer["Redigera"]);
        }
    }
    public async Task OpenEditDialog(ReportTemplate template, string title)
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraSmall,
                CloseButton = true,
                NoHeader = false,
                DisableBackdropClick = true,

            };
        var parameters = new DialogParameters();
        parameters.Add(nameof(EditTemplateDialog.Template), template);
        var dialog = await DialogService.ShowAsync<EditTemplateDialog>(title, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await TemplateService.UpsertAsync(template!);
            await RefreshList();
        }
    }
    public async Task DeleteSelectedTemplate()
    {
        if (SelectedTemplate is not null && SelectedTemplate is ReportTemplate template)
        {
            if (await ConfirmDelete(template))
            {
                await TemplateService.DeleteAsync(template.Id);
                await RefreshList();
            }
        }

    }
    public async Task<bool> ConfirmDelete(ReportTemplate template)
    {
        var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Small,
                CloseButton = true,
                NoHeader = false,
                DisableBackdropClick = false,

            };
        var parameters = new DialogParameters();
        parameters.Add(nameof(YesNoDialog.Info), $"{Localizer["Vill du ta bort"]} \"{template.Name}\"?");
        var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Ta bort"], parameters, options);
        var result = await dialog.Result;
        return !result.Canceled;
    }
}
