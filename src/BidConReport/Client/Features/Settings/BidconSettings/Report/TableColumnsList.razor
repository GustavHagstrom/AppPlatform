<ExpansionFrame TitleText="@Localizer["Kolumner"]">
    <table class="table-row-border">
        @foreach (var column in ColumnsInOrder)
        {
            <tr>

                <td style="width: 100%">
                    <ExpansionFrame Border="false" IconCollapsed="@Icons.Material.Sharp.Edit" IconExpanded="@Icons.Material.Sharp.Edit" IconHeight="30px" IconWidth="30px" TitleClass="px-2" UnderlinedTitle="false">
                        <TitleContent>
                            <div class="d-flex">
                                <MudText Class="d-flex align-center flex-grow-1" Typo="Typo.subtitle2">@ColumnNameMap[column.DataSource]</MudText>
                                <div class="d-flex">
                                    <MudSwitch @bind-Checked="column.IsActive" Color="Color.Primary" Style="margin: 0; margin-inline: 0;" />
                                    <MudIconButton Class="my-auto" Icon="@Icons.Material.Sharp.ArrowUpward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ColumnsInOrder.First() == column" OnClick="() => MoveUp(column)" />
                                    <MudIconButton Class="my-auto" Icon="@Icons.Material.Sharp.ArrowDownward" Color="Color.Primary" Style="height:30px; width: 30px;" Disabled="ColumnsInOrder.Last() == column" OnClick="() => MoveDown(column)" />
                                </div>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <div class="pa-2 d-flex flex-column gap-2">
                                <MudTextField @bind-Value="@column.ColumnHeader" For="() => column.ColumnHeader" Variant="Variant.Outlined" Margin="Margin.Dense" Label="@Localizer["Kolumnrubrik"]" />
                                <MudTextField @bind-Value="@column.Width" For="() => column.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Label="@Localizer["Bredd"]" />
                            </div>
                        </ChildContent>
                    </ExpansionFrame>

                </td>
            </tr>
        }
    </table>
</ExpansionFrame>


@code {
    [Parameter, EditorRequired] public required ICollection<ColumnDefinitionDTO> ColumnList { get; set; }
    [Inject] public required IStringLocalizer<TableColumnsList> Localizer { get; set; }

    private Dictionary<ColumnDataSource, string> ColumnNameMap => new()
    {
        { ColumnDataSource.Name, Localizer["Namn"] },
        { ColumnDataSource.RowNumber, Localizer["Radnummer"] },
        { ColumnDataSource.DisplayedQuantity, Localizer["Mängd exkl dolda"] },
        { ColumnDataSource.Quantity, Localizer["Mängd inkl dolda"] },
        { ColumnDataSource.DisplayedUnit, Localizer["Enhet exkl dolda"] },
        { ColumnDataSource.Unit, Localizer["Enhet inkl dolda"] },
        { ColumnDataSource.Comment, Localizer["Kommentar"] },

    };
    private IEnumerable<ColumnDefinitionDTO> ColumnsInOrder => ColumnList.OrderBy(x => x.Order);

    void MoveUp(ColumnDefinitionDTO column)
    {
        var orderedList = ColumnsInOrder.ToList();
        SwapOrder(column, orderedList[orderedList.IndexOf(column) - 1]);
    }
    void MoveDown(ColumnDefinitionDTO column)
    {
        var orderedList = ColumnsInOrder.ToList();
        SwapOrder(column, orderedList[orderedList.IndexOf(column) + 1]);
    }
    void SwapOrder(ColumnDefinitionDTO column1, ColumnDefinitionDTO column2)
    {
        var temp = column1.Order;
        column1.Order = column2.Order;
        column2.Order = temp;
    }
}
