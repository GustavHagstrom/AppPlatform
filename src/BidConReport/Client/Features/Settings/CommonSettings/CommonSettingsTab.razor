<PageTab HeaderStartIcon="@Icons.Material.Sharp.Person" HeaderText="@Localizer["Allmänt"]" HeaderTooltip="@Localizer["Allmänt"]" Class="pa-4">
    <MudContainer MaxWidth="MaxWidth.Large" Style="height: 100%">
        <MudPaper Style="height: 100%" Class="pa-4 relative">
            <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true"/>
            </MudOverlay>
            <MudGrid Justify="Justify.FlexStart" Spacing="2">
                <MudItem xs="12">
                    <MudSwitch Checked="IsDarkMode" CheckedChanged="@(async (bool value) => await OnDarkModeChanged(value))" Color="Color.Primary" Label="@Localizer["Mörkts tema"]" />
                </MudItem>
               @* <MudItem xs="12">
                    <DefaultImortSettingsSelector IsLoadingChanged="(x) => OnLoadingChanged(() => IsLoadingImportSettings = x)" />
                </MudItem>
                <MudItem xs="12">
                    <DefaultReportTemplateSelector IsLoadingChanged="(x) => OnLoadingChanged(() => IsLoadingReportTemplates = x)" />
                </MudItem>
                <MudItem xs="12">
                    <OrganizationControl IsLoadingChanged="(x) => OnLoadingChanged(() => IsLoadingOrganizations = x)" />
                </MudItem>*@
            </MudGrid>
        </MudPaper>
    </MudContainer>
</PageTab>
@code {
    [Inject] public required IStringLocalizer<CommonSettingsTab> Localizer { get; set; }
    [Inject] public required IDarkModeService DarkModeService { get; set; }
    [CascadingParameter(Name = "DarkModeAction")] public required Action<bool> DarkModeAction { get; set; }

    bool IsLoading => IsLoadingDarkMode;// || IsLoadingImportSettings || IsLoadingReportTemplates || IsLoadingOrganizations;
    bool IsDarkMode { get; set; } = false;

    public bool IsLoadingDarkMode { get; set; } = true;
    public bool IsLoadingImportSettings { get; set; } = true;
    public bool IsLoadingReportTemplates { get; set; } = true;
    public bool IsLoadingOrganizations { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsDarkMode = await DarkModeService.GetUserDarkModeSettingAsync();
        IsLoadingDarkMode = false;
    }
    public async Task OnDarkModeChanged(bool isDarkMode)
    {
        IsDarkMode = isDarkMode;
        DarkModeAction.Invoke(isDarkMode);
        await DarkModeService.SetUserDarkModeSettingAsync(isDarkMode);
    }
    public void OnLoadingChanged(Action onLoadingChanedAction)
    {
        onLoadingChanedAction.Invoke();
        StateHasChanged();
    }
}
