@inherits IsLoadingComponent

<Frame Border="false" UnderlinedTitle="false">
    <TitleContent>
        <MudText Typo="Typo.subtitle1">@Localizer["Förhandsval av rapportmall"]</MudText>
    </TitleContent>
    <ChildContent>
        <MudSelect T="ReportTemplate" Disabled="IsLoading" Dense="true" Variant="Variant.Outlined" Value="DefaultTemplate" ValueChanged="OnProfileChanged" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            @foreach (var item in Templates)
            {
                <MudSelectItem Value="item" />
            }
        </MudSelect>
    </ChildContent>
</Frame>

@*<MudSelect T="ReportTemplate" Disabled="IsLoading" Label="@Localizer["Standard Rapportmall"]" Placeholder="@Localizer["Ej vald"]" Dense="true"
           Variant="Variant.Outlined" Value="DefaultTemplate" ValueChanged="OnProfileChanged" Margin="Margin.Dense" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
    @foreach (var item in Templates)
    {
        <MudSelectItem Value="item"/>
    }
</MudSelect>*@



@code {
    [Inject] public required IStringLocalizer<DefaultReportTemplateSelector> Localizer { get; set; }
    [Inject] public required IReportTemplateService TemplateService { get; set; }
    List<ReportTemplate> Templates { get; set; } = new List<ReportTemplate>();
    ReportTemplate? DefaultTemplate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
    async Task Refresh()
    {
        await SetLoading(true);
        Templates.Clear();
        Templates.AddRange(await TemplateService.GetAllAsync());
        DefaultTemplate = await TemplateService.GetDefaultAsync();
        await SetLoading(false);
    }
    async Task OnProfileChanged(ReportTemplate template)
    {
        DefaultTemplate = template;
        await TemplateService.SetAsDefaultAsync(template);
    }
}
