@using PublicWorkerWasmClient.Authentication.Helpers
@using PublicWorkerWasmClient.Authentication.Services
@using SharedLibrary.Authentication
@using System.Security.Claims

@inject ILoginService LoginService

<MudStack Row="true" Spacing="3">
    <div class="flex-grow-1">
        <MudText Typo="Typo.h6">@($"{ClaimsExtractor.GetFirstName(User!)} {ClaimsExtractor.GetLastName(User!)}")</MudText>
        <MudStack Row="true" Spacing="0">
            <MudIcon Icon="@Icons.Filled.Email" Size="Size.Medium" Color="Color.Primary" />
                <MudText Class="ml-2" Typo="Typo.subtitle2">@ClaimsExtractor.GetEmail(User!)</MudText>
        </MudStack>
        @foreach (var role in ClaimsExtractor.GetRoles(User!))
        {
            <MudStack Row="true" Spacing="0">
                <MudIcon Icon="@Icons.Filled.AdminPanelSettings" Size="Size.Medium" Color="Color.Primary" />
                <MudText Class="ml-2" Typo="Typo.subtitle2">@role</MudText>
            </MudStack>

        }
    </div>
    <MudIconButton Class="align-self-start" Variant="Variant.Filled" Icon="@Icons.Material.Sharp.Logout" Size="Size.Medium" Color="Color.Error" OnClick="Logout" />
</MudStack>

@code{
    [CascadingParameter] private Task<AuthenticationState>? _authenticationState { get; set; }
    [CascadingParameter] private MudTheme? Theme { get; set; }
    [Parameter] public ClaimsPrincipal? User { get; set; }
    [Parameter] public EventCallback OnLogout { get; set; }
    public async Task Logout()
    {
        await LoginService.LogoutAsync();
        await OnLogout.InvokeAsync();
    }
}