// <auto-generated />
using System;
using BidConReport.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BidConReport.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230227202848_estimation")]
    partial class estimation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BidConReport.Shared.Models.Estimation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BidConId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("CostBeforeChanges")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Estimations");
                });

            modelBuilder.Entity("BidConReport.Shared.Models.EstimationImportSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CostBeforeChangesAccount")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CostFactorAccount")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HiddenTag")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NetCostAccount")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SettingsName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("EstimationImportSettings");
                });

            modelBuilder.Entity("BidConReport.Shared.Models.EstimationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ChangedToRowNumber")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DisplayedQuantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayedUnit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid?>("EstimationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EstimationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EstimationId");

                    b.HasIndex("EstimationItemId");

                    b.ToTable("EstimationItem");
                });

            modelBuilder.Entity("BidConReport.Shared.Models.QuickTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("QuickTag");
                });

            modelBuilder.Entity("BidConReport.Shared.Models.SelectionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SelectionTag");
                });

            modelBuilder.Entity("EstimationImportSettingsQuickTag", b =>
                {
                    b.Property<int>("EstimationImportSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("QuickTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationImportSettingsId", "QuickTagsId");

                    b.HasIndex("QuickTagsId");

                    b.ToTable("SettingQuickTags", (string)null);
                });

            modelBuilder.Entity("EstimationImportSettingsSelectionTag", b =>
                {
                    b.Property<int>("EstimationImportSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("SelectionTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationImportSettingsId", "SelectionTagsId");

                    b.HasIndex("SelectionTagsId");

                    b.ToTable("SettingSelectionTags", (string)null);
                });

            modelBuilder.Entity("EstimationItemQuickTag", b =>
                {
                    b.Property<Guid>("EstimationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuickTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationItemId", "QuickTagsId");

                    b.HasIndex("QuickTagsId");

                    b.ToTable("EstimationItemQuickTags", (string)null);
                });

            modelBuilder.Entity("EstimationItemSelectionTag", b =>
                {
                    b.Property<Guid>("EstimationItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SelectionTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationItemId", "SelectionTagsId");

                    b.HasIndex("SelectionTagsId");

                    b.ToTable("EstimationItemSelectionTags", (string)null);
                });

            modelBuilder.Entity("EstimationQuickTag", b =>
                {
                    b.Property<Guid>("EstimationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuickTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationId", "QuickTagsId");

                    b.HasIndex("QuickTagsId");

                    b.ToTable("EstimationQuickTags", (string)null);
                });

            modelBuilder.Entity("EstimationSelectionTag", b =>
                {
                    b.Property<Guid>("EstimationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SelectionTagsId")
                        .HasColumnType("int");

                    b.HasKey("EstimationId", "SelectionTagsId");

                    b.HasIndex("SelectionTagsId");

                    b.ToTable("EstimationSelectionTags", (string)null);
                });

            modelBuilder.Entity("BidConReport.Shared.Models.EstimationItem", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.Estimation", null)
                        .WithMany("Items")
                        .HasForeignKey("EstimationId");

                    b.HasOne("BidConReport.Shared.Models.EstimationItem", null)
                        .WithMany("Items")
                        .HasForeignKey("EstimationItemId");
                });

            modelBuilder.Entity("EstimationImportSettingsQuickTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.EstimationImportSettings", null)
                        .WithMany()
                        .HasForeignKey("EstimationImportSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.QuickTag", null)
                        .WithMany()
                        .HasForeignKey("QuickTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstimationImportSettingsSelectionTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.EstimationImportSettings", null)
                        .WithMany()
                        .HasForeignKey("EstimationImportSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.SelectionTag", null)
                        .WithMany()
                        .HasForeignKey("SelectionTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstimationItemQuickTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.EstimationItem", null)
                        .WithMany()
                        .HasForeignKey("EstimationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.QuickTag", null)
                        .WithMany()
                        .HasForeignKey("QuickTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstimationItemSelectionTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.EstimationItem", null)
                        .WithMany()
                        .HasForeignKey("EstimationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.SelectionTag", null)
                        .WithMany()
                        .HasForeignKey("SelectionTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstimationQuickTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.Estimation", null)
                        .WithMany()
                        .HasForeignKey("EstimationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.QuickTag", null)
                        .WithMany()
                        .HasForeignKey("QuickTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EstimationSelectionTag", b =>
                {
                    b.HasOne("BidConReport.Shared.Models.Estimation", null)
                        .WithMany()
                        .HasForeignKey("EstimationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BidConReport.Shared.Models.SelectionTag", null)
                        .WithMany()
                        .HasForeignKey("SelectionTagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BidConReport.Shared.Models.Estimation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BidConReport.Shared.Models.EstimationItem", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
