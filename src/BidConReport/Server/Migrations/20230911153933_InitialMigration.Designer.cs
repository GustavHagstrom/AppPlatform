// <auto-generated />
using System;
using BidConReport.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BidConReport.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230911153933_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BidConReport.Server.Enteties.BidconCredentials", b =>
                {
                    b.Property<string>("OrganizationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ServerAuthentication")
                        .HasColumnType("bit");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrganizationId");

                    b.ToTable("BidconCredentials");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDarkMode")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LicenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.BidconCredentials", b =>
                {
                    b.HasOne("BidConReport.Server.Enteties.Organization", null)
                        .WithOne("BidconCredentials")
                        .HasForeignKey("BidConReport.Server.Enteties.BidconCredentials", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.License", b =>
                {
                    b.HasOne("BidConReport.Server.Enteties.Organization", "Organization")
                        .WithOne("License")
                        .HasForeignKey("BidConReport.Server.Enteties.License", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.User", b =>
                {
                    b.HasOne("BidConReport.Server.Enteties.License", "License")
                        .WithMany("Users")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BidConReport.Server.Enteties.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.License", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BidConReport.Server.Enteties.Organization", b =>
                {
                    b.Navigation("BidconCredentials");

                    b.Navigation("License");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
