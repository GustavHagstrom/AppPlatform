@using Client.Shared.EstimationViewTemplate.Models;
@using Client.Shared.EstimationViewTemplate.Services;


<MudDialog Class="pa-0 mud-dialog-no-content-padding">

    <DialogContent>
        
        <MudForm @ref="Form" Model="Template" >
            <div class="relative" style="height: 100vh">
                <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
                    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
                </MudOverlay>
                <div class="d-flex" style="height: calc(100% - 50px)">
                    <div class="d-flex" style="height: 100%">
                        @if (!IsLoading)
                        {
                            <MudStack Spacing="2" Justify="Justify.FlexStart">

                                
                                <div>
                                    <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Namn"]</MudText>
                                    <MudTextField T="string" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="Template.Name" />
                                </div>
                                

                                <div class="d-block">
                                    <SectionsList DataSections="Template.DataSections" SheetSections="Template.SheetSections" />
                                </div>
                                

                            </MudStack>
                        }
                    </div>
                    <div class="d-flex flex-grow-1" style="height: 100%; background-color: var(--mud-palette-background-grey)">

                    </div>
                </div>
                

                <div class="d-flex" style="height: 50px;">
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mb-2" OnClick="MudDialog.Cancel">@Localizer["Avbryt"]</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mb-2 mr-4" OnClick="Submit">@Localizer["Spara och stäng"]</MudButton>
                </div>
            </div>
            
        </MudForm>
        
    </DialogContent>
@*     <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mb-2" OnClick="MudDialog.Cancel">@Localizer["Avbryt"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mb-2 mr-4" OnClick="Submit">@Localizer["Spara och stäng"]</MudButton>
    </DialogActions> *@
</MudDialog>

@code {
    [Inject] public required IStringLocalizer<EditTemplateDialog> Localizer { get; set; }
    [Inject] public required IEstimationViewTemplateServices TemplateService { get; set; }
    [CascadingParameter] public required MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid? IdToLoadFrom { get; set; } = null;

    ViewTemplate Template { get; set; } = new() { Name = string.Empty };
    MudForm? Form;
    bool IsLoading = false;

    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if(IdToLoadFrom is not null)
        {
            try
            {
                SetIsLoading(true);
                Template = await TemplateService.GetAsync(IdToLoadFrom.Value);
            }
            catch (Exception)
            {
                //Handle exception
                throw;
            }
            SetIsLoading(false);
        }

    }

    async Task Submit()
    {
        Form?.Validate();
        if(Form?.IsValid == true)
        {
            try
            {
                SetIsLoading(true);
                await TemplateService.UpsertAsync(Template);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception)
            {
                SetIsLoading(false);
                //handle exception
                throw;
            }
        }
        
    }
}