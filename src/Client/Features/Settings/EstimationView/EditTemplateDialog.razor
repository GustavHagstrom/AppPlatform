@using Client.Shared.EstimationViewTemplate.Models;
@using Client.Shared.EstimationViewTemplate.Services;

<MudDialog>

    <DialogContent >
        
        <MudForm @ref="Form" Model="Template" Class="relative">

            <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
                <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>

            @if(!IsLoading)
            {
                <MudGrid Spacing="1" Justify="Justify.FlexStart">

                    <MudItem xs="12" sm="12">
                        <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Namn"]</MudText>
                        <MudTextField T="string" Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="Template.Name" />
                    </MudItem>

                    <MudItem xs="12" sm="12">
                        <SectionsList  DataSections="Template.DataSections" SheetSections="Template.SheetSections"/>
                    </MudItem>

                </MudGrid>
            }

        </MudForm>
        
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" Class="mb-2" OnClick="MudDialog.Cancel">@Localizer["Avbryt"]</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mb-2 mr-4" OnClick="Submit">@Localizer["Spara och stäng"]</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject] public required IStringLocalizer<EditTemplateDialog> Localizer { get; set; }
    [Inject] public required IEstimationViewTemplateServices TemplateService { get; set; }
    [CascadingParameter] public required MudDialogInstance MudDialog { get; set; }
    [Parameter] public Guid? IdToLoadFrom { get; set; } = null;

    ViewTemplate Template { get; set; } = new() { Name = string.Empty };
    MudForm? Form;
    bool IsLoading = false;

    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if(IdToLoadFrom is not null)
        {
            try
            {
                SetIsLoading(true);
                Template = await TemplateService.GetAsync(IdToLoadFrom.Value);
            }
            catch (Exception)
            {
                //Handle exception
                throw;
            }
            SetIsLoading(false);
        }

    }

    async Task Submit()
    {
        Form?.Validate();
        if(Form?.IsValid == true)
        {
            try
            {
                SetIsLoading(true);
                await TemplateService.UpsertAsync(Template);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception)
            {
                SetIsLoading(false);
                //handle exception
                throw;
            }
        }
        
    }
}