@using Client.Shared.EstimationViewTemplate.Models;
@using Client.Shared.EstimationViewTemplate.Models.SectionModels;
@using Client.Shared.EstimationViewTemplate.Services;


<MudForm @ref="Form" Model="Template" Class="@(IsVisible ? VisibleFormClass : HiddenFormClass)" Style="background-color: var(--mud-palette-background-grey);">
    <div class="relative" style="height: 100%">
        <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
            <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
        </MudOverlay>


        @*Toolbar*@
        <MudPaper Style="height: 40px" Elevation="0" Class="border-b border-solid d-flex justify-space-between">

            <div class="d-flex justify-start align-self-stretch" style="width: 33%">
                <MudText Class="my-auto pl-2" Typo="Typo.h6">@Localizer["Redigera"]</MudText>
            </div>

            <div class="d-flex justify-center align-self-stretch" style="width: 33%">
                <MudButton Variant="Variant.Text" Style="min-width: 40px;" Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Sharp.ArrowUpward" />
                </MudButton>
                <MudButton Class="px-2" Variant="Variant.Text" Style="min-width: 40px;" Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Sharp.ArrowDownward" />
                </MudButton>
                <MudMenu Dense="true">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Text" Style="min-width: 40px;" Color="Color.Success">
                            <MudIcon Icon="@Icons.Material.Sharp.Add" />
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>@Localizer["Data sektion"]</MudMenuItem>
                        <MudMenuItem>@Localizer["Tabell sektion"]</MudMenuItem>
                    </ChildContent>
                    
                </MudMenu>
            </div>

            <div class="d-flex justify-end align-self-start" style="width: 33%">
                <MudButton Variant="Variant.Text" Style="min-width: 0;" Color="Color.Success" OnClick="Submit">
                    <MudIcon Icon="@Icons.Material.Sharp.Save" />
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudText Class="pl-2">
                            @Localizer["Spara och stäng"]
                        </MudText>
                    </MudHidden>
                </MudButton>

                <MudButton Variant="Variant.Text" Style="min-width: 0;" Color="Color.Error" Class="pa-2" OnClick="Close">
                    <MudIcon Icon="@Icons.Material.Sharp.Close" />
                </MudButton>
            </div>
            
        </MudPaper>



        <div class="pa-4" style="height: calc(100% - 40px); overflow: auto;">
            <MudPaper Elevation="3" Style="min-height: 200px; width: 794px;" Class="mx-auto">
                @foreach (var section in SectionsInOrder())
                {
                    @if (section is DataSection dataSection)
                    {
                        <DataSectionIllustrator />
                    }
                    @if (section is SheetSection sheetSection)
                    {
                        <SheetSectionIllustator Section="sheetSection" />
                    }
                    <div class="border-b border-solid" />
                }
            </MudPaper>
        </div>




    </div>

</MudForm>


        


@code {
    [Inject] public required IStringLocalizer<EditTemplatePopover> Localizer { get; set; }
    [Inject] public required IEstimationViewTemplateServices TemplateService { get; set; }
    [Parameter, EditorRequired] public required EstimationViewFrameContent ParentComponent { get; set; }

    [Parameter] public EventCallback UpsertSuccefulCallback { get; set; }


    double Scale = 1;
    ViewTemplate Template { get; set; } = new() { Name = string.Empty };
    MudForm? Form;
    bool IsLoading = false;

    bool IsVisible { get; set; } = false;
    string HiddenFormClass = "fullscreen d-none";
    string VisibleFormClass = "fullscreen zoom-in";

    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }

    IEnumerable<IViewSection> SectionsInOrder()
    {
        var sections = ((IEnumerable<IViewSection>)Template.SheetSections)
            .Concat(Template.DataSections)
            .OrderBy(x => x.Order);
        return sections;
    }
    protected override void OnInitialized()
    {
        ParentComponent.ShowPopoverFunction = ShowPopOver;
    }

    async Task ShowPopOver(Guid? id)
    {
        IsVisible = true;
        StateHasChanged();
        await LoadTemplate(id);
    }
    async Task LoadTemplate(Guid? id)
    {
        if (id is not null)
        {
            try
            {
                SetIsLoading(true);
                Template = await TemplateService.GetAsync(id.Value);
            }
            catch (Exception)
            {
                //Handle exception
                throw;
            }
            SetIsLoading(false);
        }
        else
        {
            Template = new() { Name = string.Empty };
        }
    }

    async Task Submit()
    {
        Form?.Validate();
        if(Form?.IsValid == true)
        {
            try
            {
                SetIsLoading(true);
                await TemplateService.UpsertAsync(Template);
                await UpsertSuccefulCallback.InvokeAsync();
                Close();
            }
            catch (Exception)
            {
                SetIsLoading(false);
                //handle exception
                throw;
            }
        }

    }
    void Close()
    {
        IsVisible = false;
        SetIsLoading(false);
    }
}