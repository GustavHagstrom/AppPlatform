@using Client.Features.Settings.EstimationView.Data
@using Client.Features.Settings.EstimationView.Models;
@using Client.Features.Settings.EstimationView.Sheet
@using Client.Shared.EstimationViewTemplate.Models.SectionModels;

<style>
    .section-unselected {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: transparent;
    }

    .section-unselected:hover {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: var(--mud-palette-text-primary);
    }

    .section-selected {
        padding: 2px;
        border: 2px;
        border-style: solid;
        border-color: var(--mud-palette-primary);
    }
    .section{
        transition-property: border-color, background-color;
        transition-duration: 200ms;
    }

    
</style>


<div>
    @foreach (var section in Sections)
    {
        <div class="@RowClass(section)" @onclick="() => Select(section)">
                @if (section is DataSection dataSection)
                {
                    <DataSectionIllustrator />
                }
                @if (section is SheetSection sheetSection)
                {
                    <SheetSectionIllustator Section="sheetSection" Selection="Selection" SelectionChanged="Select" />
                }
            </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public required IEnumerable<IViewSection> Sections { get; set; }
    [Parameter] public SectionSelection? Selection { get; set; }
    [Parameter] public EventCallback<SectionSelection> SelectionChanged { get; set; }

    string RowClass(IViewSection section) => Selection?.Section == section ? "section section-selected" : "section section-unselected";

    void Select(IViewSection? section, ISectionTool? tool = null)
    {
        if(Selection?.Section == section)
        {
            return;
        }
        if(section is null)
        {
            Selection = null;
        }
        else
        {
            Selection = new SectionSelection(section, tool);
        }
        SelectionChanged.InvokeAsync(Selection);
    }
    void Select(SectionSelection selection)
    {
        Selection = selection;
        SelectionChanged.InvokeAsync(selection);
    }
}
