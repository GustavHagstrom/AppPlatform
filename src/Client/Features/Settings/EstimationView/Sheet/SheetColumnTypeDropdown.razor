@using Client.Shared.EstimationViewTemplate.Models;
@using SharedLibrary.Enums.ViewTemplate;
<style>
    .dropdown {
        position: relative;
        display: inline-block;
        padding: 0px;
        border: 1px;
        border-style: solid;
        width: 100px;
    }

    .dropdown-enabled {
        color: var(--mud-palette-text-primary);
        cursor: pointer;
    }

    .dropdown-disabled {
        color: var(--mud-palette-action-disabled);
    }

    .dropdown-enabled:hover {
        background-color: var(--mud-palette-action-default-hover);
    }

    .dropdown-content-inactive{
        display: none;
    }

    .dropdown-content-active {
        display: block;
        position: absolute;
        margin-top: 1px;
        z-index: 1;
        background-color: var(--mud-palette-background);
        box-shadow: var(--mud-elevation-2);
    }
    .dropdown-item{
        padding: 4px 8px 4px 8px;
        cursor: pointer;
    }

    .dropdown-item:hover {
        background-color: var(--mud-palette-action-default-hover);
    }

</style>
<div class="@DropDownClass" style="height: @Height" @onmouseleave="() => IsActive = false">
    @if(Column is not null)
    {
        <div class="pa-1" style="display: flex; align-items: center; height: 100%;" @onclick="() => IsActive = !IsActive">@ColumnTypeNamesMap[Column.ColumnType]</div>
        <div class="@DropDownContentClass" @onclick="() => IsActive = false">
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.Description)">@ColumnTypeNamesMap[SheetColumnType.Description]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.Quantity)">@ColumnTypeNamesMap[SheetColumnType.Quantity]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.Unit)">@ColumnTypeNamesMap[SheetColumnType.Unit]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.UnitCost)">@ColumnTypeNamesMap[SheetColumnType.UnitCost]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.TotalCost)">@ColumnTypeNamesMap[SheetColumnType.TotalCost]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.UnitAskingPrice)">@ColumnTypeNamesMap[SheetColumnType.UnitAskingPrice]</div>
            <div class="dropdown-item" @onclick="() => ColumnTypeSelected(SheetColumnType.TotalAskingPrice)">@ColumnTypeNamesMap[SheetColumnType.TotalAskingPrice]</div>
        </div>
    }
</div>

@code {
    [Inject] public required IStringLocalizer<SheetColumnTypeDropdown> Localizer { get; set; }

    [Parameter, EditorRequired] public required SheetColumn? Column { get; set; }
    [Parameter] public string Height { get; set; } = "30px";

    bool IsActive = false;

    string DropDownClass => $"dropdown {DropDownDisabledClass}";
    string DropDownDisabledClass => Column is null ? "dropdown-disabled" : "dropdown-enabled";

    string DropDownContentClass => IsActive ? $"dropdown-content-active" : $"dropdown-content-inactive";

    Dictionary<SheetColumnType, string> ColumnTypeNamesMap = new();

    protected override void OnInitialized()
    {
        ColumnTypeNamesMap.Add(SheetColumnType.Description, Localizer["Benämning"]);
        ColumnTypeNamesMap.Add(SheetColumnType.Quantity, Localizer["Mängd"]);
        ColumnTypeNamesMap.Add(SheetColumnType.Unit, Localizer["Enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.UnitCost, Localizer["Netto/enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.TotalCost, Localizer["Netto totalt"]);
        ColumnTypeNamesMap.Add(SheetColumnType.UnitAskingPrice, Localizer["Apris/enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.TotalAskingPrice, Localizer["Apris totalt"]);
    }
    void ColumnTypeSelected(SheetColumnType type)
    {
        if(Column is not null)
        {
            Column.ColumnType = type;
        }
    }
}
