@using Client.Shared.EstimationViewTemplate.Models.SectionModels;
@using System.Globalization;

<style>
    .tool-unselected {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: transparent;
    }

    .tool-unselected:hover {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: var(--mud-palette-text-primary);
    }

    .tool-selected {
        padding: 2px;
        border: 2px;
        border-style: solid;
        border-color: var(--mud-palette-primary);
    }

    .tool {
        transition-property: border-color, background-color;
        transition-duration: 200ms;
        display: flex;
        flex-direction: column;
        justify-content: flex-end; 
        cursor: cell;
    }
</style>
<SheetToolbar IsActive="IsSelected" SelectedColumn="SelectedColumn" Section="Section" StateChangeRequest="StateHasChanged" />
<div class="d-flex" style="min-height: 30px">
    
    @foreach (var column in Section.Columns)
    {
        <div @onclick="() => SelectedColumn = column"
             style="@FormatStyle(column)"
             class="@ColumnClass(column)">
            Format
        </div>
    }
</div>


@code {
    [Parameter, EditorRequired] public required SheetSection Section { get; set; }
    [Parameter, EditorRequired] public bool IsSelected { get; set; }

    SheetColumn? SelectedColumn;

    int ColumnWidthSum => Section.Columns.Sum(x => x.WidthPercent);

    string ColumnClass(SheetColumn column) => SelectedColumn == column && IsSelected ? "tool tool-selected" : "tool tool-unselected";

    string WidthPercent(SheetColumn column)
    {
        var widthSum = Section.Columns.Sum(x => x.WidthPercent);
        double percent = (double)column.WidthPercent / (double)widthSum * 100;
        return percent.ToString(CultureInfo.InvariantCulture);
    }
    string FormatStyle(SheetColumn column)
    {
        var verticalAlignment = "vertical-align: bottom;";
        var width = $"width: {WidthPercent(column)}%;";
        var font = $"font-family: {column.CellFormat.FontFamily};";
        var bold = "font-weight: " + (column.CellFormat.Bold ? "bold" : "normal") + ";";
        var italic = column.CellFormat.Italic ? "font-style: italic;" : string.Empty;
        var underline = column.CellFormat.Underline ? "text-decoration: underline;" : string.Empty;
        var alignment = column.CellFormat.Align switch
        {
            SharedLibrary.Enums.ViewTemplate.Align.Left => "text-align: left;",
            SharedLibrary.Enums.ViewTemplate.Align.Center => "text-align: center;",
            SharedLibrary.Enums.ViewTemplate.Align.Right => "text-align: right;",
            _ => string.Empty,
        };
        var fontSize = $"font-size: {(int)(column.CellFormat.FontSize * 1.33)}px;";

        return font + italic + bold + underline + alignment + fontSize + verticalAlignment + width;
    }
}
