@using Client.Features.Settings.EstimationView.Models;
@using Client.Shared.EstimationViewTemplate.Models.SectionModels;
@using System.Globalization;

<style>
    .tool-unselected {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: transparent;
    }

    .tool-unselected:hover {
        padding: 3px;
        border: 1px;
        border-style: solid;
        border-color: var(--mud-palette-text-primary);
    }

    .tool-selected {
        padding: 2px;
        border: 2px;
        border-style: solid;
        border-color: var(--mud-palette-primary);
    }

    .tool {
        transition-property: border-color, background-color;
        transition-duration: 200ms;
    }
</style>

<div class="d-flex" style="min-height: 30px">
    @foreach (var column in Section.Columns)
    {
        <div @onclick="() => Select(column)"
             style="@($"width: {WidthPercent(column)}%")"
             class="@ColumnClass(column)">
            Format
        </div>
    }
</div>


@code {
    [Parameter, EditorRequired] public required SheetSection Section { get; set; }
    [Parameter, EditorRequired] public SectionSelection? Selection { get; set; }
    [Parameter, EditorRequired] public EventCallback<SectionSelection> SelectionChanged { get; set; }



    int ColumnWidthSum => Section.Columns.Sum(x => x.WidthPercent);

    string ColumnClass(SheetColumn column) => Selection?.ActiveTool is SheetColumnTool cTool && cTool.Column == column ? "tool tool-selected" : "tool tool-unselected";

    // string ColumnClass(SheetColumn column)
    // {
    //     if (Selection?.ActiveTool is not null &&
    //         Selection.ActiveTool is SheetColumnTool cTool &&
    //         cTool is not null &&
    //         cTool.Column == column)
    //     {
    //         return "tool tool-selected";
    //     }
    //     return "tool tool-unselected";
    // }

    string WidthPercent(SheetColumn column)
    {
        var widthSum = Section.Columns.Sum(x => x.WidthPercent);
        double percent = (double)column.WidthPercent / (double)widthSum * 100;
        return percent.ToString(CultureInfo.InvariantCulture);
    }
    void Select(SheetColumn column)
    {
        var tool = new SheetColumnTool { Column = column };
        var selection = new SectionSelection(Section, tool);
        SelectionChanged.InvokeAsync(selection);
        StateHasChanged();
    }
}
