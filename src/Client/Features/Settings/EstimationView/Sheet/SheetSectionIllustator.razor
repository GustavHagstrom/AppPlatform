@using System.Globalization;
@using Client.Shared.EstimationViewTemplate.Models;
@using SharedLibrary.Enums.ViewTemplate;

<SheetToolbar IsActive="IsSelected" SelectedColumn="SelectedColumn" SelectedCell="SelectedCell" Section="Section" 
              StateChangeRequest="StateHasChanged" ColumnDeleted="() => {SelectedColumn = null; SelectedCell = null;}" />
<table style="width: 100%; border-collapse: collapse; table-layout: fixed;">
    <tr>

        @foreach (var column in Section.Columns)
        {
            var groupCell = column.Cells.First(x => x.RowType == SheetRowType.Group);
            <td style="@TdStyle(column, groupCell)">
                <div @onclick="() => SetSelection(column, groupCell)"
                     style="@(CellStyle(groupCell))"
                     class="@CellClass(groupCell)">
                    @($"{Localizer["Grupp"]} - {ColumnTypeNamesMap[column.ColumnType]}")
                </div>
            </td>
        }
    </tr>
    <tr>

        @foreach (var column in Section.Columns)
        {
            var partCell = column.Cells.First(x => x.RowType == SheetRowType.Part);
            <td style="@TdStyle(column, partCell)">
                <div @onclick="() => SetSelection(column, partCell)"
                     style="@(CellStyle(partCell))"
                     class="@CellClass(partCell)">
                    @($"{Localizer["Del"]} - {ColumnTypeNamesMap[column.ColumnType]}")
                </div>
            </td>
        }
    </tr>
    <tr>

        @foreach (var column in Section.Columns)
        {
            var postCell = column.Cells.First(x => x.RowType == SheetRowType.Post);
            <td style="@TdStyle(column, postCell)">
                <div @onclick="() => SetSelection(column, postCell)"
                     style="@(CellStyle(postCell))"
                     class="@CellClass(postCell)">
                    @($"{Localizer["Post"]} - {ColumnTypeNamesMap[column.ColumnType]}")
                </div>
            </td>
        }
    </tr>
</table>

@code {
    [Inject] public required IStringLocalizer<SheetSectionIllustator> Localizer { get; set; }
    [Parameter, EditorRequired] public required SheetSection Section { get; set; }
    [Parameter, EditorRequired] public bool IsSelected { get; set; }

    SheetColumn? SelectedColumn;
    SheetCell? SelectedCell;

    int ColumnWidthSum => Section.Columns.Sum(x => x.Width);

    string CellClass(SheetCell column) => SelectedCell == column && IsSelected ? "cell-selected" : "cell-unselected";
    string TdStyle(SheetColumn column, SheetCell cell) => $"{WidthStyle(column)} {BorderColorStyle(cell)}";

    Dictionary<SheetColumnType, string> ColumnTypeNamesMap = new();

    protected override void OnInitialized()
    {
        ColumnTypeNamesMap.Add(SheetColumnType.Description, Localizer["Benämning"]);
        ColumnTypeNamesMap.Add(SheetColumnType.Quantity, Localizer["Mängd"]);
        ColumnTypeNamesMap.Add(SheetColumnType.Unit, Localizer["Enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.UnitCost, Localizer["Netto/enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.TotalCost, Localizer["Netto totalt"]);
        ColumnTypeNamesMap.Add(SheetColumnType.UnitAskingPrice, Localizer["Apris/enhet"]);
        ColumnTypeNamesMap.Add(SheetColumnType.TotalAskingPrice, Localizer["Apris totalt"]);
    }
    void SetSelection(SheetColumn column, SheetCell cell)
    {
        SelectedColumn = column;
        SelectedCell = cell;
    }
    string WidthPercent(SheetColumn column)
    {
        var widthSum = Section.Columns.Sum(x => x.Width);
        double percent = (double)column.Width / (double)widthSum * 100;
        return percent.ToString(CultureInfo.InvariantCulture);
    }
    string WidthStyle(SheetColumn column)
    {
        var width = $"width: {WidthPercent(column)}%;";
        return width;
    }
    string CellStyle(SheetCell cell)
    {
        var verticalAlignment = "vertical-align: bottom;";
        var font = $"font-family: {cell.CellFormat.FontFamily};";
        var bold = "font-weight: " + (cell.CellFormat.Bold ? "bold" : "normal") + ";";
        var italic = cell.CellFormat.Italic ? "font-style: italic;" : string.Empty;
        var underline = cell.CellFormat.Underline ? "text-decoration: underline;" : string.Empty;
        var alignment = cell.CellFormat.Align switch
        {
            SharedLibrary.Enums.ViewTemplate.Align.Left => "text-align: left;",
            SharedLibrary.Enums.ViewTemplate.Align.Center => "text-align: center;",
            SharedLibrary.Enums.ViewTemplate.Align.Right => "text-align: right;",
            _ => string.Empty,
        };
        var fontSize = $"font-size: {(int)(cell.CellFormat.FontSize * 1.33)}px;";

        return font + italic + bold + underline + alignment + fontSize + verticalAlignment;// + borderStyle;// + border + padding;
    }
    string BorderColorStyle(SheetCell Cell)
    {
        var bottom = Cell.CellFormat.BorderBottom ? "border-bottom-color: var(--mud-palette-lines-inputs);" : string.Empty;
        var top = Cell.CellFormat.BorderTop ? "border-top-color: var(--mud-palette-lines-inputs);" : string.Empty;
        var left = Cell.CellFormat.BorderLeft ? "border-left-color: var(--mud-palette-lines-inputs);" : string.Empty;
        var right = Cell.CellFormat.BorderRight ? "border-right-color: var(--mud-palette-lines-inputs);" : string.Empty;
        return bottom + top + left + right;
    }
}
