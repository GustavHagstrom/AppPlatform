@using Client.Shared.EstimationViewTemplate.Models.SectionModels;
<SectionToolbar IsActive="IsActive">
    <div class="d-flex mx-auto" style="gap: 4px">

        
        <div class="d-flex justify-end" style="flex-direction: column;">
            <MudText Typo="Typo.subtitle2">@Localizer["Font"]</MudText>
            <input class="pa-1" style="border: 1px; border-style: solid; width: 100px;" value="@SelectedColumn?.CellFormat.FontFamily" @onchange="FontFamilyInputChanged" disabled="@(SelectedColumn is null)" />
        </div>
        <div class="d-flex justify-end" style="flex-direction: column;">
            <MudText Typo="Typo.subtitle2">@Localizer["Storlek"]</MudText>
            <input class="pa-1" style="border: 1px; border-style: solid; width: 50px;" value="@SelectedColumn?.CellFormat.FontSize" @onchange="FontSizeInputChanged" disabled="@(SelectedColumn is null)" />
        </div>
        <div class="d-flex justify-end" style="flex-direction: column;">
            <MudText Typo="Typo.subtitle2">@Localizer["Bredd"]</MudText>
            <input class="pa-1" style="border: 1px; border-style: solid; width: 50px;" value="@SelectedColumn?.WidthPercent" @onchange="WidthInputChanged" disabled="@(SelectedColumn is null)" />
        </div>

        <div class="d-flex" style="gap: 4px; flex-direction: column;">
            <div class="d-flex flex-grow-1" style="gap: 4px;">
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatAlignLeft" Selected="SelectedColumn?.CellFormat.Align == SharedLibrary.Enums.ViewTemplate.Align.Left" Disabled="SelectedColumn is null"
                                      OnClick="() => SetAlignment(SharedLibrary.Enums.ViewTemplate.Align.Left)" />
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatAlignCenter" Selected="SelectedColumn?.CellFormat.Align == SharedLibrary.Enums.ViewTemplate.Align.Center" Disabled="SelectedColumn is null"
                                      OnClick="() => SetAlignment(SharedLibrary.Enums.ViewTemplate.Align.Center)" />
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatAlignRight" Selected="SelectedColumn?.CellFormat.Align == SharedLibrary.Enums.ViewTemplate.Align.Right" Disabled="SelectedColumn is null"
                                      OnClick="() => SetAlignment(SharedLibrary.Enums.ViewTemplate.Align.Right)" />
            </div>
            <div class="d-flex flex-grow-1" style="gap: 4px;">
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatBold" Selected="SelectedColumn?.CellFormat.Bold == true" Disabled="SelectedColumn is null" OnClick="ToggleBold" />
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatItalic" Selected="SelectedColumn?.CellFormat.Italic == true" Disabled="SelectedColumn is null" OnClick="ToggleItalic" />
                <SectionToolbarButton Icon="@Icons.Material.Sharp.FormatUnderlined" Selected="SelectedColumn?.CellFormat.Underline == true" Disabled="SelectedColumn is null" OnClick="ToggleUnderline" />
            </div>
        </div>

        <div class="d-flex" style="gap: 4px; flex-direction: column;">
            <MudButton Variant="Variant.Text" Style="min-width: 0px;" Color="Color.Error" Disabled="SelectedColumn is null" OnClick="DeleteColumn" Class="pa-1">
                <MudIcon Icon="@Icons.Material.Sharp.Delete" Size="Size.Small" />
            </MudButton>
            <MudButton Variant="Variant.Text" Style="min-width: 0px;" Color="Color.Success" OnClick="AddColumn" Class="pa-1">
                <MudIcon Icon="@Icons.Material.Sharp.Add" Size="Size.Small" />
            </MudButton>
        </div>

        
    </div>
    
</SectionToolbar>
@code {
    [Inject] public required IStringLocalizer<SheetToolbar> Localizer { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }

    [Parameter, EditorRequired] public bool IsActive { get; set; }
    [Parameter, EditorRequired] public SheetColumn? SelectedColumn { get; set; }
    [Parameter, EditorRequired] public required SheetSection Section { get; set; }
    [Parameter, EditorRequired] public EventCallback StateChangeRequest { get; set; }

    void WidthInputChanged(ChangeEventArgs args)
    {
        if (SelectedColumn is not null && args.Value is not null)
        {
            int.TryParse(args.Value as string, out int result);
            SelectedColumn.WidthPercent = result;
            StateChangeRequest.InvokeAsync();
        }
    }
    void FontSizeInputChanged(ChangeEventArgs args)
    {
        if (SelectedColumn is not null && args.Value is not null)
        {
            int.TryParse(args.Value as string, out int result);
            SelectedColumn.CellFormat.FontSize = result;
            StateChangeRequest.InvokeAsync();
        }
    }
    void FontFamilyInputChanged(ChangeEventArgs args)
    {
        if (SelectedColumn is not null && args.Value is not null)
        {
            SelectedColumn.CellFormat.FontFamily = args.Value.ToString()!;
            StateChangeRequest.InvokeAsync();
        }
    }
    void ToggleBold()
    {
        if(SelectedColumn is not null)
        {
            SelectedColumn.CellFormat.Bold = !SelectedColumn.CellFormat.Bold;
        }
    }
    void ToggleItalic()
    {
        if (SelectedColumn is not null)
        {
            SelectedColumn.CellFormat.Italic = !SelectedColumn.CellFormat.Italic;
        }
    }
    void ToggleUnderline()
    {
        if (SelectedColumn is not null)
        {
            SelectedColumn.CellFormat.Underline = !SelectedColumn.CellFormat.Underline;
        }
    }
    void SetAlignment(SharedLibrary.Enums.ViewTemplate.Align cellAlignment)
    {
        if (SelectedColumn is not null)
        {
            SelectedColumn.CellFormat.Align = cellAlignment;
        }
    }
    void AddColumn()
    {
        Section.Columns.Add(new SheetColumn { WidthPercent = 10 });
        StateChangeRequest.InvokeAsync();
    }
    async Task DeleteColumn()
    {
        if(SelectedColumn is not null)
        {
            var parameters = new DialogParameters<YesNoDialog>();
            parameters.Add(x => x.Info, Localizer["Vill du ta bort kolumnen?"]);

            var dialog = await DialogService.ShowAsync<YesNoDialog>(Localizer["Ta bort"], parameters);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                Section.Columns.Remove(SelectedColumn);
                await StateChangeRequest.InvokeAsync();
            }
        }
    }
}
