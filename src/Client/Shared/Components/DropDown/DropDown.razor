<div class="@ContainerClass" style="@Style" @onmouseleave="MouseLeave" @onmouseenter="MouseEnter">

    <div class="@ActivatorClass" style="height: 100%; width: 100%" @onclick="ActivatorClick">
        @ActivatorContent
    </div>
        
    <div class="@ContentClass" @onclick="ContentClick">
        @DropDownContent
    </div>

</div>
@code {
    [Parameter] public RenderFragment? ActivatorContent { get; set; }
    [Parameter] public RenderFragment? DropDownContent { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool CloseOnContentClick { get; set; } = true;
    [Parameter] public string Style { get; set; } = string.Empty;

    bool IsActive = false;
    bool IsMouseOver = false;

    string ContainerClass => $"container {ContainerDisabledClass}";
    string ContainerDisabledClass => Disabled ? "container-disabled" : "container-enabled";
    string ActivatorClass => $"activator mud-ripple";
    string ContentClass => IsActive ? $"content-active" : $"content-inactive";

    void ActivatorClick()
    {
        if (!Disabled)
        {
            Toggle();
        }
    }
    void ContentClick()
    {
        if (CloseOnContentClick)
        {
            Toggle();
        }
    }
    public void Toggle()
    {
        IsActive = !IsActive;
    }
    async Task MouseLeave()
    {
        IsMouseOver = false;
        await Task.Delay(400);
        if (!IsMouseOver)
        {
            IsActive = false;
        }
    }
    void MouseEnter()
    {
        IsMouseOver = true;
    }
}
