@page "/dashboard"
@using System.Security.Claims;
@using Collie.Shared;

<PageLayout>
    <ChildContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
            <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="min-height: 200px;">
                    <AuthorizeView>
                        <Authorized>
                            @if(Claims is null)
                            {
                                <MudProgressCircular Indeterminate="true"/>
                            }
                            else
                            {
                                @foreach (var item in Claims)
                                {
                                    <h4>@item.Type</h4>
                                    <h6 class="mb-2">@item.Value</h6>
                                }
                            }
                        </Authorized>
                    </AuthorizeView>
                    
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="min-height: 200px;">
                        <AuthorizeView>
                            <Authorized>
                                <dl>
                                    @foreach (var claim in @context.User.Claims)
                                    {
                                        <h4>@claim.Type</h4>
                                        <h6>@claim.Value</h6>
                                    }
                                </dl>
                            </Authorized>
                            <NotAuthorized>
                                <h3>No session</h3>
                            </NotAuthorized>
                        </AuthorizeView>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 100%"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="4">
                <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
            </MudItem>
        </MudGrid>
        </MudContainer>
    </ChildContent>
</PageLayout>

@code{

    [Inject] public required HttpClient _httpClient { get; set; }
    [Inject] public required AuthenticationStateProvider StateProvider { get; set; }
    public string Data { get; set; } = string.Empty;
    public List<ClaimStrings>? Claims { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var identity = (await StateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (identity is not null && identity.IsAuthenticated)
        {
            await SetClaimsAsync();
        }
    }
    public async Task SetClaimsAsync()
    {
        var result = await _httpClient.GetAsync("api/test/Claims");
        result.EnsureSuccessStatusCode();
        Claims = await result.Content.ReadFromJsonAsync<List<ClaimStrings>>();
    }
    public  List<ClaimStrings> GetClaims()
    {
        var result = _httpClient.GetAsync("api/test/Claims").Result;
        result.EnsureSuccessStatusCode();

        //var data = await result.Content.ReadAsStringAsync();
        var claims = result.Content.ReadFromJsonAsync<List<ClaimStrings>>().Result;
        if (claims is not null)
        {
            return claims;
        }
        else
        {
            return new List<ClaimStrings>();
        }
    }
}
