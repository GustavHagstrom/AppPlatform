@using Microsoft.AspNetCore.Antiforgery
﻿@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Server.Data
@implements IDisposable

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SignInManager<User> SignInManager
@inject IAntiforgery Antiforgery

<AuthorizeView>
    <Authorized>
      @*   <DropDown CloseOnContentClick="false" CloseOnMouseLeaveDelay="100" ContainerStyle="height: 100%;">
            <ActivatorContent>
                <MudText Typo="Typo.subtitle2" Class="my-auto" Style="color: var(--mud-palette-primary);">@context.User.Identity?.Name</MudText>
            </ActivatorContent>
            <DropDownContent>

                <MudSwitch T="bool" Checked="@(DarkModeManager?.IsDarkMode is not null ? DarkModeManager.IsDarkMode : false)" CheckedChanged="SetDarkMode" />
                <MudButton OnClick="LogOut" Class="px-4 mr-n2" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Sharp.Logout">@Localizer["Logga ut"]</MudButton>
                <form id="@LogoutFormId" action="Account/Logout" method="post">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                </form>
            </DropDownContent>
        </DropDown> *@
        <Server.Components.Shared.Organization.OrganizationPicker/>
        <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary);">@context.User.Identity?.Name</MudText>
        <MudButton OnClick="LogOut" Class="px-4 mr-n2" Style="height: 100%;" Variant="Variant.Text" Color="Color.Inherit" StartIcon="@Icons.Material.Sharp.Logout">@Localizer["Logga ut"]</MudButton>
        <form id="@LogoutFormId" action="Account/Logout" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
        </form>
    </Authorized>
    <NotAuthorized>
            <MudButton OnClick="LogIn" Class="px-4 mr-n2" Style="height: 100%;" Variant="Variant.Text" Color="Color.Inherit" StartIcon="@Icons.Material.Sharp.Login">@Localizer["Logga in"]</MudButton>
        <form id="@LoginFormId" action="Account/PerformExternalLogin" method="post">
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
            <input type="hidden" name="provider" value="@msLoginScheme?.Name" />
        </form>
    </NotAuthorized>
</AuthorizeView>
    <script>
        window.submitForm = function (formId) {
            var form = document.getElementById(formId);
            if (form) {
                form.submit();
            }
        };

    </script>
@code{
    [Inject] public required IStringLocalizer<LoginDisplay> Localizer { get; set; }
    [CascadingParameter] public DarkModeManager? DarkModeManager { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private bool PopOverIsVisible { get; set; } = false;
    private const string LoginFormId = "loginForm";
    private const string LogoutFormId = "logoutForm";
    private string? currentUrl;
    private AuthenticationScheme? msLoginScheme;

    

    protected override async Task OnInitializedAsync()
    {
        msLoginScheme = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Single();
    }
    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    public async Task LogOut()
    {
        PopOverIsVisible = false;
        await JSRuntime.InvokeVoidAsync("submitForm", LogoutFormId);
    }
    public async Task LogIn()
    {
        await JSRuntime.InvokeVoidAsync("submitForm", LoginFormId);
    }
    public static string GetInitials(string? name)
    {
        if (name is null) return string.Empty;
        var names = name.Split(" ");
        var initials = string.Empty;
        foreach (var item in names)
        {
            initials += item.First();
        }
        return initials;
    }
    async Task SetDarkMode(bool isDarkMode)
    {
        if (DarkModeManager is not null)
        {
            await DarkModeManager.SetDarkModeAsync(isDarkMode);
        }
    }
}
