@typeparam T

<div class="@Class" style="@DivStyle" @onclick="() => InputField.FocusAsync()">
    <input @ref="InputField" value="@Value" placeholder="@Placeholder" @onchange="OnChange" disabled="@Disabled" />
    @if(Icon is not null)
    {
        <MudIcon Class="d-flex my-auto mr-1" Icon="@Icon" Style="@IconActualStyle" />
    }
</div>

@code {
    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }

    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public string? IconStyle { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public T? Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }

    ElementReference InputField;

    string IconActualStyle => $"{DisabledIconStyle} {IconStyle}";
    string DisabledIconStyle => Disabled ? "color: var(--mud-palette-action-disabled);" : string.Empty;

    string DisabledDivStyle => Disabled ? $"cursor: default;" : string.Empty;
    string DivStyle => $"display: flex; border: 1px; border-style: solid; cursor: text; {DisabledDivStyle} {Style}";
}
