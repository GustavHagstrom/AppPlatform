@using static Server.Enteties.OrganizationInvitaion
@inject IStringLocalizer<InvitationList> Localizer
@inject IInvitationService InvitationService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudIconButton OnClick="() => NavigationManager.NavigateTo(ApplicationRoutes.Settings.Organization.Invite)"
               Icon="@Icons.Material.Sharp.Add" Variant="Variant.Outlined" Color="Color.Primary"/>
<MudSimpleTable Dense="true" Striped="true" Style="min-height: 100px;">
    <tbody>
        @foreach (var invite in Invitations)
        {
            <tr>
                <td>@invite.Email</td>
                <td>@invite.Status</td>
                <td>
                    @if (invite.Status == InvitationStatus.Pending)
                    {
                        <MudButton Variant="Variant.Text">Resend</MudButton>
                    }

                </td>
                <td>
                    <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" Size="Size.Small" />
                </td>
                
            </tr>
        }
    </tbody>
</MudSimpleTable>


@code{
    [CascadingParameter] public ActiveOrganizationContainer? ActiveOrganizationContainer { get; set; }

    List<OrganizationInvitaion> Invitations { get; set; } = new List<OrganizationInvitaion>();
    bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    async Task OnOrganizationChange(Organization? newOrg)
    {
        await LoadDataAsync();
    }
    async Task LoadDataAsync()
    {
        if (ActiveOrganizationContainer?.ActiveOrganization is null)
        {
            return;
        }
        Invitations.Clear();
        IsLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(400);
        Invitations.AddRange(await InvitationService.GetAllAsync(ActiveOrganizationContainer.ActiveOrganization));
        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged += OnOrganizationChange;
        }
    }
    public void Dispose()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged -= OnOrganizationChange;
        }
    }
}