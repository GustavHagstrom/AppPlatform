@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Server.Data
@using System.Security.Claims
@using Server.Extensions
@inject AuthenticationStateProvider AuthProvider
@inject IStringLocalizer<OrganizationPicker> Localizer
@inject IOrganizationService OrganizationService


<MudSelect T="Organization" Placeholder="@Localizer["Välj organisation"]" Label="@Localizer["Aktiv organisation"]" 
            Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Style="width: 250px;"
            MultiSelection="false" Value="ActiveOrganizationContainer?.ActiveOrganization" ValueChanged="OnValueChanged"
            Margin="Margin.Dense" Dense="true" ToStringFunc="OrganizationToString">
    @foreach (var organization in Organizations)
    {
        <MudSelectItem Value="@organization">@organization.Name</MudSelectItem>
    }
</MudSelect>

@code {
    public List<Organization> Organizations { get; private set; } = new List<Organization>();
    [CascadingParameter] public ActiveOrganizationContainer? ActiveOrganizationContainer { get; set; }

    Func<Organization, string> OrganizationToString = org => org?.Name ?? string.Empty;
    async Task OnValueChanged(Organization orgValue)
    {
        if(ActiveOrganizationContainer is not null)
        {
            await ActiveOrganizationContainer.SetActiveOrganizationAsync(orgValue);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var userClaims = (await AuthProvider.GetAuthenticationStateAsync()).User;
        await GetUserOrganizationsAsync(userClaims);
    }
    async Task GetUserOrganizationsAsync(ClaimsPrincipal userClaims)
    {
        var orgs = await OrganizationService.GetAllAsync(userClaims);
        Organizations.Clear();
        Organizations.AddRange(orgs);
    }
}



