@implements IDisposable
@inject SubscriptionService SubscriptionService
@inject IStringLocalizer<SubscriptionHandler> Localizer
@inject AuthenticationStateProvider AuthProvider

@if(IsLoading)
{
    <p>Loading....</p>
}
else if(Subscription is null)
{
    <p>@Localizer["NoSubscription"]</p>
    <MudButton OnClick="UpsertAsync">@Localizer["CreateSubscription"]</MudButton>
}
else
{
    <p>@($"Prenumeration med Id: {Subscription.Id}")</p>
    <MudButton>@Localizer["Spara ändringar"]</MudButton>
}

@code {
    [CascadingParameter] public ActiveOrganizationContainer? ActiveOrganizationContainer { get; set; }

    bool IsLoading { get; set; } = false;
    Subscription? Subscription { get; set; } = new();

    protected override void OnInitialized()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged += OnOrganizationChange;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    async Task OnOrganizationChange(Organization? newOrg)
    {
        await LoadDataAsync();
    }
    async Task LoadDataAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        IsLoading = true;
        StateHasChanged();
        await Task.Delay(400);
        Subscription = await SubscriptionService.GetSubscription(state.User);
        IsLoading = false;
        StateHasChanged();
    }
    async Task UpsertAsync()
    {
        var state = await AuthProvider.GetAuthenticationStateAsync();
        await SubscriptionService.Upsert(state.User, new());
        await LoadDataAsync();
    }
    public void Dispose()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged -= OnOrganizationChange;
        }
    }
}
