@using AppPlatform.Server.Extensions
@implements IDisposable
@inject IStringLocalizer<UserList> Localizer
@inject UserListService UserListService

<AuthorizeView>
    <Authorized>
        <MudSimpleTable Dense="true" Striped="true" Style="min-height: 100px;">
            <tbody>
                @foreach (var user in Users)
                {
                    <tr>
                        <td>@user.Email</td>
                        <td>
                            @if(user.Id != context.User.GetUserId())
                            {
                                <MudIconButton Variant="Variant.Text" Icon="@Icons.Material.Sharp.Delete" Color="Color.Error" Size="Size.Small"/>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </Authorized>
</AuthorizeView>


@code {
    [CascadingParameter] public ActiveOrganizationContainer? ActiveOrganizationContainer { get; set; }

    bool IsLoading { get; set; } = false;
    List<User> Users { get; set; } = new List<User>();

    protected override void OnInitialized()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged += OnOrganizationChange;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    async Task OnOrganizationChange(Organization? newOrg)
    {
        await LoadDataAsync();
    }
    async Task LoadDataAsync()
    {
        if(ActiveOrganizationContainer?.ActiveOrganization is null)
        {
            return;
        }
        Users.Clear();
        IsLoading = true;
        await InvokeAsync(StateHasChanged);
        await Task.Delay(400);
        Users.AddRange(await UserListService.GetUsersAsync(ActiveOrganizationContainer.ActiveOrganization));
        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        if (ActiveOrganizationContainer is not null)
        {
            ActiveOrganizationContainer.OnActiveOrganizationChanged -= OnOrganizationChange;
        }
    }
}
