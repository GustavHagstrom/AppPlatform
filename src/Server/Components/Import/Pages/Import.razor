@page "/bidcon/import"
@using Client.Shared.EstimationProcessing.Services;
@using SharedLibrary.DTOs.BidconAccess;


<div style="height: 100%; position: relative">

    <MudOverlay Absolute="true" DarkBackground="true" Visible="IsDownloading">
        <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
    </MudOverlay>


    <Toolbar Height="40px">
    
        <MudIconButton Icon="@Icons.Material.Sharp.Refresh" OnClick="GetEstimationItemTreeAsync" Style="height: 40px; width: 40px;" />
        <MudIconButton Icon="@Icons.Material.Sharp.Download" OnClick="DownloadAsync" Style="height: 40px; width: 40px;" />

    </Toolbar>
        

    <MudContainer MaxWidth="MaxWidth.Medium" Style="height: calc(100% - 40px)" Class="pa-4">
            
        <MudPaper Square="true" Elevation="4" Style="height: 100%">
            <MudStack Spacing="0" Row="true" Class="d-flex justify-center">
                <MudButton OnClick="() => ActiveTab = 1" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Search" Class="px-4" Style="@GetTabButtonStyle(1)">@Localizer["Sök"]</MudButton>
                <MudButton OnClick="() => ActiveTab = 2" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.Folder" Class="px-3" Style="@GetTabButtonStyle(2)">@Localizer["Utforska"]</MudButton>
                <MudBadge Content="ItemTree?.SelectedEstimations()?.Count()" Color="Color.Primary" Overlap="true">
                    <MudButton OnClick="() => ActiveTab = 3" Variant="Variant.Text" StartIcon="@Icons.Material.Sharp.CheckBox" Class="px-3" Style="@GetTabButtonStyle(3)">@Localizer["Valda"]</MudButton>
                </MudBadge>
            </MudStack>
            <MudDivider Light="true" />
            @if(ActiveTab == 1)
            {
                <EstimationList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
            }
            @if (ActiveTab == 2)
            {
                <EstimationExplorer ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
            }
            @if (ActiveTab == 3)
            {
                <EstimationSelectionList ItemTree="ItemTree" IsRefreshing="IsRefreshing" Height="calc(100% - 38px)" />
            }
        </MudPaper>
    </MudContainer>

</div>

@code{
    bool IsDownloading = false;
    int ActiveTab = 1;


    [CascadingParameter] public required MudTheme Theame { get; set; }
    [Inject] public required StyleService StyleService { get; set; }
    [Inject] public required IStringLocalizer<Import> Localizer { get; set; }
    [Inject] public required IBidconLinkService _linkService { get; set; }
    [Inject] public required IFolderService _folderService { get; set; }
    [Inject] public required IEstimationContainerService EstimationContainer { get; set; }
    [Inject] public required ISnackbar Snackbar { get; set; }
    [Inject] public required IBidconCredentialsService BidconCredentialsService { get; set; }
    [Inject] public required IBidconBackendAccessService BidconBackendAccessService { get; set; }
    [Inject] public required NavigationManager Navigation { get; set; }

    public TreeItem? ItemTree { get; set; }
    public bool IsRefreshing { get; set; } = true;


    string GetTabButtonStyle(int tab)
    {
        if(tab == ActiveTab)
        {
            return StyleService.ActivePageStyle;
        }
        return string.Empty;
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    protected override async Task OnInitializedAsync()
    {
        await GetEstimationItemTreeAsync();
    }

    private async Task DownloadAsync()
    {
        var credentials = await BidconCredentialsService.GetAsync();
        if(ItemTree is null || credentials is null)
        {
            return;
        }

        IsDownloading = true;
        StateHasChanged();

        var ids = ItemTree.SelectedEstimations().Select(x => x.Id).ToList();

        var estimationBatches = await _linkService.GetManyBatchesAsync(new EstimationRequestBatchesModelDto(ids));//, credentials));
        if (estimationBatches is not null)
        {
            EstimationContainer.ImportedEstimations = estimationBatches.ToList();
            Navigation.NavigateTo(ClientRoutes.Report);
        }


        IsDownloading = false;
        StateHasChanged();
    }
    private async Task GetEstimationItemTreeAsync()
    {
        IsRefreshing = true;
        ItemTree = null;
        var credentials = await BidconCredentialsService.GetAsync();
        var batch = await GetFolderBatchAsync(credentials);
        if (batch is not null)
        {
            var folder = _folderService.CreateFromBatch(batch);
            ItemTree = new TreeItem(folder);
            ItemTree.SelectionChanged = StateHasChanged;
        }
        else
        {
            Snackbar.Add($"Error: no folders returned", Severity.Error);
        }
        IsRefreshing = false;
        StateHasChanged();
    }
    async Task<BC_EstimationFolderBatch?> GetFolderBatchAsync(BC_DatabaseCredentialsDto? credentials)
    {
        if (credentials is null)
        {
            return null;
        }
        if (credentials.UseDesktopBidconLink)
        {
            return await _linkService.GetFolderBatchAsync();
        }
        else
        {
            return await BidconBackendAccessService.GetFolderBatchAsync();
        }
    }
}