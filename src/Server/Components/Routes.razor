@using AppPlatform.ViewSettingsModule
@using AppPlatform.UserRightSettingsModule
<StateManager>
    <Router AppAssembly="@typeof(Program).Assembly"
            AdditionalAssemblies="@(new[] 
{ 
    typeof(MainLayout).Assembly, 
    typeof(ViewSettingsModule).Assembly,
    typeof(UserRightSettingsModule).Assembly
})">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if(context.User.Identity is not null && context.User.Identity.IsAuthenticated)
                    {
                       @*  <LayoutView Layout="@typeof(MainLayout)">
                            <p>Sorry, you're not authorized to access this page.</p>
                        </LayoutView> *@
                        <p>Sorry, you're not authorized to access this page.</p>
                    }
                    else
                    {
                        <RedirectToLogin/>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)" >
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</StateManager>

@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var redirectUrl = await LocalStorageService.GetItemAsync(LocalStorageKeys.RedirectPostLoginUrl);
        if (!string.IsNullOrEmpty(redirectUrl))
        {
            await LocalStorageService.RemoveItemAsync(LocalStorageKeys.RedirectPostLoginUrl);
            NavigationManager.NavigateTo(redirectUrl);
        }
    }
}
