@using SharedLibrary.DTOs.BidconAccess;


<div class="relative">
    <MudOverlay DarkBackground="true" Absolute="true" Visible="IsLoading">
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
    </MudOverlay>

    <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-4">

        <MudItem xs="12" sm="12" md="6">
            <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Senast uppdaterad:"]</MudText>
            <MudTextField T="string" Margin="Margin.Dense" Variant="Variant.Outlined" ReadOnly="true" Value="@LastUpdated?.ToString("yyyy-MM-dd HH:mm")" />
        </MudItem>

        <MudItem xs="12">
            <MudSwitch T="bool" Checked="UseDesktopBidconLink" Label="@Localizer["Skrivbordslänk"]" Color="Color.Primary" CheckedChanged="x => UpdateProperty(nameof(UseDesktopBidconLink), x)" />
        </MudItem>

        <MudItem xs="12">
            <MudSwitch T="bool" Checked="!UseDesktopBidconLink" Label="@Localizer["Direktanslutning"]" Color="Color.Primary" CheckedChanged="x => UpdateProperty(nameof(UseDesktopBidconLink), !x)" />
        </MudItem>

        @if (!UseDesktopBidconLink)
        {
            <MudItem xs="12" sm="12" md="12">
                <MudSwitch T="bool" Checked="ServerAuthentication" Label="@Localizer["Autentisering"]" Color="Color.Primary" CheckedChanged="x => UpdateProperty(nameof(ServerAuthentication), x)" />
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Servernamn"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="Server" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(Server), x)" />
            </MudItem>

            <MudItem xs="12" sm="12" md="6">
                <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Databasnamn"]</MudText>
                <MudTextField T="string" Margin="Margin.Dense" Value="Database" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(Database), x)" />
            </MudItem>



            @if (ServerAuthentication)
            {
                <MudItem xs="12" sm="12" md="6">
                    <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Användare"]</MudText>
                    <MudTextField T="string" Margin="Margin.Dense" Value="User" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(User), x)" />
                </MudItem>

                <MudItem xs="12" sm="12" md="6">
                    <MudText Typo="Typo.subtitle2" Style="color: var(--mud-palette-text-primary)">@Localizer["Lösenord"]</MudText>
                    <MudTextField T="string" Margin="Margin.Dense" Value="Password" Variant="Variant.Outlined" ValueChanged="x => UpdateProperty(nameof(Password), x)" />
                </MudItem>
            }
        }

    </MudGrid>
</div>


@code {
    [Inject] public required IStringLocalizer<CredentialsFrameContent> Localizer { get; set; }
    [Inject] public required IBidconCredentialsService CredentialsService { get; set; }
    bool IsLoading = false;

    string Server = string.Empty;
    string Database = string.Empty;
    string User = string.Empty;
    string Password = string.Empty;
    bool ServerAuthentication;
    bool UseDesktopBidconLink;
    DateTime? LastUpdated;

    async Task UpdateProperty(string propertyName, object value)
    {
        switch (propertyName)
        {
            case nameof(Server):
                Server = (string)value;
                break;
            case nameof(Database):
                Database = (string)value;
                break;
            case nameof(User):
                User = (string)value;
                break;
            case nameof(Password):
                Password = (string)value;
                break;
            case nameof(ServerAuthentication):
                ServerAuthentication = (bool)value;
                break;
            case nameof(UseDesktopBidconLink):
                UseDesktopBidconLink = (bool)value;
                break;
        }
        await SaveValuesAsync(CreateDtoFromValues());
        LastUpdated = DateTime.Now;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshFromBackendAsync();
    } 
    async Task RefreshFromBackendAsync()
    {
        StartLoading();
        var credentials = await CredentialsService.GetAsync();
        if (credentials is not null)
        {
            SetValuesFromDto(credentials);
        }
        EndLoading();
    }

    void SetValuesFromDto(BC_DatabaseCredentialsDto credentials)
    {
        Server = credentials.Server;
        Database = credentials.Database;
        User = credentials.User;
        Password = credentials.Password;
        ServerAuthentication = credentials.ServerAuthentication;
        UseDesktopBidconLink = credentials.UseDesktopBidconLink;
        LastUpdated = credentials.LastUpdated;
    }
    async Task SaveValuesAsync(BC_DatabaseCredentialsDto credentials)
    {
        await CredentialsService.UpsertAsync(credentials);
    }
    BC_DatabaseCredentialsDto CreateDtoFromValues()
    {
        return new BC_DatabaseCredentialsDto(Server, Database, User, Password, ServerAuthentication, UseDesktopBidconLink, LastUpdated);
    }
    void StartLoading()
    {
        IsLoading = true;
        StateHasChanged();
    }
    void EndLoading()
    {
        IsLoading = false;
        StateHasChanged();
    }
}
