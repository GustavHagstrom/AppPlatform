@using Client.Shared.EstimationViewTemplate.Models;
@using Client.Shared.EstimationViewTemplate.Services;
@using System.Globalization;


<MudForm @ref="Form" Model="Template" Class="@(IsVisible ? VisibleFormClass : HiddenFormClass)" Style="height: 100%; background-color: var(--mud-palette-background-grey);">

    <MudOverlay DarkBackground="true" Visible="IsLoading" Absolute="true">
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
        
    <HeaderToolbar CloseRequest="Close" 
                   SaveAndCloseRequest="SaveAndClose" 
                   CreateNewSectionRequest="CreateNewSection"
                   DeleteSectionRequest="DeleteSection"
                   SelectedSection="SelectedSection"
                   SectionsInOrder="Template.SectionsInOrder.ToList()" 
                   OrderChanged="StateHasChanged" /> 
    @* <SectionSpecificToolbar Selection="Selection" StateChangedRequest="StateHasChanged" /> *@
        

    <MudContainer Class="pa-4" Style="height: calc(100% - 40px); overflow: auto;">
        <MudPaper Elevation="3" Style="max-width: 794px;" Class="mx-auto">
            <SectionList Sections="Template.SectionsInOrder" SelectedSection="SelectedSection" SelectedSectionChanged="OnSelectedSectionChanged" />
        </MudPaper>
    </MudContainer>

@*     <FooterBar @bind-Scale="Scale"/> *@



</MudForm>

@code {

    [Inject] public required IStringLocalizer<EditTemplatePopover> Localizer { get; set; }
    [Inject] public required IEstimationViewTemplateServices TemplateService { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    [Parameter, EditorRequired] public required EstimationViewFrameContent ParentComponent { get; set; }

    [Parameter] public EventCallback UpsertSuccefulCallback { get; set; }


    ViewTemplate Template { get; set; } = new() { Name = string.Empty };
    IViewSection? SelectedSection { get; set; }
    MudForm? Form;
    bool IsLoading = false;
    bool IsVisible { get; set; } = false;
    string HiddenFormClass = "fullscreen d-none relative";
    string VisibleFormClass = "fullscreen zoom-in relative";

    void CreateNewSection(IViewSection section)
    {
        section.Order = Template.DataSections.Count + Template.SheetSections.Count;
        if(section is DataSection dataSection)
        {
            Template.DataSections.Add(dataSection);
        }
        else if(section is SheetSection sheetSection)
        {
            Template.SheetSections.Add(sheetSection);
        }
        SelectedSection = section;
        StateHasChanged();
    }
    void DeleteSection(IViewSection section)
    {
        if (section is DataSection dataSection)
        {
            Template.DataSections.Remove(dataSection);
        }
        else if (section is SheetSection sheetSection)
        {
            Template.SheetSections.Remove(sheetSection);
        }
        SelectedSection = null;
        StateHasChanged();
    }
    void OnSelectedSectionChanged(IViewSection section)
    {
        SelectedSection = section;
    }
    void SetIsLoading(bool isLoading)
    {
        IsLoading = isLoading;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        //Parentcomponent activates the ShowPopOver method
        ParentComponent.ShowPopoverFunction = ShowPopOver;
    }
    async Task ShowPopOver(Guid? id)
    {
        IsVisible = true;
        StateHasChanged();
        await LoadTemplate(id);
    }
    async Task LoadTemplate(Guid? id)
    {
        if (id is not null)
        {
            try
            {
                SetIsLoading(true);
                Template = await TemplateService.GetAsync(id.Value);
            }
            catch (Exception)
            {
                //Handle exception
                throw;
            }
            SetIsLoading(false);
        }
        else
        {
            Template = new() { Name = string.Empty };
        }
    }
    async Task SaveAndClose()
    {

        Form?.Validate();
        if(Form?.IsValid == true)
        {
            try
            {
                var parameters = new DialogParameters<ConfirmSaveAndQuitDialog>();
                parameters.Add(x => x.Template, Template);

                var dialog = await DialogService.ShowAsync<ConfirmSaveAndQuitDialog>(Localizer["Spara"], parameters);
                var result = await dialog.Result;
                if(!result.Canceled)
                {
                    SetIsLoading(true);
                    await TemplateService.UpsertAsync(Template);
                    await UpsertSuccefulCallback.InvokeAsync();
                    Close();
                }
            }
            catch (Exception)
            {
                SetIsLoading(false);
                //handle exception
                throw;
            }
        }

    }
    void Close()
    {
        IsVisible = false;
        SetIsLoading(false);
    }
}