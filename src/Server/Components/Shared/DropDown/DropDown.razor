<style>
    .container {
        position: relative;
        display: inline-block;
        user-select: none;
        overflow: visible;
    }

    .container-enabled {
        color: var(--mud-palette-text-primary);
        cursor: pointer;
    }

    .container-disabled {
        color: var(--mud-palette-action-disabled);
    }

    .content-inactive {
        display: none;
    }

    .content-active {
        display: flex;
        flex-direction: column;
        position: absolute;
        top: 100%;
        width: 100%;
        z-index: 1;
        background-color: var(--mud-palette-background);
        box-shadow: var(--mud-elevation-2);
    }

    .activator {
        transition: background-color 75ms linear;
    }

    .container-enabled .activator:hover {
        background-color: var(--mud-palette-action-default-hover);
        /*background-color: var(--mud-palette-primary-hover);*/
    }

</style>
<div class="@ContainerClass" style="@ContainerStyle" @onmouseleave="MouseLeave" @onmouseenter="MouseEnter">

    <div class="@ActivatorClass" style="height: 100%; width: 100%" @onclick="ActivatorClick">
        @ActivatorContent
    </div>
        
    <div class="@ContentClass" style="@DropDownContentStyle" @onclick="ContentClick">
        @DropDownContent
    </div>

</div>
@code {
    [Parameter] public RenderFragment? ActivatorContent { get; set; }
    [Parameter] public RenderFragment? DropDownContent { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool CloseOnContentClick { get; set; } = true;
    [Parameter] public string ContainerStyle { get; set; } = string.Empty;
    [Parameter] public string DropDownContentStyle { get; set; } = string.Empty;
    [Parameter] public int CloseOnMouseLeaveDelay { get; set; } = 0;

    bool IsActive = false;
    bool IsMouseOver = false;

    string ContainerClass => $"container {ContainerDisabledClass}";
    string ContainerDisabledClass => Disabled ? "container-disabled" : "container-enabled";
    string ActivatorClass => $"activator mud-ripple";
    string ContentClass => IsActive ? $"content-active" : $"content-inactive";

    void ActivatorClick()
    {
        if (!Disabled)
        {
            Toggle();
        }
    }
    void ContentClick()
    {
        if (CloseOnContentClick)
        {
            Toggle();
        }
    }
    public void Toggle()
    {
        IsActive = !IsActive;
    }
    async Task MouseLeave()
    {
        IsMouseOver = false;
        await Task.Delay(CloseOnMouseLeaveDelay);
        if (!IsMouseOver)
        {
            IsActive = false;
        }
    }
    void MouseEnter()
    {
        IsMouseOver = true;
    }
}
