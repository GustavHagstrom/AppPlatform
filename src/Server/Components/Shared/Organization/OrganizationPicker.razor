@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Server.Data
@using System.Security.Claims
@using Server.Extensions
@inject AuthenticationStateProvider AuthProvider
@inject IStringLocalizer<OrganizationPicker> Localizer
@inject IOrganizationService OrganizationService

<AuthorizeView>
    <Authorized>
        <MudSelect T="Organization" Label="@Localizer["Organisation"]" AnchorOrigin="Origin.BottomCenter"
                   MultiSelection="false" Value="ActiveOrganization" ValueChanged="OnValueChanged">
            @foreach (var organization in Organizations)
            {
                <MudSelectItem Value="@organization">@organization.Name</MudSelectItem>
            }
        </MudSelect>

        @code {
        public List<Organization> Organizations { get; private set; } = new List<Organization>();
        public Organization? ActiveOrganization { get; private set; }


        async Task OnValueChanged(Organization orgValue)
        {
            var userClaims = (await AuthProvider.GetAuthenticationStateAsync()).User;
            ActiveOrganization = orgValue;
            await OrganizationService.SetActiveAsync(userClaims, orgValue);
        }
        protected override async Task OnInitializedAsync()
        {
            var userClaims = (await AuthProvider.GetAuthenticationStateAsync()).User;
            await GetUserOrganizationsAsync(userClaims);
        }
        async Task GetUserOrganizationsAsync(ClaimsPrincipal userClaims)
        {
            var orgs = await OrganizationService.GetAllAsync(userClaims);
            Organizations.Clear();
            Organizations.AddRange(orgs);
            var activeOrgId = await OrganizationService.GetActiveOrgIdAsync(userClaims);
            ActiveOrganization = Organizations.Where(x => x.Id == activeOrgId).FirstOrDefault() ?? null;
        }
        }

    </Authorized>
</AuthorizeView>


