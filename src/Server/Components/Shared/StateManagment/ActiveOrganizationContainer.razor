@using Microsoft.EntityFrameworkCore
@using Server.Data
@using Server.Extensions
@inject ApplicationDbContext _dbContext
@inject AuthenticationStateProvider _authProvider
@inject IOrganizationService _organizationService
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
@code{
    [Parameter] public RenderFragment? ChildContent { get; set; }
    public Organization? ActiveOrganization { get; private set; }
    public event Action<Organization>? OnActiveOrganizationChanged;

    public void NotifyStateChanged() => StateHasChanged();

    public async Task SetActiveOrganizationAsync(Organization? organization)
    {
        var state = await _authProvider.GetAuthenticationStateAsync();
        await _organizationService.SetActiveAsync(state.User, organization);
        ActiveOrganization = organization;
        await OnActiveOrganizationChanged?.Invoke(organization);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        var state = await _authProvider.GetAuthenticationStateAsync();
        if (state.User.Identity?.IsAuthenticated == true)
        {
            var user = await _dbContext.Users
                .Include(x => x.ActiveOrganization)
                .Where(x => x.Id == state.User.GetUserId())
                .FirstOrDefaultAsync();
            await SetActiveOrganizationAsync(user?.ActiveOrganization);
            StateHasChanged();
        }
    }

}