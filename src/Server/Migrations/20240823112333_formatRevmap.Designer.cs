// <auto-generated />
using System;
using AppPlatform.Data.EfCore;
using AppPlatform.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppPlatform.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240823112333_formatRevmap")]
    partial class formatRevmap
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.RoleAccess", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessClaimValue")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "AccessClaimValue");

                    b.ToTable("RoleAccess");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.UserAccess", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccessClaimValue")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "AccessClaimValue");

                    b.ToTable("UserAccess");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.BidconAccessCredentials", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DesktopPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ServerAuthentication")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UseDesktopBidconLink")
                        .HasColumnType("INTEGER");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("TenantId");

                    b.ToTable("BidconAccessCredentials");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationEnteties.Estimation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BidconId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfirmationOfficer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Customer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("HandlingOfficer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NetSheetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double?>("TenderTotal")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("NetSheetId")
                        .IsUnique();

                    b.ToTable("Estimation");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EstimationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double?>("LayerItemUnitAskingPrice")
                        .HasColumnType("REAL");

                    b.Property<double?>("LayerItemUnitCost")
                        .HasColumnType("REAL");

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RowType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SheetItemId");

                    b.ToTable("SheetItem");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataCell", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CellFormatId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Column")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataSectionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Row")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CellFormatId");

                    b.HasIndex("DataSectionId");

                    b.ToTable("DataCell");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataCellFormat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Align")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("BorderStyle")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DoesIncludeTimeOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderBottom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderLeft")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderRight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderTop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThoasandsSeparator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnderline")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Justify")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataCellFormat");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSectionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WidthPercent")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataSectionId");

                    b.ToTable("DataColumn");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataSection", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFooter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHeader")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RowCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ViewId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("DataSection");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.RoleView", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ViewId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "ViewId");

                    b.HasIndex("ViewId");

                    b.ToTable("RoleViews");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetColumn", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Align")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("BorderStyle")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColumnType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DoesIncludeTimeOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderBottom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderLeft")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderRight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderTop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThoasandsSeparator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnderline")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Justify")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetSectionTemplateId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SheetSectionTemplateId");

                    b.ToTable("SheetColumn");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetRowFormat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Align")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("BorderStyle")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DecimalCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DoesIncludeTimeOfDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FontSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FormatType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderBottom")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderLeft")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderRight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasBorderTop")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasThoasandsSeparator")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBold")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnderline")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Justify")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RowType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SheetSectionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextColor")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SheetSectionId");

                    b.ToTable("SheetRowFormat");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetSection", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SheetType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ViewId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ViewId");

                    b.ToTable("SheetSection");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.UserView", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ViewId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "ViewId");

                    b.HasIndex("ViewId");

                    b.ToTable("UserViews");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.View", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDarkMode")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.RoleAccess", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.Authorization.Role", "Role")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.UserRole", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationEnteties.Estimation", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", "NetSheet")
                        .WithOne("Estimation")
                        .HasForeignKey("AppPlatform.Core.Enteties.EstimationEnteties.Estimation", "NetSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NetSheet");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", null)
                        .WithMany("AllInOrder")
                        .HasForeignKey("SheetItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataCell", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.DataCellFormat", "CellFormat")
                        .WithMany()
                        .HasForeignKey("CellFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.DataSection", "DataSection")
                        .WithMany("Cells")
                        .HasForeignKey("DataSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CellFormat");

                    b.Navigation("DataSection");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataColumn", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.DataSection", "DataSection")
                        .WithMany("Columns")
                        .HasForeignKey("DataSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSection");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataSection", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.View", "View")
                        .WithMany("DataSections")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("View");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.RoleView", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.Authorization.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.View", "View")
                        .WithMany()
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("View");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetColumn", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.SheetSection", "SheetSectionTemplate")
                        .WithMany("Columns")
                        .HasForeignKey("SheetSectionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SheetSectionTemplate");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetRowFormat", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.SheetSection", "SheetSection")
                        .WithMany("RowFormats")
                        .HasForeignKey("SheetSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SheetSection");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetSection", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.View", "View")
                        .WithMany("SheetSections")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("View");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.UserView", b =>
                {
                    b.HasOne("AppPlatform.Core.Enteties.EstimationView.View", "View")
                        .WithMany()
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("View");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.Authorization.Role", b =>
                {
                    b.Navigation("RoleAccesses");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationEnteties.SheetItem", b =>
                {
                    b.Navigation("AllInOrder");

                    b.Navigation("Children");

                    b.Navigation("Estimation");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.DataSection", b =>
                {
                    b.Navigation("Cells");

                    b.Navigation("Columns");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.SheetSection", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("RowFormats");
                });

            modelBuilder.Entity("AppPlatform.Core.Enteties.EstimationView.View", b =>
                {
                    b.Navigation("DataSections");

                    b.Navigation("SheetSections");
                });
#pragma warning restore 612, 618
        }
    }
}
