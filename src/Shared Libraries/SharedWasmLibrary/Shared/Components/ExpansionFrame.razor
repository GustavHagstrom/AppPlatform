<div class="@(Border ? $"border border-solid; {Class}" : Class)" style="@Style">

    @if(TitleText is not null || TitleContent is not null)
    {
        <div class="d-flex @(Expanded && UnderlinedTitle && ChildContent is not null ? "border-b border-solid" : string.Empty) @TitleClass" style="@TitleStyle">
            <div class="flex-grow-1 align-center">
                @if (TitleText is not null)
                {
                    <MudText Typo="Typo.h6" Class="py-2 px-4" Style="pr-4 color: var(--mud-palette-text-primary);">@TitleText</MudText>
                }
                @TitleContent
            </div>
            <MudIconButton Class="my-auto" Style="@($"height: {IconHeight}; width: {IconWidth};")" Icon="@(Expanded ? IconExpanded : IconCollapsed)" Color="IconColor" OnClick="() => Expanded = !Expanded" />
        </div>
    }
    else
    {
        <MudIconButton Class="d-flex align-center absolute z-10" Style="@($"top: 0; left: 0; height: {IconHeight}; width: {IconWidth};")" Icon="@(Expanded ? IconExpanded : IconCollapsed)" Color="IconColor" OnClick="() => Expanded = !Expanded" />
    }
    
    <MudCollapse Expanded="Expanded" Style="@ChildStyle" Class="@ChildClass">
        @if (Expanded)
        {
            @ChildContent
        }
    </MudCollapse>

</div>

@code{
    [Parameter] public string ChildClass { get; set; } = string.Empty;
    [Parameter] public string ChildStyle { get; set; } = string.Empty;
    
    [Parameter] public string Class { get; set; } = string.Empty;
    [Parameter] public string Style { get; set; } = string.Empty;

    [Parameter] public string TitleClass { get; set; } = string.Empty;
    [Parameter] public string TitleStyle { get; set; } = string.Empty;
    
    [Parameter] public string? TitleText { get; set; }
    [Parameter] public RenderFragment? TitleContent { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Expanded { get; set; } = false;
    [Parameter] public bool Border { get; set; } = true;
    [Parameter] public bool UnderlinedTitle { get; set; } = true;
    [Parameter] public string IconCollapsed { get; set; } = Icons.Material.Sharp.KeyboardArrowDown;
    [Parameter] public string IconExpanded { get; set; } = Icons.Material.Sharp.KeyboardArrowUp;
    [Parameter] public Color IconColor { get; set; } = Color.Primary;
    [Parameter] public string IconHeight { get; set; } = "45px";
    [Parameter] public string IconWidth { get; set; } = "45px";



    
}